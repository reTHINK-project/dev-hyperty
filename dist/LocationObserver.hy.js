(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ObserverHypertyDescriptor__ = __webpack_require__(1);\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n//import { Syncher } from 'service-framework/dist/Syncher';\\n//import {Discovery} from 'service-framework/dist/Discovery';\\n//import URI from 'urijs'\\n//import {ContextObserver} from 'service-framework/dist/ContextManager';\\n\\n\\nvar LocationObserverHyperty =\\n/*#__PURE__*/\\nfunction () {\\n  function LocationObserverHyperty() {\\n    _classCallCheck(this, LocationObserverHyperty);\\n  }\\n\\n  _createClass(LocationObserverHyperty, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, config, factory) {\\n      //    this._domain = divideURL(hypertyURL).domain;\\n      this.hypertyURL = hypertyURL;\\n      this._context = factory.createContextObserver(hypertyURL, bus, config, ['location-context']);\\n      /*    let uri = new URI(hypertyURL);\\r\\n          this._users2observe = [];\\r\\n          this._observers = {};\\r\\n          this._objectDescURL = `hyperty-catalogue://catalogue.${uri.hostname()}/.well-known/dataschema/Context`;\\r\\n          this._syncher = new Syncher(hypertyURL, bus, config);\\r\\n          this._discovery = new Discovery(hypertyURL, config.runtimeURL, bus);*/\\n    }\\n  }, {\\n    key: \\\"start\\\",\\n    value: function start(callback) {\\n      console.log('[LocationObserver.start] ');\\n      return this._context.start();\\n    }\\n  }, {\\n    key: \\\"resumeDiscoveries\\\",\\n    value: function resumeDiscoveries() {\\n      return this._context.resumeDiscoveries();\\n    }\\n  }, {\\n    key: \\\"onResumeObserver\\\",\\n    value: function onResumeObserver(callback) {\\n      return this._context.onResumeObserver(callback);\\n    }\\n  }, {\\n    key: \\\"discoverUsers\\\",\\n    value: function discoverUsers(email, domain) {\\n      return this._context.discoverUsers(email, domain);\\n    }\\n  }, {\\n    key: \\\"observe\\\",\\n    value: function observe(hyperty) {\\n      return this._context.observe(hyperty);\\n    }\\n  }, {\\n    key: \\\"unobserve\\\",\\n    value: function unobserve(Context) {\\n      return this._context.unobserve(Context);\\n    }\\n    /*watchUsersPosition(callback) {\\r\\n        this.usersPosition = [];\\r\\n    \\r\\n        this._discovery.discoverDataObjectsPerName('location')\\r\\n            .then((dataobjects) => {\\r\\n                const liveDOs = dataobjects.filter(d => d.status === 'live')\\r\\n                console.log('[LocationObserver] disocvered', liveDOs)\\r\\n                liveDOs.forEach(dataobject =>  {\\r\\n                    this._syncher.subscribe(this._objectDescURL, dataobject.url).then(observer => {\\r\\n                        console.log('[LocationObserver] observing', observer)\\r\\n                        //observer.data.values[]\\r\\n                        //preferred_username\\r\\n                        let position = {\\r\\n                            preferred_username: observer.data.tag,\\r\\n                            coords:{\\r\\n                                latitude: observer.data.values.find(v=>v.name==='latitude').value,\\r\\n                                longitude: observer.data.values.find(v=>v.name==='longitude').value\\r\\n                            }\\r\\n                        }\\r\\n                        this.usersPosition.push(position)\\r\\n                        observer.onChange('*', (event)=>{\\r\\n    \\r\\n                            if(event.field === 'values'){\\r\\n                                position.coords.latitude = event.data.find(v=>v.name==='latitude').value\\r\\n                                position.coords.longitude = event.data.find(v=>v.name==='longitude').value\\r\\n                                this.usersPosition.push(position);\\r\\n                            }\\r\\n                            if(callback)\\r\\n                                callback(this.usersPosition)\\r\\n                        })\\r\\n                        if(callback)\\r\\n                            callback(this.usersPosition)\\r\\n                    })\\r\\n                })\\r\\n            }).catch((err)=>{\\r\\n                console.error('[LocationObserver]', err)\\r\\n            });\\r\\n    }*/\\n\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__ObserverHypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */].name;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__ObserverHypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */];\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this.hypertyURL;\\n    }\\n  }]);\\n\\n  return LocationObserverHyperty;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (LocationObserverHyperty);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL2xvY2F0aW9uL0xvY2F0aW9uT2JzZXJ2ZXIuaHkuanM/MzEyNCJdLCJuYW1lcyI6WyJMb2NhdGlvbk9ic2VydmVySHlwZXJ0eSIsImh5cGVydHlVUkwiLCJidXMiLCJjb25maWciLCJmYWN0b3J5IiwiX2NvbnRleHQiLCJjcmVhdGVDb250ZXh0T2JzZXJ2ZXIiLCJjYWxsYmFjayIsImNvbnNvbGUiLCJsb2ciLCJzdGFydCIsInJlc3VtZURpc2NvdmVyaWVzIiwib25SZXN1bWVPYnNlcnZlciIsImVtYWlsIiwiZG9tYWluIiwiZGlzY292ZXJVc2VycyIsImh5cGVydHkiLCJvYnNlcnZlIiwiQ29udGV4dCIsInVub2JzZXJ2ZSIsImh5cGVydHlEZXNjcmlwdG9yIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztJQUdNQSx1Qjs7O0FBRUYscUNBQWM7QUFBQTtBQUFFOzs7OzJCQWNYQyxVLEVBQVlDLEcsRUFBS0MsTSxFQUFRQyxPLEVBQVM7QUFDL0I7QUFDUixXQUFLSCxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFdBQUtJLFFBQUwsR0FBZ0JELE9BQU8sQ0FBQ0UscUJBQVIsQ0FBOEJMLFVBQTlCLEVBQTBDQyxHQUExQyxFQUErQ0MsTUFBL0MsRUFBc0QsQ0FBQyxrQkFBRCxDQUF0RCxDQUFoQjtBQUVBOzs7Ozs7QUFRRDs7OzBCQUVLSSxRLEVBQVU7QUFDZEMsYUFBTyxDQUFDQyxHQUFSLENBQVksMkJBQVo7QUFDQSxhQUFPLEtBQUtKLFFBQUwsQ0FBY0ssS0FBZCxFQUFQO0FBQ0Q7Ozt3Q0FFbUI7QUFDbEIsYUFBTyxLQUFLTCxRQUFMLENBQWNNLGlCQUFkLEVBQVA7QUFDRDs7O3FDQUVnQkosUSxFQUFVO0FBQ3pCLGFBQU8sS0FBS0YsUUFBTCxDQUFjTyxnQkFBZCxDQUErQkwsUUFBL0IsQ0FBUDtBQUNEOzs7a0NBRWFNLEssRUFBTUMsTSxFQUFRO0FBQzFCLGFBQU8sS0FBS1QsUUFBTCxDQUFjVSxhQUFkLENBQTRCRixLQUE1QixFQUFtQ0MsTUFBbkMsQ0FBUDtBQUNEOzs7NEJBRU9FLE8sRUFBUztBQUNmLGFBQU8sS0FBS1gsUUFBTCxDQUFjWSxPQUFkLENBQXNCRCxPQUF0QixDQUFQO0FBQ0Q7Ozs4QkFFU0UsTyxFQUNWO0FBQ0UsYUFBTyxLQUFLYixRQUFMLENBQWNjLFNBQWQsQ0FBd0JELE9BQXhCLENBQVA7QUFDRDtBQUlIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkF2RFk7QUFDUixhQUFPRSxxRkFBaUIsQ0FBQ0MsSUFBekI7QUFDRDs7O3dCQUVnQjtBQUNmLGFBQU9ELHFGQUFQO0FBQ0Q7Ozt3QkFFc0I7QUFDckIsYUFBTyxLQUFLbkIsVUFBWjtBQUNEOzs7Ozs7QUFzRllELHNGQUFmIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2ltcG9ydCB7IFN5bmNoZXIgfSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXInO1xyXG4vL2ltcG9ydCB7RGlzY292ZXJ5fSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L0Rpc2NvdmVyeSc7XHJcbi8vaW1wb3J0IFVSSSBmcm9tICd1cmlqcydcclxuLy9pbXBvcnQge0NvbnRleHRPYnNlcnZlcn0gZnJvbSAnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9Db250ZXh0TWFuYWdlcic7XHJcbmltcG9ydCB7IGh5cGVydHlEZXNjcmlwdG9yIH0gZnJvbSAnLi9PYnNlcnZlckh5cGVydHlEZXNjcmlwdG9yJztcclxuXHJcblxyXG5jbGFzcyBMb2NhdGlvbk9ic2VydmVySHlwZXJ0eSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBnZXQgbmFtZSgpe1xyXG4gICAgcmV0dXJuIGh5cGVydHlEZXNjcmlwdG9yLm5hbWU7XHJcbiAgfVxyXG5cclxuICBnZXQgZGVzY3JpcHRvcigpIHtcclxuICAgIHJldHVybiBoeXBlcnR5RGVzY3JpcHRvcjtcclxuICB9XHJcblxyXG4gIGdldCBydW50aW1lSHlwZXJ0eVVSTCgpe1xyXG4gICAgcmV0dXJuIHRoaXMuaHlwZXJ0eVVSTDtcclxuICB9XHJcblxyXG4gIF9zdGFydChoeXBlcnR5VVJMLCBidXMsIGNvbmZpZywgZmFjdG9yeSkge1xyXG4gICAgICAgICAgICAvLyAgICB0aGlzLl9kb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eVVSTCkuZG9tYWluO1xyXG4gICAgdGhpcy5oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDtcclxuICAgIHRoaXMuX2NvbnRleHQgPSBmYWN0b3J5LmNyZWF0ZUNvbnRleHRPYnNlcnZlcihoeXBlcnR5VVJMLCBidXMsIGNvbmZpZyxbJ2xvY2F0aW9uLWNvbnRleHQnXSk7XHJcblxyXG4gICAgLyogICAgbGV0IHVyaSA9IG5ldyBVUkkoaHlwZXJ0eVVSTCk7XHJcbiAgICAgICAgdGhpcy5fdXNlcnMyb2JzZXJ2ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuX29ic2VydmVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX29iamVjdERlc2NVUkwgPSBgaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJHt1cmkuaG9zdG5hbWUoKX0vLndlbGwta25vd24vZGF0YXNjaGVtYS9Db250ZXh0YDtcclxuICAgICAgICB0aGlzLl9zeW5jaGVyID0gbmV3IFN5bmNoZXIoaHlwZXJ0eVVSTCwgYnVzLCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuX2Rpc2NvdmVyeSA9IG5ldyBEaXNjb3ZlcnkoaHlwZXJ0eVVSTCwgY29uZmlnLnJ1bnRpbWVVUkwsIGJ1cyk7Ki9cclxuXHJcblxyXG4gIH1cclxuXHJcbiAgc3RhcnQoY2FsbGJhY2spIHtcclxuICAgIGNvbnNvbGUubG9nKCdbTG9jYXRpb25PYnNlcnZlci5zdGFydF0gJyk7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgcmVzdW1lRGlzY292ZXJpZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5yZXN1bWVEaXNjb3ZlcmllcygpO1xyXG4gIH1cclxuXHJcbiAgb25SZXN1bWVPYnNlcnZlcihjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQub25SZXN1bWVPYnNlcnZlcihjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBkaXNjb3ZlclVzZXJzKGVtYWlsLGRvbWFpbikge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuZGlzY292ZXJVc2VycyhlbWFpbCwgZG9tYWluKTtcclxuICB9XHJcblxyXG4gIG9ic2VydmUoaHlwZXJ0eSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQub2JzZXJ2ZShoeXBlcnR5KTtcclxuICB9XHJcblxyXG4gIHVub2JzZXJ2ZShDb250ZXh0KVxyXG4gIHtcclxuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LnVub2JzZXJ2ZShDb250ZXh0KTtcclxuICB9XHJcblxyXG5cclxuXHJcbi8qd2F0Y2hVc2Vyc1Bvc2l0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLnVzZXJzUG9zaXRpb24gPSBbXTtcclxuXHJcbiAgICB0aGlzLl9kaXNjb3ZlcnkuZGlzY292ZXJEYXRhT2JqZWN0c1Blck5hbWUoJ2xvY2F0aW9uJylcclxuICAgICAgICAudGhlbigoZGF0YW9iamVjdHMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGl2ZURPcyA9IGRhdGFvYmplY3RzLmZpbHRlcihkID0+IGQuc3RhdHVzID09PSAnbGl2ZScpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbTG9jYXRpb25PYnNlcnZlcl0gZGlzb2N2ZXJlZCcsIGxpdmVET3MpXHJcbiAgICAgICAgICAgIGxpdmVET3MuZm9yRWFjaChkYXRhb2JqZWN0ID0+ICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zeW5jaGVyLnN1YnNjcmliZSh0aGlzLl9vYmplY3REZXNjVVJMLCBkYXRhb2JqZWN0LnVybCkudGhlbihvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tMb2NhdGlvbk9ic2VydmVyXSBvYnNlcnZpbmcnLCBvYnNlcnZlcilcclxuICAgICAgICAgICAgICAgICAgICAvL29ic2VydmVyLmRhdGEudmFsdWVzW11cclxuICAgICAgICAgICAgICAgICAgICAvL3ByZWZlcnJlZF91c2VybmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkX3VzZXJuYW1lOiBvYnNlcnZlci5kYXRhLnRhZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzOntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBvYnNlcnZlci5kYXRhLnZhbHVlcy5maW5kKHY9PnYubmFtZT09PSdsYXRpdHVkZScpLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBvYnNlcnZlci5kYXRhLnZhbHVlcy5maW5kKHY9PnYubmFtZT09PSdsb25naXR1ZGUnKS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXNlcnNQb3NpdGlvbi5wdXNoKHBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm9uQ2hhbmdlKCcqJywgKGV2ZW50KT0+e1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZXZlbnQuZmllbGQgPT09ICd2YWx1ZXMnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSA9IGV2ZW50LmRhdGEuZmluZCh2PT52Lm5hbWU9PT0nbGF0aXR1ZGUnKS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSA9IGV2ZW50LmRhdGEuZmluZCh2PT52Lm5hbWU9PT0nbG9uZ2l0dWRlJykudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXNlcnNQb3NpdGlvbi5wdXNoKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjYWxsYmFjaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMudXNlcnNQb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0aGlzLnVzZXJzUG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pLmNhdGNoKChlcnIpPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tMb2NhdGlvbk9ic2VydmVyXScsIGVycilcclxuICAgICAgICB9KTtcclxufSovXHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2NhdGlvbk9ic2VydmVySHlwZXJ0eTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1oeXBlcnR5L3NyYy9sb2NhdGlvbi9Mb2NhdGlvbk9ic2VydmVyLmh5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return hypertyDescriptor; });\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"LocationObserver\\\",\\n  \\\"configuration\\\": {\\n    \\\"domain_registration\\\": false,\\n    \\\"domain_routing\\\": false\\n  },\\n  \\\"hypertyType\\\": [\\\"location-context\\\"],\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"dataObjects\\\": [\\\"https://catalogue.%domain%/.well-known/dataschema/Context\\\"]\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL2xvY2F0aW9uL09ic2VydmVySHlwZXJ0eURlc2NyaXB0b3IuanM/N2YyZCJdLCJuYW1lcyI6WyJoeXBlcnR5RGVzY3JpcHRvciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBTyxJQUFJQSxpQkFBaUIsR0FBRztBQUM3QixVQUFRLGtCQURxQjtBQUU3QixtQkFBaUI7QUFDZiwyQkFBdUIsS0FEUjtBQUVmLHNCQUFrQjtBQUZILEdBRlk7QUFNN0IsaUJBQWUsQ0FDYixrQkFEYSxDQU5jO0FBUzdCLGlCQUFlO0FBQ2IsZUFBVztBQURFLEdBVGM7QUFZN0IsY0FBWSxZQVppQjtBQWE3QixlQUFhLEVBYmdCO0FBYzdCLGlCQUFlLENBQ2IsMkRBRGE7QUFkYyxDQUF4QiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBoeXBlcnR5RGVzY3JpcHRvciA9IHtcclxuICBcIm5hbWVcIjogXCJMb2NhdGlvbk9ic2VydmVyXCIsXHJcbiAgXCJjb25maWd1cmF0aW9uXCI6IHtcclxuICAgIFwiZG9tYWluX3JlZ2lzdHJhdGlvblwiOiBmYWxzZSxcclxuICAgIFwiZG9tYWluX3JvdXRpbmdcIjogZmFsc2VcclxuICB9LFxyXG4gIFwiaHlwZXJ0eVR5cGVcIjogW1xyXG4gICAgXCJsb2NhdGlvbi1jb250ZXh0XCJcclxuICBdLFxyXG4gIFwiY29uc3RyYWludHNcIjoge1xyXG4gICAgXCJicm93c2VyXCI6IHRydWVcclxuICB9LFxyXG4gIFwibGFuZ3VhZ2VcIjogXCJqYXZhc2NyaXB0XCIsXHJcbiAgXCJzaWduYXR1cmVcIjogXCJcIixcclxuICBcImRhdGFPYmplY3RzXCI6IFtcclxuICAgIFwiaHR0cHM6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vZGF0YXNjaGVtYS9Db250ZXh0XCJcclxuICBdXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1oeXBlcnR5L3NyYy9sb2NhdGlvbi9PYnNlcnZlckh5cGVydHlEZXNjcmlwdG9yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});