(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 3);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      eval(\"/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.0 by @mathias */\\n;(function(root) {\\n\\n\\t/** Detect free variables */\\n\\tvar freeExports = typeof exports == 'object' && exports &&\\n\\t\\t!exports.nodeType && exports;\\n\\tvar freeModule = typeof module == 'object' && module &&\\n\\t\\t!module.nodeType && module;\\n\\tvar freeGlobal = typeof global == 'object' && global;\\n\\tif (\\n\\t\\tfreeGlobal.global === freeGlobal ||\\n\\t\\tfreeGlobal.window === freeGlobal ||\\n\\t\\tfreeGlobal.self === freeGlobal\\n\\t) {\\n\\t\\troot = freeGlobal;\\n\\t}\\n\\n\\t/**\\n\\t * The `punycode` object.\\n\\t * @name punycode\\n\\t * @type Object\\n\\t */\\n\\tvar punycode,\\n\\n\\t/** Highest positive signed 32-bit float value */\\n\\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\\n\\n\\t/** Bootstring parameters */\\n\\tbase = 36,\\n\\ttMin = 1,\\n\\ttMax = 26,\\n\\tskew = 38,\\n\\tdamp = 700,\\n\\tinitialBias = 72,\\n\\tinitialN = 128, // 0x80\\n\\tdelimiter = '-', // '\\\\x2D'\\n\\n\\t/** Regular expressions */\\n\\tregexPunycode = /^xn--/,\\n\\tregexNonASCII = /[^\\\\x20-\\\\x7E]/, // unprintable ASCII chars + non-ASCII chars\\n\\tregexSeparators = /[\\\\x2E\\\\u3002\\\\uFF0E\\\\uFF61]/g, // RFC 3490 separators\\n\\n\\t/** Error messages */\\n\\terrors = {\\n\\t\\t'overflow': 'Overflow: input needs wider integers to process',\\n\\t\\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\\n\\t\\t'invalid-input': 'Invalid input'\\n\\t},\\n\\n\\t/** Convenience shortcuts */\\n\\tbaseMinusTMin = base - tMin,\\n\\tfloor = Math.floor,\\n\\tstringFromCharCode = String.fromCharCode,\\n\\n\\t/** Temporary variable */\\n\\tkey;\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\t/**\\n\\t * A generic error utility function.\\n\\t * @private\\n\\t * @param {String} type The error type.\\n\\t * @returns {Error} Throws a `RangeError` with the applicable error message.\\n\\t */\\n\\tfunction error(type) {\\n\\t\\tthrow new RangeError(errors[type]);\\n\\t}\\n\\n\\t/**\\n\\t * A generic `Array#map` utility function.\\n\\t * @private\\n\\t * @param {Array} array The array to iterate over.\\n\\t * @param {Function} callback The function that gets called for every array\\n\\t * item.\\n\\t * @returns {Array} A new array of values returned by the callback function.\\n\\t */\\n\\tfunction map(array, fn) {\\n\\t\\tvar length = array.length;\\n\\t\\tvar result = [];\\n\\t\\twhile (length--) {\\n\\t\\t\\tresult[length] = fn(array[length]);\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * A simple `Array#map`-like wrapper to work with domain name strings or email\\n\\t * addresses.\\n\\t * @private\\n\\t * @param {String} domain The domain name or email address.\\n\\t * @param {Function} callback The function that gets called for every\\n\\t * character.\\n\\t * @returns {Array} A new string of characters returned by the callback\\n\\t * function.\\n\\t */\\n\\tfunction mapDomain(string, fn) {\\n\\t\\tvar parts = string.split('@');\\n\\t\\tvar result = '';\\n\\t\\tif (parts.length > 1) {\\n\\t\\t\\t// In email addresses, only the domain name should be punycoded. Leave\\n\\t\\t\\t// the local part (i.e. everything up to `@`) intact.\\n\\t\\t\\tresult = parts[0] + '@';\\n\\t\\t\\tstring = parts[1];\\n\\t\\t}\\n\\t\\t// Avoid `split(regex)` for IE8 compatibility. See #17.\\n\\t\\tstring = string.replace(regexSeparators, '\\\\x2E');\\n\\t\\tvar labels = string.split('.');\\n\\t\\tvar encoded = map(labels, fn).join('.');\\n\\t\\treturn result + encoded;\\n\\t}\\n\\n\\t/**\\n\\t * Creates an array containing the numeric code points of each Unicode\\n\\t * character in the string. While JavaScript uses UCS-2 internally,\\n\\t * this function will convert a pair of surrogate halves (each of which\\n\\t * UCS-2 exposes as separate characters) into a single code point,\\n\\t * matching UTF-16.\\n\\t * @see `punycode.ucs2.encode`\\n\\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\\n\\t * @memberOf punycode.ucs2\\n\\t * @name decode\\n\\t * @param {String} string The Unicode input string (UCS-2).\\n\\t * @returns {Array} The new array of code points.\\n\\t */\\n\\tfunction ucs2decode(string) {\\n\\t\\tvar output = [],\\n\\t\\t    counter = 0,\\n\\t\\t    length = string.length,\\n\\t\\t    value,\\n\\t\\t    extra;\\n\\t\\twhile (counter < length) {\\n\\t\\t\\tvalue = string.charCodeAt(counter++);\\n\\t\\t\\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\\n\\t\\t\\t\\t// high surrogate, and there is a next character\\n\\t\\t\\t\\textra = string.charCodeAt(counter++);\\n\\t\\t\\t\\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\\n\\t\\t\\t\\t\\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// unmatched surrogate; only append this code unit, in case the next\\n\\t\\t\\t\\t\\t// code unit is the high surrogate of a surrogate pair\\n\\t\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t\\t\\tcounter--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\toutput.push(value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn output;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a string based on an array of numeric code points.\\n\\t * @see `punycode.ucs2.decode`\\n\\t * @memberOf punycode.ucs2\\n\\t * @name encode\\n\\t * @param {Array} codePoints The array of numeric code points.\\n\\t * @returns {String} The new Unicode string (UCS-2).\\n\\t */\\n\\tfunction ucs2encode(array) {\\n\\t\\treturn map(array, function(value) {\\n\\t\\t\\tvar output = '';\\n\\t\\t\\tif (value > 0xFFFF) {\\n\\t\\t\\t\\tvalue -= 0x10000;\\n\\t\\t\\t\\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\\n\\t\\t\\t\\tvalue = 0xDC00 | value & 0x3FF;\\n\\t\\t\\t}\\n\\t\\t\\toutput += stringFromCharCode(value);\\n\\t\\t\\treturn output;\\n\\t\\t}).join('');\\n\\t}\\n\\n\\t/**\\n\\t * Converts a basic code point into a digit/integer.\\n\\t * @see `digitToBasic()`\\n\\t * @private\\n\\t * @param {Number} codePoint The basic numeric code point value.\\n\\t * @returns {Number} The numeric value of a basic code point (for use in\\n\\t * representing integers) in the range `0` to `base - 1`, or `base` if\\n\\t * the code point does not represent a value.\\n\\t */\\n\\tfunction basicToDigit(codePoint) {\\n\\t\\tif (codePoint - 48 < 10) {\\n\\t\\t\\treturn codePoint - 22;\\n\\t\\t}\\n\\t\\tif (codePoint - 65 < 26) {\\n\\t\\t\\treturn codePoint - 65;\\n\\t\\t}\\n\\t\\tif (codePoint - 97 < 26) {\\n\\t\\t\\treturn codePoint - 97;\\n\\t\\t}\\n\\t\\treturn base;\\n\\t}\\n\\n\\t/**\\n\\t * Converts a digit/integer into a basic code point.\\n\\t * @see `basicToDigit()`\\n\\t * @private\\n\\t * @param {Number} digit The numeric value of a basic code point.\\n\\t * @returns {Number} The basic code point whose value (when used for\\n\\t * representing integers) is `digit`, which needs to be in the range\\n\\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\\n\\t * used; else, the lowercase form is used. The behavior is undefined\\n\\t * if `flag` is non-zero and `digit` has no uppercase form.\\n\\t */\\n\\tfunction digitToBasic(digit, flag) {\\n\\t\\t//  0..25 map to ASCII a..z or A..Z\\n\\t\\t// 26..35 map to ASCII 0..9\\n\\t\\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\\n\\t}\\n\\n\\t/**\\n\\t * Bias adaptation function as per section 3.4 of RFC 3492.\\n\\t * https://tools.ietf.org/html/rfc3492#section-3.4\\n\\t * @private\\n\\t */\\n\\tfunction adapt(delta, numPoints, firstTime) {\\n\\t\\tvar k = 0;\\n\\t\\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\\n\\t\\tdelta += floor(delta / numPoints);\\n\\t\\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\\n\\t\\t\\tdelta = floor(delta / baseMinusTMin);\\n\\t\\t}\\n\\t\\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\\n\\t}\\n\\n\\t/**\\n\\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\\n\\t * symbols.\\n\\t * @memberOf punycode\\n\\t * @param {String} input The Punycode string of ASCII-only symbols.\\n\\t * @returns {String} The resulting string of Unicode symbols.\\n\\t */\\n\\tfunction decode(input) {\\n\\t\\t// Don't use UCS-2\\n\\t\\tvar output = [],\\n\\t\\t    inputLength = input.length,\\n\\t\\t    out,\\n\\t\\t    i = 0,\\n\\t\\t    n = initialN,\\n\\t\\t    bias = initialBias,\\n\\t\\t    basic,\\n\\t\\t    j,\\n\\t\\t    index,\\n\\t\\t    oldi,\\n\\t\\t    w,\\n\\t\\t    k,\\n\\t\\t    digit,\\n\\t\\t    t,\\n\\t\\t    /** Cached calculation results */\\n\\t\\t    baseMinusT;\\n\\n\\t\\t// Handle the basic code points: let `basic` be the number of input code\\n\\t\\t// points before the last delimiter, or `0` if there is none, then copy\\n\\t\\t// the first basic code points to the output.\\n\\n\\t\\tbasic = input.lastIndexOf(delimiter);\\n\\t\\tif (basic < 0) {\\n\\t\\t\\tbasic = 0;\\n\\t\\t}\\n\\n\\t\\tfor (j = 0; j < basic; ++j) {\\n\\t\\t\\t// if it's not a basic code point\\n\\t\\t\\tif (input.charCodeAt(j) >= 0x80) {\\n\\t\\t\\t\\terror('not-basic');\\n\\t\\t\\t}\\n\\t\\t\\toutput.push(input.charCodeAt(j));\\n\\t\\t}\\n\\n\\t\\t// Main decoding loop: start just after the last delimiter if any basic code\\n\\t\\t// points were copied; start at the beginning otherwise.\\n\\n\\t\\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\\n\\n\\t\\t\\t// `index` is the index of the next character to be consumed.\\n\\t\\t\\t// Decode a generalized variable-length integer into `delta`,\\n\\t\\t\\t// which gets added to `i`. The overflow checking is easier\\n\\t\\t\\t// if we increase `i` as we go, then subtract off its starting\\n\\t\\t\\t// value at the end to obtain `delta`.\\n\\t\\t\\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\\n\\n\\t\\t\\t\\tif (index >= inputLength) {\\n\\t\\t\\t\\t\\terror('invalid-input');\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdigit = basicToDigit(input.charCodeAt(index++));\\n\\n\\t\\t\\t\\tif (digit >= base || digit > floor((maxInt - i) / w)) {\\n\\t\\t\\t\\t\\terror('overflow');\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ti += digit * w;\\n\\t\\t\\t\\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\\n\\n\\t\\t\\t\\tif (digit < t) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbaseMinusT = base - t;\\n\\t\\t\\t\\tif (w > floor(maxInt / baseMinusT)) {\\n\\t\\t\\t\\t\\terror('overflow');\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tw *= baseMinusT;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tout = output.length + 1;\\n\\t\\t\\tbias = adapt(i - oldi, out, oldi == 0);\\n\\n\\t\\t\\t// `i` was supposed to wrap around from `out` to `0`,\\n\\t\\t\\t// incrementing `n` each time, so we'll fix that now:\\n\\t\\t\\tif (floor(i / out) > maxInt - n) {\\n\\t\\t\\t\\terror('overflow');\\n\\t\\t\\t}\\n\\n\\t\\t\\tn += floor(i / out);\\n\\t\\t\\ti %= out;\\n\\n\\t\\t\\t// Insert `n` at position `i` of the output\\n\\t\\t\\toutput.splice(i++, 0, n);\\n\\n\\t\\t}\\n\\n\\t\\treturn ucs2encode(output);\\n\\t}\\n\\n\\t/**\\n\\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\\n\\t * Punycode string of ASCII-only symbols.\\n\\t * @memberOf punycode\\n\\t * @param {String} input The string of Unicode symbols.\\n\\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\\n\\t */\\n\\tfunction encode(input) {\\n\\t\\tvar n,\\n\\t\\t    delta,\\n\\t\\t    handledCPCount,\\n\\t\\t    basicLength,\\n\\t\\t    bias,\\n\\t\\t    j,\\n\\t\\t    m,\\n\\t\\t    q,\\n\\t\\t    k,\\n\\t\\t    t,\\n\\t\\t    currentValue,\\n\\t\\t    output = [],\\n\\t\\t    /** `inputLength` will hold the number of code points in `input`. */\\n\\t\\t    inputLength,\\n\\t\\t    /** Cached calculation results */\\n\\t\\t    handledCPCountPlusOne,\\n\\t\\t    baseMinusT,\\n\\t\\t    qMinusT;\\n\\n\\t\\t// Convert the input in UCS-2 to Unicode\\n\\t\\tinput = ucs2decode(input);\\n\\n\\t\\t// Cache the length\\n\\t\\tinputLength = input.length;\\n\\n\\t\\t// Initialize the state\\n\\t\\tn = initialN;\\n\\t\\tdelta = 0;\\n\\t\\tbias = initialBias;\\n\\n\\t\\t// Handle the basic code points\\n\\t\\tfor (j = 0; j < inputLength; ++j) {\\n\\t\\t\\tcurrentValue = input[j];\\n\\t\\t\\tif (currentValue < 0x80) {\\n\\t\\t\\t\\toutput.push(stringFromCharCode(currentValue));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\thandledCPCount = basicLength = output.length;\\n\\n\\t\\t// `handledCPCount` is the number of code points that have been handled;\\n\\t\\t// `basicLength` is the number of basic code points.\\n\\n\\t\\t// Finish the basic string - if it is not empty - with a delimiter\\n\\t\\tif (basicLength) {\\n\\t\\t\\toutput.push(delimiter);\\n\\t\\t}\\n\\n\\t\\t// Main encoding loop:\\n\\t\\twhile (handledCPCount < inputLength) {\\n\\n\\t\\t\\t// All non-basic code points < n have been handled already. Find the next\\n\\t\\t\\t// larger one:\\n\\t\\t\\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\\n\\t\\t\\t\\tcurrentValue = input[j];\\n\\t\\t\\t\\tif (currentValue >= n && currentValue < m) {\\n\\t\\t\\t\\t\\tm = currentValue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\\n\\t\\t\\t// but guard against overflow\\n\\t\\t\\thandledCPCountPlusOne = handledCPCount + 1;\\n\\t\\t\\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\\n\\t\\t\\t\\terror('overflow');\\n\\t\\t\\t}\\n\\n\\t\\t\\tdelta += (m - n) * handledCPCountPlusOne;\\n\\t\\t\\tn = m;\\n\\n\\t\\t\\tfor (j = 0; j < inputLength; ++j) {\\n\\t\\t\\t\\tcurrentValue = input[j];\\n\\n\\t\\t\\t\\tif (currentValue < n && ++delta > maxInt) {\\n\\t\\t\\t\\t\\terror('overflow');\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (currentValue == n) {\\n\\t\\t\\t\\t\\t// Represent delta as a generalized variable-length integer\\n\\t\\t\\t\\t\\tfor (q = delta, k = base; /* no condition */; k += base) {\\n\\t\\t\\t\\t\\t\\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\\n\\t\\t\\t\\t\\t\\tif (q < t) {\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tqMinusT = q - t;\\n\\t\\t\\t\\t\\t\\tbaseMinusT = base - t;\\n\\t\\t\\t\\t\\t\\toutput.push(\\n\\t\\t\\t\\t\\t\\t\\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\tq = floor(qMinusT / baseMinusT);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\\n\\t\\t\\t\\t\\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\\n\\t\\t\\t\\t\\tdelta = 0;\\n\\t\\t\\t\\t\\t++handledCPCount;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t++delta;\\n\\t\\t\\t++n;\\n\\n\\t\\t}\\n\\t\\treturn output.join('');\\n\\t}\\n\\n\\t/**\\n\\t * Converts a Punycode string representing a domain name or an email address\\n\\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\\n\\t * it doesn't matter if you call it on a string that has already been\\n\\t * converted to Unicode.\\n\\t * @memberOf punycode\\n\\t * @param {String} input The Punycoded domain name or email address to\\n\\t * convert to Unicode.\\n\\t * @returns {String} The Unicode representation of the given Punycode\\n\\t * string.\\n\\t */\\n\\tfunction toUnicode(input) {\\n\\t\\treturn mapDomain(input, function(string) {\\n\\t\\t\\treturn regexPunycode.test(string)\\n\\t\\t\\t\\t? decode(string.slice(4).toLowerCase())\\n\\t\\t\\t\\t: string;\\n\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * Converts a Unicode string representing a domain name or an email address to\\n\\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\\n\\t * i.e. it doesn't matter if you call it with a domain that's already in\\n\\t * ASCII.\\n\\t * @memberOf punycode\\n\\t * @param {String} input The domain name or email address to convert, as a\\n\\t * Unicode string.\\n\\t * @returns {String} The Punycode representation of the given domain name or\\n\\t * email address.\\n\\t */\\n\\tfunction toASCII(input) {\\n\\t\\treturn mapDomain(input, function(string) {\\n\\t\\t\\treturn regexNonASCII.test(string)\\n\\t\\t\\t\\t? 'xn--' + encode(string)\\n\\t\\t\\t\\t: string;\\n\\t\\t});\\n\\t}\\n\\n\\t/*--------------------------------------------------------------------------*/\\n\\n\\t/** Define the public API */\\n\\tpunycode = {\\n\\t\\t/**\\n\\t\\t * A string representing the current Punycode.js version number.\\n\\t\\t * @memberOf punycode\\n\\t\\t * @type String\\n\\t\\t */\\n\\t\\t'version': '1.3.2',\\n\\t\\t/**\\n\\t\\t * An object of methods to convert from JavaScript's internal character\\n\\t\\t * representation (UCS-2) to Unicode code points, and back.\\n\\t\\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\\n\\t\\t * @memberOf punycode\\n\\t\\t * @type Object\\n\\t\\t */\\n\\t\\t'ucs2': {\\n\\t\\t\\t'decode': ucs2decode,\\n\\t\\t\\t'encode': ucs2encode\\n\\t\\t},\\n\\t\\t'decode': decode,\\n\\t\\t'encode': encode,\\n\\t\\t'toASCII': toASCII,\\n\\t\\t'toUnicode': toUnicode\\n\\t};\\n\\n\\t/** Expose `punycode` */\\n\\t// Some AMD build optimizers, like r.js, check for specific condition patterns\\n\\t// like the following:\\n\\tif (\\n\\t\\ttrue\\n\\t) {\\n\\t\\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\\n\\t\\t\\treturn punycode;\\n\\t\\t}).call(exports, __webpack_require__, exports, module),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else if (freeExports && freeModule) {\\n\\t\\tif (module.exports == freeExports) {\\n\\t\\t\\t// in Node.js, io.js, or RingoJS v0.8.0+\\n\\t\\t\\tfreeModule.exports = punycode;\\n\\t\\t} else {\\n\\t\\t\\t// in Narwhal or RingoJS v0.7.0-\\n\\t\\t\\tfor (key in punycode) {\\n\\t\\t\\t\\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\t// in Rhino or a web browser\\n\\t\\troot.punycode = punycode;\\n\\t}\\n\\n}(this));\\n\\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module), __webpack_require__(6)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      eval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n * URI.js - Mutating URLs\\n * IPv6 Support\\n *\\n * Version: 1.19.1\\n *\\n * Author: Rodney Rehm\\n * Web: http://medialize.github.io/URI.js/\\n *\\n * Licensed under\\n *   MIT License http://www.opensource.org/licenses/mit-license\\n *\\n */\\n\\n(function (root, factory) {\\n  'use strict';\\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\\n  if (typeof module === 'object' && module.exports) {\\n    // Node\\n    module.exports = factory();\\n  } else if (true) {\\n    // AMD. Register as an anonymous module.\\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n  } else {\\n    // Browser globals (root is window)\\n    root.IPv6 = factory(root);\\n  }\\n}(this, function (root) {\\n  'use strict';\\n\\n  /*\\n  var _in = \\\"fe80:0000:0000:0000:0204:61ff:fe9d:f156\\\";\\n  var _out = IPv6.best(_in);\\n  var _expected = \\\"fe80::204:61ff:fe9d:f156\\\";\\n\\n  console.log(_in, _out, _expected, _out === _expected);\\n  */\\n\\n  // save current IPv6 variable, if any\\n  var _IPv6 = root && root.IPv6;\\n\\n  function bestPresentation(address) {\\n    // based on:\\n    // Javascript to test an IPv6 address for proper format, and to\\n    // present the \\\"best text representation\\\" according to IETF Draft RFC at\\n    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04\\n    // 8 Feb 2010 Rich Brown, Dartware, LLC\\n    // Please feel free to use this code as long as you provide a link to\\n    // http://www.intermapper.com\\n    // http://intermapper.com/support/tools/IPV6-Validator.aspx\\n    // http://download.dartware.com/thirdparty/ipv6validator.js\\n\\n    var _address = address.toLowerCase();\\n    var segments = _address.split(':');\\n    var length = segments.length;\\n    var total = 8;\\n\\n    // trim colons (:: or ::a:b:c… or …a:b:c::)\\n    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {\\n      // must have been ::\\n      // remove first two items\\n      segments.shift();\\n      segments.shift();\\n    } else if (segments[0] === '' && segments[1] === '') {\\n      // must have been ::xxxx\\n      // remove the first item\\n      segments.shift();\\n    } else if (segments[length - 1] === '' && segments[length - 2] === '') {\\n      // must have been xxxx::\\n      segments.pop();\\n    }\\n\\n    length = segments.length;\\n\\n    // adjust total segments for IPv4 trailer\\n    if (segments[length - 1].indexOf('.') !== -1) {\\n      // found a \\\".\\\" which means IPv4\\n      total = 7;\\n    }\\n\\n    // fill empty segments them with \\\"0000\\\"\\n    var pos;\\n    for (pos = 0; pos < length; pos++) {\\n      if (segments[pos] === '') {\\n        break;\\n      }\\n    }\\n\\n    if (pos < total) {\\n      segments.splice(pos, 1, '0000');\\n      while (segments.length < total) {\\n        segments.splice(pos, 0, '0000');\\n      }\\n    }\\n\\n    // strip leading zeros\\n    var _segments;\\n    for (var i = 0; i < total; i++) {\\n      _segments = segments[i].split('');\\n      for (var j = 0; j < 3 ; j++) {\\n        if (_segments[0] === '0' && _segments.length > 1) {\\n          _segments.splice(0,1);\\n        } else {\\n          break;\\n        }\\n      }\\n\\n      segments[i] = _segments.join('');\\n    }\\n\\n    // find longest sequence of zeroes and coalesce them into one segment\\n    var best = -1;\\n    var _best = 0;\\n    var _current = 0;\\n    var current = -1;\\n    var inzeroes = false;\\n    // i; already declared\\n\\n    for (i = 0; i < total; i++) {\\n      if (inzeroes) {\\n        if (segments[i] === '0') {\\n          _current += 1;\\n        } else {\\n          inzeroes = false;\\n          if (_current > _best) {\\n            best = current;\\n            _best = _current;\\n          }\\n        }\\n      } else {\\n        if (segments[i] === '0') {\\n          inzeroes = true;\\n          current = i;\\n          _current = 1;\\n        }\\n      }\\n    }\\n\\n    if (_current > _best) {\\n      best = current;\\n      _best = _current;\\n    }\\n\\n    if (_best > 1) {\\n      segments.splice(best, _best, '');\\n    }\\n\\n    length = segments.length;\\n\\n    // assemble remaining segments\\n    var result = '';\\n    if (segments[0] === '')  {\\n      result = ':';\\n    }\\n\\n    for (i = 0; i < length; i++) {\\n      result += segments[i];\\n      if (i === length - 1) {\\n        break;\\n      }\\n\\n      result += ':';\\n    }\\n\\n    if (segments[length - 1] === '') {\\n      result += ':';\\n    }\\n\\n    return result;\\n  }\\n\\n  function noConflict() {\\n    /*jshint validthis: true */\\n    if (root.IPv6 === this) {\\n      root.IPv6 = _IPv6;\\n    }\\n\\n    return this;\\n  }\\n\\n  return {\\n    best: bestPresentation,\\n    noConflict: noConflict\\n  };\\n}));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL3VzZXItYWN0aXZpdHkvbm9kZV9tb2R1bGVzL3VyaWpzL3NyYy9JUHY2LmpzPzYwY2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxVQUFVLElBQTBDO0FBQ3ZEO0FBQ0EsSUFBSSxvQ0FBTyxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0dBQUM7QUFDbkIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsV0FBVztBQUM5QjtBQUNBLHFCQUFxQixRQUFRO0FBQzdCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVCxlQUFlLFdBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIFVSSS5qcyAtIE11dGF0aW5nIFVSTHNcbiAqIElQdjYgU3VwcG9ydFxuICpcbiAqIFZlcnNpb246IDEuMTkuMVxuICpcbiAqIEF1dGhvcjogUm9kbmV5IFJlaG1cbiAqIFdlYjogaHR0cDovL21lZGlhbGl6ZS5naXRodWIuaW8vVVJJLmpzL1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyXG4gKiAgIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIC8vIE5vZGVcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5JUHY2ID0gZmFjdG9yeShyb290KTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAocm9vdCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgdmFyIF9pbiA9IFwiZmU4MDowMDAwOjAwMDA6MDAwMDowMjA0OjYxZmY6ZmU5ZDpmMTU2XCI7XG4gIHZhciBfb3V0ID0gSVB2Ni5iZXN0KF9pbik7XG4gIHZhciBfZXhwZWN0ZWQgPSBcImZlODA6OjIwNDo2MWZmOmZlOWQ6ZjE1NlwiO1xuXG4gIGNvbnNvbGUubG9nKF9pbiwgX291dCwgX2V4cGVjdGVkLCBfb3V0ID09PSBfZXhwZWN0ZWQpO1xuICAqL1xuXG4gIC8vIHNhdmUgY3VycmVudCBJUHY2IHZhcmlhYmxlLCBpZiBhbnlcbiAgdmFyIF9JUHY2ID0gcm9vdCAmJiByb290LklQdjY7XG5cbiAgZnVuY3Rpb24gYmVzdFByZXNlbnRhdGlvbihhZGRyZXNzKSB7XG4gICAgLy8gYmFzZWQgb246XG4gICAgLy8gSmF2YXNjcmlwdCB0byB0ZXN0IGFuIElQdjYgYWRkcmVzcyBmb3IgcHJvcGVyIGZvcm1hdCwgYW5kIHRvXG4gICAgLy8gcHJlc2VudCB0aGUgXCJiZXN0IHRleHQgcmVwcmVzZW50YXRpb25cIiBhY2NvcmRpbmcgdG8gSUVURiBEcmFmdCBSRkMgYXRcbiAgICAvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1pZXRmLTZtYW4tdGV4dC1hZGRyLXJlcHJlc2VudGF0aW9uLTA0XG4gICAgLy8gOCBGZWIgMjAxMCBSaWNoIEJyb3duLCBEYXJ0d2FyZSwgTExDXG4gICAgLy8gUGxlYXNlIGZlZWwgZnJlZSB0byB1c2UgdGhpcyBjb2RlIGFzIGxvbmcgYXMgeW91IHByb3ZpZGUgYSBsaW5rIHRvXG4gICAgLy8gaHR0cDovL3d3dy5pbnRlcm1hcHBlci5jb21cbiAgICAvLyBodHRwOi8vaW50ZXJtYXBwZXIuY29tL3N1cHBvcnQvdG9vbHMvSVBWNi1WYWxpZGF0b3IuYXNweFxuICAgIC8vIGh0dHA6Ly9kb3dubG9hZC5kYXJ0d2FyZS5jb20vdGhpcmRwYXJ0eS9pcHY2dmFsaWRhdG9yLmpzXG5cbiAgICB2YXIgX2FkZHJlc3MgPSBhZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIHNlZ21lbnRzID0gX2FkZHJlc3Muc3BsaXQoJzonKTtcbiAgICB2YXIgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIHZhciB0b3RhbCA9IDg7XG5cbiAgICAvLyB0cmltIGNvbG9ucyAoOjogb3IgOjphOmI6Y+KApiBvciDigKZhOmI6Yzo6KVxuICAgIGlmIChzZWdtZW50c1swXSA9PT0gJycgJiYgc2VnbWVudHNbMV0gPT09ICcnICYmIHNlZ21lbnRzWzJdID09PSAnJykge1xuICAgICAgLy8gbXVzdCBoYXZlIGJlZW4gOjpcbiAgICAgIC8vIHJlbW92ZSBmaXJzdCB0d28gaXRlbXNcbiAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICBzZWdtZW50cy5zaGlmdCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudHNbMF0gPT09ICcnICYmIHNlZ21lbnRzWzFdID09PSAnJykge1xuICAgICAgLy8gbXVzdCBoYXZlIGJlZW4gOjp4eHh4XG4gICAgICAvLyByZW1vdmUgdGhlIGZpcnN0IGl0ZW1cbiAgICAgIHNlZ21lbnRzLnNoaWZ0KCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50c1tsZW5ndGggLSAxXSA9PT0gJycgJiYgc2VnbWVudHNbbGVuZ3RoIC0gMl0gPT09ICcnKSB7XG4gICAgICAvLyBtdXN0IGhhdmUgYmVlbiB4eHh4OjpcbiAgICAgIHNlZ21lbnRzLnBvcCgpO1xuICAgIH1cblxuICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICAgIC8vIGFkanVzdCB0b3RhbCBzZWdtZW50cyBmb3IgSVB2NCB0cmFpbGVyXG4gICAgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgIC8vIGZvdW5kIGEgXCIuXCIgd2hpY2ggbWVhbnMgSVB2NFxuICAgICAgdG90YWwgPSA3O1xuICAgIH1cblxuICAgIC8vIGZpbGwgZW1wdHkgc2VnbWVudHMgdGhlbSB3aXRoIFwiMDAwMFwiXG4gICAgdmFyIHBvcztcbiAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHtcbiAgICAgIGlmIChzZWdtZW50c1twb3NdID09PSAnJykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zIDwgdG90YWwpIHtcbiAgICAgIHNlZ21lbnRzLnNwbGljZShwb3MsIDEsICcwMDAwJyk7XG4gICAgICB3aGlsZSAoc2VnbWVudHMubGVuZ3RoIDwgdG90YWwpIHtcbiAgICAgICAgc2VnbWVudHMuc3BsaWNlKHBvcywgMCwgJzAwMDAnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzdHJpcCBsZWFkaW5nIHplcm9zXG4gICAgdmFyIF9zZWdtZW50cztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAgIF9zZWdtZW50cyA9IHNlZ21lbnRzW2ldLnNwbGl0KCcnKTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMyA7IGorKykge1xuICAgICAgICBpZiAoX3NlZ21lbnRzWzBdID09PSAnMCcgJiYgX3NlZ21lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBfc2VnbWVudHMuc3BsaWNlKDAsMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VnbWVudHNbaV0gPSBfc2VnbWVudHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgLy8gZmluZCBsb25nZXN0IHNlcXVlbmNlIG9mIHplcm9lcyBhbmQgY29hbGVzY2UgdGhlbSBpbnRvIG9uZSBzZWdtZW50XG4gICAgdmFyIGJlc3QgPSAtMTtcbiAgICB2YXIgX2Jlc3QgPSAwO1xuICAgIHZhciBfY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnQgPSAtMTtcbiAgICB2YXIgaW56ZXJvZXMgPSBmYWxzZTtcbiAgICAvLyBpOyBhbHJlYWR5IGRlY2xhcmVkXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgaWYgKGluemVyb2VzKSB7XG4gICAgICAgIGlmIChzZWdtZW50c1tpXSA9PT0gJzAnKSB7XG4gICAgICAgICAgX2N1cnJlbnQgKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnplcm9lcyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChfY3VycmVudCA+IF9iZXN0KSB7XG4gICAgICAgICAgICBiZXN0ID0gY3VycmVudDtcbiAgICAgICAgICAgIF9iZXN0ID0gX2N1cnJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VnbWVudHNbaV0gPT09ICcwJykge1xuICAgICAgICAgIGluemVyb2VzID0gdHJ1ZTtcbiAgICAgICAgICBjdXJyZW50ID0gaTtcbiAgICAgICAgICBfY3VycmVudCA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX2N1cnJlbnQgPiBfYmVzdCkge1xuICAgICAgYmVzdCA9IGN1cnJlbnQ7XG4gICAgICBfYmVzdCA9IF9jdXJyZW50O1xuICAgIH1cblxuICAgIGlmIChfYmVzdCA+IDEpIHtcbiAgICAgIHNlZ21lbnRzLnNwbGljZShiZXN0LCBfYmVzdCwgJycpO1xuICAgIH1cblxuICAgIGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICAgIC8vIGFzc2VtYmxlIHJlbWFpbmluZyBzZWdtZW50c1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBpZiAoc2VnbWVudHNbMF0gPT09ICcnKSAge1xuICAgICAgcmVzdWx0ID0gJzonO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNlZ21lbnRzW2ldO1xuICAgICAgaWYgKGkgPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSAnOic7XG4gICAgfVxuXG4gICAgaWYgKHNlZ21lbnRzW2xlbmd0aCAtIDFdID09PSAnJykge1xuICAgICAgcmVzdWx0ICs9ICc6JztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBpZiAocm9vdC5JUHY2ID09PSB0aGlzKSB7XG4gICAgICByb290LklQdjYgPSBfSVB2NjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmVzdDogYmVzdFByZXNlbnRhdGlvbixcbiAgICBub0NvbmZsaWN0OiBub0NvbmZsaWN0XG4gIH07XG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtaHlwZXJ0eS9zcmMvdXNlci1hY3Rpdml0eS9ub2RlX21vZHVsZXMvdXJpanMvc3JjL0lQdjYuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      eval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n * URI.js - Mutating URLs\\n * Second Level Domain (SLD) Support\\n *\\n * Version: 1.19.1\\n *\\n * Author: Rodney Rehm\\n * Web: http://medialize.github.io/URI.js/\\n *\\n * Licensed under\\n *   MIT License http://www.opensource.org/licenses/mit-license\\n *\\n */\\n\\n(function (root, factory) {\\n  'use strict';\\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\\n  if (typeof module === 'object' && module.exports) {\\n    // Node\\n    module.exports = factory();\\n  } else if (true) {\\n    // AMD. Register as an anonymous module.\\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n  } else {\\n    // Browser globals (root is window)\\n    root.SecondLevelDomains = factory(root);\\n  }\\n}(this, function (root) {\\n  'use strict';\\n\\n  // save current SecondLevelDomains variable, if any\\n  var _SecondLevelDomains = root && root.SecondLevelDomains;\\n\\n  var SLD = {\\n    // list of known Second Level Domains\\n    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains\\n    // ----\\n    // publicsuffix.org is more current and actually used by a couple of browsers internally.\\n    // downside is it also contains domains like \\\"dyndns.org\\\" - which is fine for the security\\n    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js\\n    // ----\\n    list: {\\n      'ac':' com gov mil net org ',\\n      'ae':' ac co gov mil name net org pro sch ',\\n      'af':' com edu gov net org ',\\n      'al':' com edu gov mil net org ',\\n      'ao':' co ed gv it og pb ',\\n      'ar':' com edu gob gov int mil net org tur ',\\n      'at':' ac co gv or ',\\n      'au':' asn com csiro edu gov id net org ',\\n      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',\\n      'bb':' biz co com edu gov info net org store tv ',\\n      'bh':' biz cc com edu gov info net org ',\\n      'bn':' com edu gov net org ',\\n      'bo':' com edu gob gov int mil net org tv ',\\n      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',\\n      'bs':' com edu gov net org ',\\n      'bz':' du et om ov rg ',\\n      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',\\n      'ck':' biz co edu gen gov info net org ',\\n      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',\\n      'co':' com edu gov mil net nom org ',\\n      'cr':' ac c co ed fi go or sa ',\\n      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',\\n      'do':' art com edu gob gov mil net org sld web ',\\n      'dz':' art asso com edu gov net org pol ',\\n      'ec':' com edu fin gov info med mil net org pro ',\\n      'eg':' com edu eun gov mil name net org sci ',\\n      'er':' com edu gov ind mil net org rochest w ',\\n      'es':' com edu gob nom org ',\\n      'et':' biz com edu gov info name net org ',\\n      'fj':' ac biz com info mil name net org pro ',\\n      'fk':' ac co gov net nom org ',\\n      'fr':' asso com f gouv nom prd presse tm ',\\n      'gg':' co net org ',\\n      'gh':' com edu gov mil org ',\\n      'gn':' ac com gov net org ',\\n      'gr':' com edu gov mil net org ',\\n      'gt':' com edu gob ind mil net org ',\\n      'gu':' com edu gov net org ',\\n      'hk':' com edu gov idv net org ',\\n      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',\\n      'id':' ac co go mil net or sch web ',\\n      'il':' ac co gov idf k12 muni net org ',\\n      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',\\n      'iq':' com edu gov i mil net org ',\\n      'ir':' ac co dnssec gov i id net org sch ',\\n      'it':' edu gov ',\\n      'je':' co net org ',\\n      'jo':' com edu gov mil name net org sch ',\\n      'jp':' ac ad co ed go gr lg ne or ',\\n      'ke':' ac co go info me mobi ne or sc ',\\n      'kh':' com edu gov mil net org per ',\\n      'ki':' biz com de edu gov info mob net org tel ',\\n      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',\\n      'kn':' edu gov net org ',\\n      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',\\n      'kw':' com edu gov net org ',\\n      'ky':' com edu gov net org ',\\n      'kz':' com edu gov mil net org ',\\n      'lb':' com edu gov net org ',\\n      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',\\n      'lr':' com edu gov net org ',\\n      'lv':' asn com conf edu gov id mil net org ',\\n      'ly':' com edu gov id med net org plc sch ',\\n      'ma':' ac co gov m net org press ',\\n      'mc':' asso tm ',\\n      'me':' ac co edu gov its net org priv ',\\n      'mg':' com edu gov mil nom org prd tm ',\\n      'mk':' com edu gov inf name net org pro ',\\n      'ml':' com edu gov net org presse ',\\n      'mn':' edu gov org ',\\n      'mo':' com edu gov net org ',\\n      'mt':' com edu gov net org ',\\n      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',\\n      'mw':' ac co com coop edu gov int museum net org ',\\n      'mx':' com edu gob net org ',\\n      'my':' com edu gov mil name net org sch ',\\n      'nf':' arts com firm info net other per rec store web ',\\n      'ng':' biz com edu gov mil mobi name net org sch ',\\n      'ni':' ac co com edu gob mil net nom org ',\\n      'np':' com edu gov mil net org ',\\n      'nr':' biz com edu gov info net org ',\\n      'om':' ac biz co com edu gov med mil museum net org pro sch ',\\n      'pe':' com edu gob mil net nom org sld ',\\n      'ph':' com edu gov i mil net ngo org ',\\n      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',\\n      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',\\n      'pr':' ac biz com edu est gov info isla name net org pro prof ',\\n      'ps':' com edu gov net org plo sec ',\\n      'pw':' belau co ed go ne or ',\\n      'ro':' arts com firm info nom nt org rec store tm www ',\\n      'rs':' ac co edu gov in org ',\\n      'sb':' com edu gov net org ',\\n      'sc':' com edu gov net org ',\\n      'sh':' co com edu gov net nom org ',\\n      'sl':' com edu gov net org ',\\n      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',\\n      'sv':' com edu gob org red ',\\n      'sz':' ac co org ',\\n      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',\\n      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',\\n      'tw':' club com ebiz edu game gov idv mil net org ',\\n      'mu':' ac co com gov net or org ',\\n      'mz':' ac co edu gov org ',\\n      'na':' co com ',\\n      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',\\n      'pa':' abo ac com edu gob ing med net nom org sld ',\\n      'pt':' com edu gov int net nome org publ ',\\n      'py':' com edu gov mil net org ',\\n      'qa':' com edu gov mil net org ',\\n      're':' asso com nom ',\\n      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',\\n      'rw':' ac co com edu gouv gov int mil net ',\\n      'sa':' com edu gov med net org pub sch ',\\n      'sd':' com edu gov info med net org tv ',\\n      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',\\n      'sg':' com edu gov idn net org per ',\\n      'sn':' art com edu gouv org perso univ ',\\n      'sy':' com edu gov mil net news org ',\\n      'th':' ac co go in mi net or ',\\n      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',\\n      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',\\n      'tz':' ac co go ne or ',\\n      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',\\n      'ug':' ac co go ne or org sc ',\\n      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',\\n      'us':' dni fed isa kids nsn ',\\n      'uy':' com edu gub mil net org ',\\n      've':' co com edu gob info mil net org web ',\\n      'vi':' co com k12 net org ',\\n      'vn':' ac biz com edu gov health info int name net org pro ',\\n      'ye':' co com gov ltd me net org plc ',\\n      'yu':' ac co edu gov org ',\\n      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',\\n      'zm':' ac co com edu gov net org sch ',\\n      // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains\\n      'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',\\n      'net': 'gb jp se uk ',\\n      'org': 'ae',\\n      'de': 'com '\\n    },\\n    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost\\n    // in both performance and memory footprint. No initialization required.\\n    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4\\n    // Following methods use lastIndexOf() rather than array.split() in order\\n    // to avoid any memory allocations.\\n    has: function(domain) {\\n      var tldOffset = domain.lastIndexOf('.');\\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\\n        return false;\\n      }\\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\\n      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {\\n        return false;\\n      }\\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\\n      if (!sldList) {\\n        return false;\\n      }\\n      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;\\n    },\\n    is: function(domain) {\\n      var tldOffset = domain.lastIndexOf('.');\\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\\n        return false;\\n      }\\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\\n      if (sldOffset >= 0) {\\n        return false;\\n      }\\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\\n      if (!sldList) {\\n        return false;\\n      }\\n      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;\\n    },\\n    get: function(domain) {\\n      var tldOffset = domain.lastIndexOf('.');\\n      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {\\n        return null;\\n      }\\n      var sldOffset = domain.lastIndexOf('.', tldOffset-1);\\n      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {\\n        return null;\\n      }\\n      var sldList = SLD.list[domain.slice(tldOffset+1)];\\n      if (!sldList) {\\n        return null;\\n      }\\n      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {\\n        return null;\\n      }\\n      return domain.slice(sldOffset+1);\\n    },\\n    noConflict: function(){\\n      if (root.SecondLevelDomains === this) {\\n        root.SecondLevelDomains = _SecondLevelDomains;\\n      }\\n      return this;\\n    }\\n  };\\n\\n  return SLD;\\n}));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///2\\n\");\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_urijs__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_urijs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_urijs__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HypertyDescriptor__ = __webpack_require__(7);\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n//import { Syncher } from 'service-framework/dist/Syncher';\\n\\n //import Search from '../utils/Search';\\n//import IdentityManager from 'service-framework/dist/IdentityManager';\\n//import { Discovery } from 'service-framework/dist/Discovery';\\n//import { ContextObserver } from 'service-framework/dist/ContextManager';\\n\\n/**\\r\\n * The User Activity Hyperty provides an API to the Application to discover and connect to sources of user activity data.\\r\\n * These functions are only required to be used once.\\r\\n * By default, the Hyperty automatically connects and starts reading sources that were connected the last time.\\r\\n */\\n\\nvar UserActivityObserver =\\n/*#__PURE__*/\\nfunction () {\\n  function UserActivityObserver() {\\n    _classCallCheck(this, UserActivityObserver);\\n  }\\n\\n  _createClass(UserActivityObserver, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, config, factory) {\\n      //    super(hypertyURL, bus, config, ['availability_context'], factory);\\n      this._context = factory.createContextObserver(hypertyURL, bus, config, ['availability_context']);\\n      var uri = new __WEBPACK_IMPORTED_MODULE_0_urijs___default.a(hypertyURL);\\n      this.objectDescURL = \\\"hyperty-catalogue://catalogue.\\\".concat(uri.hostname(), \\\"/.well-known/dataschema/Context\\\"); //    this.syncher = factory.createSyncher(hypertyURL, bus, config);\\n\\n      this.identityManager = factory.createIdentityManager(hypertyURL, config.runtimeURL, bus);\\n      this.discovery = factory.createDiscovery(hypertyURL, config.runtimeURL, bus);\\n      this.search = factory.createSearch(this.discovery, this.identityManager);\\n      this.bus = bus;\\n      this.hypertyURL = hypertyURL;\\n      bus.addListener(hypertyURL, function (msg) {\\n        console.log('[UserActivityObserver] new msg', msg);\\n      });\\n      this.callback = null;\\n    }\\n    /**\\r\\n     * This function discovers available user activity sources.\\r\\n     * <Promise> Context.Context[] discover()\\r\\n     *\\r\\n     *  A list of Context objects is returned as a Promise. Each Context object contains:\\r\\n        context.id : source id e.g. google fit api endpoint\\r\\n        context.name : name of the source eg Google FIT\\r\\n        context.description : additional information about the source (optional)\\r\\n     */\\n\\n  }, {\\n    key: \\\"discover\\\",\\n    value: function discover() {\\n      return new Promise(function (resolve, reject) {\\n        var contexts = [];\\n        var context = {\\n          id: '1',\\n          name: 'Google FIT',\\n          description: 'no more additional info'\\n        };\\n        contexts.push(context);\\n        resolve(contexts);\\n      });\\n    }\\n    /**\\r\\n    * This function connects to a certain previously discovered user activity source and starts reading it.\\r\\n    * <Promise> Context connect( string id, options ?options )\\r\\n    * - id source identity returned by the discover function ie context.id\\r\\n    * - options is of type Options where measurement frequency is defined (is it required?).\\r\\n    */\\n\\n  }, {\\n    key: \\\"connect\\\",\\n    value: function connect(id, options) {\\n      return new Promise(function (resolve, reject) {\\n        // returns as a promise the subscribed User Activity Context Data Object.\\n        resolve(true);\\n      });\\n    }\\n  }, {\\n    key: \\\"start\\\",\\n    value: function start(callback, identity) {\\n      var _this = this;\\n\\n      var domain = navigator.userAgent.indexOf('Mac') > -1 ? 'strava.com' : 'google.com';\\n      _this.callback = callback; // get GFit access token (token received by protostub)\\n\\n      _this.bus.postMessage({\\n        type: 'create',\\n        from: _this.hypertyURL,\\n        to: \\\"fitness://sharinglisboa@\\\".concat(domain),\\n        body: {\\n          value: {\\n            resources: ['user_activity_context']\\n          }\\n        }\\n      }, function (reply) {\\n        console.log('HERE ', reply);\\n\\n        if (reply.body.code === 200) {\\n          console.log('[UserActivityObserver] GFit auth granted');\\n          console.log(_this);\\n          var googleStubUrlStatus = reply.body.runtimeURL + '/status';\\n          console.log('[UserActivityObserver] listener added on ', googleStubUrlStatus);\\n\\n          _this.bus.addListener(googleStubUrlStatus, function (newMsg) {\\n            console.log('[UserActivityObserver] googleStatusChanged', newMsg);\\n\\n            if (newMsg.hasOwnProperty('body') && newMsg.body.hasOwnProperty('desc') && newMsg.body.desc.hasOwnProperty('error')) {\\n              callback(newMsg.body.desc.error);\\n            }\\n          });\\n\\n          callback(true);\\n        } else {\\n          console.log('[UserActivityObserver] GFit auth not granted');\\n          callback(false);\\n        }\\n      }); // call runtimeUAstub authorise\\n\\n      /*\\r\\n          // send user profile\\r\\n          debugger;\\r\\n          const stubURL = 'runtime://fitness.google.com/user-activity';\\r\\n          let createMessage = {\\r\\n            type: 'forward', to: stubURL, from: _this.hypertyURL,\\r\\n            identity: { userProfile: { userURL: identity.userURL } },\\r\\n            body: {\\r\\n              type: 'create',\\r\\n              from: _this.hypertyURL\\r\\n            }\\r\\n          };\\r\\n          _this.bus.postMessage(createMessage);*/\\n\\n    }\\n    /*\\r\\n      Stop GoogleProtoStub from querying sessions.\\r\\n    */\\n\\n  }, {\\n    key: \\\"stop\\\",\\n    value: function stop() {\\n      var _this = this;\\n\\n      var domain = navigator.userAgent.indexOf('Mac') > -1 ? 'strava.com' : 'google.com';\\n\\n      _this.bus.postMessage({\\n        type: 'delete',\\n        from: _this.hypertyURL,\\n        to: \\\"fitness://sharinglisboa@\\\".concat(domain),\\n        body: {\\n          value: {\\n            resources: ['user_activity_context']\\n          }\\n        }\\n      }, function (reply) {\\n        if (reply.body.code === 200) {} else {}\\n      });\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_1__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */].name;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_1__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */];\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this.hypertyURL;\\n    }\\n  }]);\\n\\n  return UserActivityObserver;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (UserActivityObserver);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///3\\n\");\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      eval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n * URI.js - Mutating URLs\\n *\\n * Version: 1.19.1\\n *\\n * Author: Rodney Rehm\\n * Web: http://medialize.github.io/URI.js/\\n *\\n * Licensed under\\n *   MIT License http://www.opensource.org/licenses/mit-license\\n *\\n */\\n(function (root, factory) {\\n  'use strict';\\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\\n  if (typeof module === 'object' && module.exports) {\\n    // Node\\n    module.exports = factory(__webpack_require__(0), __webpack_require__(1), __webpack_require__(2));\\n  } else if (true) {\\n    // AMD. Register as an anonymous module.\\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n  } else {\\n    // Browser globals (root is window)\\n    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);\\n  }\\n}(this, function (punycode, IPv6, SLD, root) {\\n  'use strict';\\n  /*global location, escape, unescape */\\n  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase\\n  /*jshint camelcase: false */\\n\\n  // save current URI variable, if any\\n  var _URI = root && root.URI;\\n\\n  function URI(url, base) {\\n    var _urlSupplied = arguments.length >= 1;\\n    var _baseSupplied = arguments.length >= 2;\\n\\n    // Allow instantiation without the 'new' keyword\\n    if (!(this instanceof URI)) {\\n      if (_urlSupplied) {\\n        if (_baseSupplied) {\\n          return new URI(url, base);\\n        }\\n\\n        return new URI(url);\\n      }\\n\\n      return new URI();\\n    }\\n\\n    if (url === undefined) {\\n      if (_urlSupplied) {\\n        throw new TypeError('undefined is not a valid argument for URI');\\n      }\\n\\n      if (typeof location !== 'undefined') {\\n        url = location.href + '';\\n      } else {\\n        url = '';\\n      }\\n    }\\n\\n    if (url === null) {\\n      if (_urlSupplied) {\\n        throw new TypeError('null is not a valid argument for URI');\\n      }\\n    }\\n\\n    this.href(url);\\n\\n    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor\\n    if (base !== undefined) {\\n      return this.absoluteTo(base);\\n    }\\n\\n    return this;\\n  }\\n\\n  function isInteger(value) {\\n    return /^[0-9]+$/.test(value);\\n  }\\n\\n  URI.version = '1.19.1';\\n\\n  var p = URI.prototype;\\n  var hasOwn = Object.prototype.hasOwnProperty;\\n\\n  function escapeRegEx(string) {\\n    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963\\n    return string.replace(/([.*+?^=!:${}()|[\\\\]\\\\/\\\\\\\\])/g, '\\\\\\\\$1');\\n  }\\n\\n  function getType(value) {\\n    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value\\n    if (value === undefined) {\\n      return 'Undefined';\\n    }\\n\\n    return String(Object.prototype.toString.call(value)).slice(8, -1);\\n  }\\n\\n  function isArray(obj) {\\n    return getType(obj) === 'Array';\\n  }\\n\\n  function filterArrayValues(data, value) {\\n    var lookup = {};\\n    var i, length;\\n\\n    if (getType(value) === 'RegExp') {\\n      lookup = null;\\n    } else if (isArray(value)) {\\n      for (i = 0, length = value.length; i < length; i++) {\\n        lookup[value[i]] = true;\\n      }\\n    } else {\\n      lookup[value] = true;\\n    }\\n\\n    for (i = 0, length = data.length; i < length; i++) {\\n      /*jshint laxbreak: true */\\n      var _match = lookup && lookup[data[i]] !== undefined\\n        || !lookup && value.test(data[i]);\\n      /*jshint laxbreak: false */\\n      if (_match) {\\n        data.splice(i, 1);\\n        length--;\\n        i--;\\n      }\\n    }\\n\\n    return data;\\n  }\\n\\n  function arrayContains(list, value) {\\n    var i, length;\\n\\n    // value may be string, number, array, regexp\\n    if (isArray(value)) {\\n      // Note: this can be optimized to O(n) (instead of current O(m * n))\\n      for (i = 0, length = value.length; i < length; i++) {\\n        if (!arrayContains(list, value[i])) {\\n          return false;\\n        }\\n      }\\n\\n      return true;\\n    }\\n\\n    var _type = getType(value);\\n    for (i = 0, length = list.length; i < length; i++) {\\n      if (_type === 'RegExp') {\\n        if (typeof list[i] === 'string' && list[i].match(value)) {\\n          return true;\\n        }\\n      } else if (list[i] === value) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function arraysEqual(one, two) {\\n    if (!isArray(one) || !isArray(two)) {\\n      return false;\\n    }\\n\\n    // arrays can't be equal if they have different amount of content\\n    if (one.length !== two.length) {\\n      return false;\\n    }\\n\\n    one.sort();\\n    two.sort();\\n\\n    for (var i = 0, l = one.length; i < l; i++) {\\n      if (one[i] !== two[i]) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  function trimSlashes(text) {\\n    var trim_expression = /^\\\\/+|\\\\/+$/g;\\n    return text.replace(trim_expression, '');\\n  }\\n\\n  URI._parts = function() {\\n    return {\\n      protocol: null,\\n      username: null,\\n      password: null,\\n      hostname: null,\\n      urn: null,\\n      port: null,\\n      path: null,\\n      query: null,\\n      fragment: null,\\n      // state\\n      preventInvalidHostname: URI.preventInvalidHostname,\\n      duplicateQueryParameters: URI.duplicateQueryParameters,\\n      escapeQuerySpace: URI.escapeQuerySpace\\n    };\\n  };\\n  // state: throw on invalid hostname\\n  // see https://github.com/medialize/URI.js/pull/345\\n  // and https://github.com/medialize/URI.js/issues/354\\n  URI.preventInvalidHostname = false;\\n  // state: allow duplicate query parameters (a=1&a=1)\\n  URI.duplicateQueryParameters = false;\\n  // state: replaces + with %20 (space in query strings)\\n  URI.escapeQuerySpace = true;\\n  // static properties\\n  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;\\n  URI.idn_expression = /[^a-z0-9\\\\._-]/i;\\n  URI.punycode_expression = /(xn--)/i;\\n  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?\\n  URI.ip4_expression = /^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$/;\\n  // credits to Rich Brown\\n  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096\\n  // specification: http://www.ietf.org/rfc/rfc4291.txt\\n  URI.ip6_expression = /^\\\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)){3}))|:)))(%.+)?\\\\s*$/;\\n  // expression used is \\\"gruber revised\\\" (@gruber v2) determined to be the\\n  // best solution in a regex-golf we did a couple of ages ago at\\n  // * http://mathiasbynens.be/demo/url-regex\\n  // * http://rodneyrehm.de/t/url-regex.html\\n  URI.find_uri_expression = /\\\\b((?:[a-z][\\\\w-]+:(?:\\\\/{1,3}|[a-z0-9%])|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}\\\\/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s`!()\\\\[\\\\]{};:'\\\".,<>?«»“”‘’]))/ig;\\n  URI.findUri = {\\n    // valid \\\"scheme://\\\" or \\\"www.\\\"\\n    start: /\\\\b(?:([a-z][a-z0-9.+-]*:\\\\/\\\\/)|www\\\\.)/gi,\\n    // everything up to the next whitespace\\n    end: /[\\\\s\\\\r\\\\n]|$/,\\n    // trim trailing punctuation captured by end RegExp\\n    trim: /[`!()\\\\[\\\\]{};:'\\\".,<>?«»“”„‘’]+$/,\\n    // balanced parens inclusion (), [], {}, <>\\n    parens: /(\\\\([^\\\\)]*\\\\)|\\\\[[^\\\\]]*\\\\]|\\\\{[^}]*\\\\}|<[^>]*>)/g,\\n  };\\n  // http://www.iana.org/assignments/uri-schemes.html\\n  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports\\n  URI.defaultPorts = {\\n    http: '80',\\n    https: '443',\\n    ftp: '21',\\n    gopher: '70',\\n    ws: '80',\\n    wss: '443'\\n  };\\n  // list of protocols which always require a hostname\\n  URI.hostProtocols = [\\n    'http',\\n    'https'\\n  ];\\n\\n  // allowed hostname characters according to RFC 3986\\n  // ALPHA DIGIT \\\"-\\\" \\\".\\\" \\\"_\\\" \\\"~\\\" \\\"!\\\" \\\"$\\\" \\\"&\\\" \\\"'\\\" \\\"(\\\" \\\")\\\" \\\"*\\\" \\\"+\\\" \\\",\\\" \\\";\\\" \\\"=\\\" %encoded\\n  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _\\n  URI.invalid_hostname_characters = /[^a-zA-Z0-9\\\\.\\\\-:_]/;\\n  // map DOM Elements to their URI attribute\\n  URI.domAttributes = {\\n    'a': 'href',\\n    'blockquote': 'cite',\\n    'link': 'href',\\n    'base': 'href',\\n    'script': 'src',\\n    'form': 'action',\\n    'img': 'src',\\n    'area': 'href',\\n    'iframe': 'src',\\n    'embed': 'src',\\n    'source': 'src',\\n    'track': 'src',\\n    'input': 'src', // but only if type=\\\"image\\\"\\n    'audio': 'src',\\n    'video': 'src'\\n  };\\n  URI.getDomAttribute = function(node) {\\n    if (!node || !node.nodeName) {\\n      return undefined;\\n    }\\n\\n    var nodeName = node.nodeName.toLowerCase();\\n    // <input> should only expose src for type=\\\"image\\\"\\n    if (nodeName === 'input' && node.type !== 'image') {\\n      return undefined;\\n    }\\n\\n    return URI.domAttributes[nodeName];\\n  };\\n\\n  function escapeForDumbFirefox36(value) {\\n    // https://github.com/medialize/URI.js/issues/91\\n    return escape(value);\\n  }\\n\\n  // encoding / decoding according to RFC3986\\n  function strictEncodeURIComponent(string) {\\n    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent\\n    return encodeURIComponent(string)\\n      .replace(/[!'()*]/g, escapeForDumbFirefox36)\\n      .replace(/\\\\*/g, '%2A');\\n  }\\n  URI.encode = strictEncodeURIComponent;\\n  URI.decode = decodeURIComponent;\\n  URI.iso8859 = function() {\\n    URI.encode = escape;\\n    URI.decode = unescape;\\n  };\\n  URI.unicode = function() {\\n    URI.encode = strictEncodeURIComponent;\\n    URI.decode = decodeURIComponent;\\n  };\\n  URI.characters = {\\n    pathname: {\\n      encode: {\\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\\n        // use uppercase hexadecimal digits for all percent-encodings.\\n        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,\\n        map: {\\n          // -._~!'()*\\n          '%24': '$',\\n          '%26': '&',\\n          '%2B': '+',\\n          '%2C': ',',\\n          '%3B': ';',\\n          '%3D': '=',\\n          '%3A': ':',\\n          '%40': '@'\\n        }\\n      },\\n      decode: {\\n        expression: /[\\\\/\\\\?#]/g,\\n        map: {\\n          '/': '%2F',\\n          '?': '%3F',\\n          '#': '%23'\\n        }\\n      }\\n    },\\n    reserved: {\\n      encode: {\\n        // RFC3986 2.1: For consistency, URI producers and normalizers should\\n        // use uppercase hexadecimal digits for all percent-encodings.\\n        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,\\n        map: {\\n          // gen-delims\\n          '%3A': ':',\\n          '%2F': '/',\\n          '%3F': '?',\\n          '%23': '#',\\n          '%5B': '[',\\n          '%5D': ']',\\n          '%40': '@',\\n          // sub-delims\\n          '%21': '!',\\n          '%24': '$',\\n          '%26': '&',\\n          '%27': '\\\\'',\\n          '%28': '(',\\n          '%29': ')',\\n          '%2A': '*',\\n          '%2B': '+',\\n          '%2C': ',',\\n          '%3B': ';',\\n          '%3D': '='\\n        }\\n      }\\n    },\\n    urnpath: {\\n      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable\\n      // for usage in a URN. RFC2141 also calls out \\\"-\\\", \\\".\\\", and \\\"_\\\" as acceptable characters, but\\n      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also\\n      // note that the colon character is not featured in the encoding map; this is because URI.js\\n      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it\\n      // should not appear unencoded in a segment itself.\\n      // See also the note above about RFC3986 and capitalalized hex digits.\\n      encode: {\\n        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,\\n        map: {\\n          '%21': '!',\\n          '%24': '$',\\n          '%27': '\\\\'',\\n          '%28': '(',\\n          '%29': ')',\\n          '%2A': '*',\\n          '%2B': '+',\\n          '%2C': ',',\\n          '%3B': ';',\\n          '%3D': '=',\\n          '%40': '@'\\n        }\\n      },\\n      // These characters are the characters called out by RFC2141 as \\\"reserved\\\" characters that\\n      // should never appear in a URN, plus the colon character (see note above).\\n      decode: {\\n        expression: /[\\\\/\\\\?#:]/g,\\n        map: {\\n          '/': '%2F',\\n          '?': '%3F',\\n          '#': '%23',\\n          ':': '%3A'\\n        }\\n      }\\n    }\\n  };\\n  URI.encodeQuery = function(string, escapeQuerySpace) {\\n    var escaped = URI.encode(string + '');\\n    if (escapeQuerySpace === undefined) {\\n      escapeQuerySpace = URI.escapeQuerySpace;\\n    }\\n\\n    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;\\n  };\\n  URI.decodeQuery = function(string, escapeQuerySpace) {\\n    string += '';\\n    if (escapeQuerySpace === undefined) {\\n      escapeQuerySpace = URI.escapeQuerySpace;\\n    }\\n\\n    try {\\n      return URI.decode(escapeQuerySpace ? string.replace(/\\\\+/g, '%20') : string);\\n    } catch(e) {\\n      // we're not going to mess with weird encodings,\\n      // give up and return the undecoded original string\\n      // see https://github.com/medialize/URI.js/issues/87\\n      // see https://github.com/medialize/URI.js/issues/92\\n      return string;\\n    }\\n  };\\n  // generate encode/decode path functions\\n  var _parts = {'encode':'encode', 'decode':'decode'};\\n  var _part;\\n  var generateAccessor = function(_group, _part) {\\n    return function(string) {\\n      try {\\n        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {\\n          return URI.characters[_group][_part].map[c];\\n        });\\n      } catch (e) {\\n        // we're not going to mess with weird encodings,\\n        // give up and return the undecoded original string\\n        // see https://github.com/medialize/URI.js/issues/87\\n        // see https://github.com/medialize/URI.js/issues/92\\n        return string;\\n      }\\n    };\\n  };\\n\\n  for (_part in _parts) {\\n    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);\\n    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);\\n  }\\n\\n  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {\\n    return function(string) {\\n      // Why pass in names of functions, rather than the function objects themselves? The\\n      // definitions of some functions (but in particular, URI.decode) will occasionally change due\\n      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure\\n      // that the functions we use here are \\\"fresh\\\".\\n      var actualCodingFunc;\\n      if (!_innerCodingFuncName) {\\n        actualCodingFunc = URI[_codingFuncName];\\n      } else {\\n        actualCodingFunc = function(string) {\\n          return URI[_codingFuncName](URI[_innerCodingFuncName](string));\\n        };\\n      }\\n\\n      var segments = (string + '').split(_sep);\\n\\n      for (var i = 0, length = segments.length; i < length; i++) {\\n        segments[i] = actualCodingFunc(segments[i]);\\n      }\\n\\n      return segments.join(_sep);\\n    };\\n  };\\n\\n  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.\\n  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');\\n  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');\\n  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');\\n  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');\\n\\n  URI.encodeReserved = generateAccessor('reserved', 'encode');\\n\\n  URI.parse = function(string, parts) {\\n    var pos;\\n    if (!parts) {\\n      parts = {\\n        preventInvalidHostname: URI.preventInvalidHostname\\n      };\\n    }\\n    // [protocol\\\"://\\\"[username[\\\":\\\"password]\\\"@\\\"]hostname[\\\":\\\"port]\\\"/\\\"?][path][\\\"?\\\"querystring][\\\"#\\\"fragment]\\n\\n    // extract fragment\\n    pos = string.indexOf('#');\\n    if (pos > -1) {\\n      // escaping?\\n      parts.fragment = string.substring(pos + 1) || null;\\n      string = string.substring(0, pos);\\n    }\\n\\n    // extract query\\n    pos = string.indexOf('?');\\n    if (pos > -1) {\\n      // escaping?\\n      parts.query = string.substring(pos + 1) || null;\\n      string = string.substring(0, pos);\\n    }\\n\\n    // extract protocol\\n    if (string.substring(0, 2) === '//') {\\n      // relative-scheme\\n      parts.protocol = null;\\n      string = string.substring(2);\\n      // extract \\\"user:pass@host:port\\\"\\n      string = URI.parseAuthority(string, parts);\\n    } else {\\n      pos = string.indexOf(':');\\n      if (pos > -1) {\\n        parts.protocol = string.substring(0, pos) || null;\\n        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {\\n          // : may be within the path\\n          parts.protocol = undefined;\\n        } else if (string.substring(pos + 1, pos + 3) === '//') {\\n          string = string.substring(pos + 3);\\n\\n          // extract \\\"user:pass@host:port\\\"\\n          string = URI.parseAuthority(string, parts);\\n        } else {\\n          string = string.substring(pos + 1);\\n          parts.urn = true;\\n        }\\n      }\\n    }\\n\\n    // what's left must be the path\\n    parts.path = string;\\n\\n    // and we're done\\n    return parts;\\n  };\\n  URI.parseHost = function(string, parts) {\\n    if (!string) {\\n      string = '';\\n    }\\n\\n    // Copy chrome, IE, opera backslash-handling behavior.\\n    // Back slashes before the query string get converted to forward slashes\\n    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124\\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\\n    // https://github.com/medialize/URI.js/pull/233\\n    string = string.replace(/\\\\\\\\/g, '/');\\n\\n    // extract host:port\\n    var pos = string.indexOf('/');\\n    var bracketPos;\\n    var t;\\n\\n    if (pos === -1) {\\n      pos = string.length;\\n    }\\n\\n    if (string.charAt(0) === '[') {\\n      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6\\n      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts\\n      // IPv6+port in the format [2001:db8::1]:80 (for the time being)\\n      bracketPos = string.indexOf(']');\\n      parts.hostname = string.substring(1, bracketPos) || null;\\n      parts.port = string.substring(bracketPos + 2, pos) || null;\\n      if (parts.port === '/') {\\n        parts.port = null;\\n      }\\n    } else {\\n      var firstColon = string.indexOf(':');\\n      var firstSlash = string.indexOf('/');\\n      var nextColon = string.indexOf(':', firstColon + 1);\\n      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {\\n        // IPv6 host contains multiple colons - but no port\\n        // this notation is actually not allowed by RFC 3986, but we're a liberal parser\\n        parts.hostname = string.substring(0, pos) || null;\\n        parts.port = null;\\n      } else {\\n        t = string.substring(0, pos).split(':');\\n        parts.hostname = t[0] || null;\\n        parts.port = t[1] || null;\\n      }\\n    }\\n\\n    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {\\n      pos++;\\n      string = '/' + string;\\n    }\\n\\n    if (parts.preventInvalidHostname) {\\n      URI.ensureValidHostname(parts.hostname, parts.protocol);\\n    }\\n\\n    if (parts.port) {\\n      URI.ensureValidPort(parts.port);\\n    }\\n\\n    return string.substring(pos) || '/';\\n  };\\n  URI.parseAuthority = function(string, parts) {\\n    string = URI.parseUserinfo(string, parts);\\n    return URI.parseHost(string, parts);\\n  };\\n  URI.parseUserinfo = function(string, parts) {\\n    // extract username:password\\n    var firstSlash = string.indexOf('/');\\n    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);\\n    var t;\\n\\n    // authority@ must come before /path\\n    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {\\n      t = string.substring(0, pos).split(':');\\n      parts.username = t[0] ? URI.decode(t[0]) : null;\\n      t.shift();\\n      parts.password = t[0] ? URI.decode(t.join(':')) : null;\\n      string = string.substring(pos + 1);\\n    } else {\\n      parts.username = null;\\n      parts.password = null;\\n    }\\n\\n    return string;\\n  };\\n  URI.parseQuery = function(string, escapeQuerySpace) {\\n    if (!string) {\\n      return {};\\n    }\\n\\n    // throw out the funky business - \\\"?\\\"[name\\\"=\\\"value\\\"&\\\"]+\\n    string = string.replace(/&+/g, '&').replace(/^\\\\?*&*|&+$/g, '');\\n\\n    if (!string) {\\n      return {};\\n    }\\n\\n    var items = {};\\n    var splits = string.split('&');\\n    var length = splits.length;\\n    var v, name, value;\\n\\n    for (var i = 0; i < length; i++) {\\n      v = splits[i].split('=');\\n      name = URI.decodeQuery(v.shift(), escapeQuerySpace);\\n      // no \\\"=\\\" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters\\n      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;\\n\\n      if (hasOwn.call(items, name)) {\\n        if (typeof items[name] === 'string' || items[name] === null) {\\n          items[name] = [items[name]];\\n        }\\n\\n        items[name].push(value);\\n      } else {\\n        items[name] = value;\\n      }\\n    }\\n\\n    return items;\\n  };\\n\\n  URI.build = function(parts) {\\n    var t = '';\\n\\n    if (parts.protocol) {\\n      t += parts.protocol + ':';\\n    }\\n\\n    if (!parts.urn && (t || parts.hostname)) {\\n      t += '//';\\n    }\\n\\n    t += (URI.buildAuthority(parts) || '');\\n\\n    if (typeof parts.path === 'string') {\\n      if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {\\n        t += '/';\\n      }\\n\\n      t += parts.path;\\n    }\\n\\n    if (typeof parts.query === 'string' && parts.query) {\\n      t += '?' + parts.query;\\n    }\\n\\n    if (typeof parts.fragment === 'string' && parts.fragment) {\\n      t += '#' + parts.fragment;\\n    }\\n    return t;\\n  };\\n  URI.buildHost = function(parts) {\\n    var t = '';\\n\\n    if (!parts.hostname) {\\n      return '';\\n    } else if (URI.ip6_expression.test(parts.hostname)) {\\n      t += '[' + parts.hostname + ']';\\n    } else {\\n      t += parts.hostname;\\n    }\\n\\n    if (parts.port) {\\n      t += ':' + parts.port;\\n    }\\n\\n    return t;\\n  };\\n  URI.buildAuthority = function(parts) {\\n    return URI.buildUserinfo(parts) + URI.buildHost(parts);\\n  };\\n  URI.buildUserinfo = function(parts) {\\n    var t = '';\\n\\n    if (parts.username) {\\n      t += URI.encode(parts.username);\\n    }\\n\\n    if (parts.password) {\\n      t += ':' + URI.encode(parts.password);\\n    }\\n\\n    if (t) {\\n      t += '@';\\n    }\\n\\n    return t;\\n  };\\n  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {\\n    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html\\n    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed\\n    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!\\n    // URI.js treats the query string as being application/x-www-form-urlencoded\\n    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type\\n\\n    var t = '';\\n    var unique, key, i, length;\\n    for (key in data) {\\n      if (hasOwn.call(data, key) && key) {\\n        if (isArray(data[key])) {\\n          unique = {};\\n          for (i = 0, length = data[key].length; i < length; i++) {\\n            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {\\n              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);\\n              if (duplicateQueryParameters !== true) {\\n                unique[data[key][i] + ''] = true;\\n              }\\n            }\\n          }\\n        } else if (data[key] !== undefined) {\\n          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);\\n        }\\n      }\\n    }\\n\\n    return t.substring(1);\\n  };\\n  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {\\n    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded\\n    // don't append \\\"=\\\" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization\\n    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');\\n  };\\n\\n  URI.addQuery = function(data, name, value) {\\n    if (typeof name === 'object') {\\n      for (var key in name) {\\n        if (hasOwn.call(name, key)) {\\n          URI.addQuery(data, key, name[key]);\\n        }\\n      }\\n    } else if (typeof name === 'string') {\\n      if (data[name] === undefined) {\\n        data[name] = value;\\n        return;\\n      } else if (typeof data[name] === 'string') {\\n        data[name] = [data[name]];\\n      }\\n\\n      if (!isArray(value)) {\\n        value = [value];\\n      }\\n\\n      data[name] = (data[name] || []).concat(value);\\n    } else {\\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\\n    }\\n  };\\n\\n  URI.setQuery = function(data, name, value) {\\n    if (typeof name === 'object') {\\n      for (var key in name) {\\n        if (hasOwn.call(name, key)) {\\n          URI.setQuery(data, key, name[key]);\\n        }\\n      }\\n    } else if (typeof name === 'string') {\\n      data[name] = value === undefined ? null : value;\\n    } else {\\n      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');\\n    }\\n  };\\n\\n  URI.removeQuery = function(data, name, value) {\\n    var i, length, key;\\n\\n    if (isArray(name)) {\\n      for (i = 0, length = name.length; i < length; i++) {\\n        data[name[i]] = undefined;\\n      }\\n    } else if (getType(name) === 'RegExp') {\\n      for (key in data) {\\n        if (name.test(key)) {\\n          data[key] = undefined;\\n        }\\n      }\\n    } else if (typeof name === 'object') {\\n      for (key in name) {\\n        if (hasOwn.call(name, key)) {\\n          URI.removeQuery(data, key, name[key]);\\n        }\\n      }\\n    } else if (typeof name === 'string') {\\n      if (value !== undefined) {\\n        if (getType(value) === 'RegExp') {\\n          if (!isArray(data[name]) && value.test(data[name])) {\\n            data[name] = undefined;\\n          } else {\\n            data[name] = filterArrayValues(data[name], value);\\n          }\\n        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {\\n          data[name] = undefined;\\n        } else if (isArray(data[name])) {\\n          data[name] = filterArrayValues(data[name], value);\\n        }\\n      } else {\\n        data[name] = undefined;\\n      }\\n    } else {\\n      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');\\n    }\\n  };\\n  URI.hasQuery = function(data, name, value, withinArray) {\\n    switch (getType(name)) {\\n      case 'String':\\n        // Nothing to do here\\n        break;\\n\\n      case 'RegExp':\\n        for (var key in data) {\\n          if (hasOwn.call(data, key)) {\\n            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {\\n              return true;\\n            }\\n          }\\n        }\\n\\n        return false;\\n\\n      case 'Object':\\n        for (var _key in name) {\\n          if (hasOwn.call(name, _key)) {\\n            if (!URI.hasQuery(data, _key, name[_key])) {\\n              return false;\\n            }\\n          }\\n        }\\n\\n        return true;\\n\\n      default:\\n        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');\\n    }\\n\\n    switch (getType(value)) {\\n      case 'Undefined':\\n        // true if exists (but may be empty)\\n        return name in data; // data[name] !== undefined;\\n\\n      case 'Boolean':\\n        // true if exists and non-empty\\n        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);\\n        return value === _booly;\\n\\n      case 'Function':\\n        // allow complex comparison\\n        return !!value(data[name], name, data);\\n\\n      case 'Array':\\n        if (!isArray(data[name])) {\\n          return false;\\n        }\\n\\n        var op = withinArray ? arrayContains : arraysEqual;\\n        return op(data[name], value);\\n\\n      case 'RegExp':\\n        if (!isArray(data[name])) {\\n          return Boolean(data[name] && data[name].match(value));\\n        }\\n\\n        if (!withinArray) {\\n          return false;\\n        }\\n\\n        return arrayContains(data[name], value);\\n\\n      case 'Number':\\n        value = String(value);\\n        /* falls through */\\n      case 'String':\\n        if (!isArray(data[name])) {\\n          return data[name] === value;\\n        }\\n\\n        if (!withinArray) {\\n          return false;\\n        }\\n\\n        return arrayContains(data[name], value);\\n\\n      default:\\n        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');\\n    }\\n  };\\n\\n\\n  URI.joinPaths = function() {\\n    var input = [];\\n    var segments = [];\\n    var nonEmptySegments = 0;\\n\\n    for (var i = 0; i < arguments.length; i++) {\\n      var url = new URI(arguments[i]);\\n      input.push(url);\\n      var _segments = url.segment();\\n      for (var s = 0; s < _segments.length; s++) {\\n        if (typeof _segments[s] === 'string') {\\n          segments.push(_segments[s]);\\n        }\\n\\n        if (_segments[s]) {\\n          nonEmptySegments++;\\n        }\\n      }\\n    }\\n\\n    if (!segments.length || !nonEmptySegments) {\\n      return new URI('');\\n    }\\n\\n    var uri = new URI('').segment(segments);\\n\\n    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {\\n      uri.path('/' + uri.path());\\n    }\\n\\n    return uri.normalize();\\n  };\\n\\n  URI.commonPath = function(one, two) {\\n    var length = Math.min(one.length, two.length);\\n    var pos;\\n\\n    // find first non-matching character\\n    for (pos = 0; pos < length; pos++) {\\n      if (one.charAt(pos) !== two.charAt(pos)) {\\n        pos--;\\n        break;\\n      }\\n    }\\n\\n    if (pos < 1) {\\n      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';\\n    }\\n\\n    // revert to last /\\n    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {\\n      pos = one.substring(0, pos).lastIndexOf('/');\\n    }\\n\\n    return one.substring(0, pos + 1);\\n  };\\n\\n  URI.withinString = function(string, callback, options) {\\n    options || (options = {});\\n    var _start = options.start || URI.findUri.start;\\n    var _end = options.end || URI.findUri.end;\\n    var _trim = options.trim || URI.findUri.trim;\\n    var _parens = options.parens || URI.findUri.parens;\\n    var _attributeOpen = /[a-z0-9-]=[\\\"']?$/i;\\n\\n    _start.lastIndex = 0;\\n    while (true) {\\n      var match = _start.exec(string);\\n      if (!match) {\\n        break;\\n      }\\n\\n      var start = match.index;\\n      if (options.ignoreHtml) {\\n        // attribut(e=[\\\"']?$)\\n        var attributeOpen = string.slice(Math.max(start - 3, 0), start);\\n        if (attributeOpen && _attributeOpen.test(attributeOpen)) {\\n          continue;\\n        }\\n      }\\n\\n      var end = start + string.slice(start).search(_end);\\n      var slice = string.slice(start, end);\\n      // make sure we include well balanced parens\\n      var parensEnd = -1;\\n      while (true) {\\n        var parensMatch = _parens.exec(slice);\\n        if (!parensMatch) {\\n          break;\\n        }\\n\\n        var parensMatchEnd = parensMatch.index + parensMatch[0].length;\\n        parensEnd = Math.max(parensEnd, parensMatchEnd);\\n      }\\n\\n      if (parensEnd > -1) {\\n        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');\\n      } else {\\n        slice = slice.replace(_trim, '');\\n      }\\n\\n      if (slice.length <= match[0].length) {\\n        // the extract only contains the starting marker of a URI,\\n        // e.g. \\\"www\\\" or \\\"http://\\\"\\n        continue;\\n      }\\n\\n      if (options.ignore && options.ignore.test(slice)) {\\n        continue;\\n      }\\n\\n      end = start + slice.length;\\n      var result = callback(slice, start, end, string);\\n      if (result === undefined) {\\n        _start.lastIndex = end;\\n        continue;\\n      }\\n\\n      result = String(result);\\n      string = string.slice(0, start) + result + string.slice(end);\\n      _start.lastIndex = start + result.length;\\n    }\\n\\n    _start.lastIndex = 0;\\n    return string;\\n  };\\n\\n  URI.ensureValidHostname = function(v, protocol) {\\n    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)\\n    // they are not part of DNS and therefore ignored by URI.js\\n\\n    var hasHostname = !!v; // not null and not an empty string\\n    var hasProtocol = !!protocol;\\n    var rejectEmptyHostname = false;\\n\\n    if (hasProtocol) {\\n      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);\\n    }\\n\\n    if (rejectEmptyHostname && !hasHostname) {\\n      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);\\n    } else if (v && v.match(URI.invalid_hostname_characters)) {\\n      // test punycode\\n      if (!punycode) {\\n        throw new TypeError('Hostname \\\"' + v + '\\\" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');\\n      }\\n      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {\\n        throw new TypeError('Hostname \\\"' + v + '\\\" contains characters other than [A-Z0-9.-:_]');\\n      }\\n    }\\n  };\\n\\n  URI.ensureValidPort = function (v) {\\n    if (!v) {\\n      return;\\n    }\\n\\n    var port = Number(v);\\n    if (isInteger(port) && (port > 0) && (port < 65536)) {\\n      return;\\n    }\\n\\n    throw new TypeError('Port \\\"' + v + '\\\" is not a valid port');\\n  };\\n\\n  // noConflict\\n  URI.noConflict = function(removeAll) {\\n    if (removeAll) {\\n      var unconflicted = {\\n        URI: this.noConflict()\\n      };\\n\\n      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {\\n        unconflicted.URITemplate = root.URITemplate.noConflict();\\n      }\\n\\n      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {\\n        unconflicted.IPv6 = root.IPv6.noConflict();\\n      }\\n\\n      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {\\n        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();\\n      }\\n\\n      return unconflicted;\\n    } else if (root.URI === this) {\\n      root.URI = _URI;\\n    }\\n\\n    return this;\\n  };\\n\\n  p.build = function(deferBuild) {\\n    if (deferBuild === true) {\\n      this._deferred_build = true;\\n    } else if (deferBuild === undefined || this._deferred_build) {\\n      this._string = URI.build(this._parts);\\n      this._deferred_build = false;\\n    }\\n\\n    return this;\\n  };\\n\\n  p.clone = function() {\\n    return new URI(this);\\n  };\\n\\n  p.valueOf = p.toString = function() {\\n    return this.build(false)._string;\\n  };\\n\\n\\n  function generateSimpleAccessor(_part){\\n    return function(v, build) {\\n      if (v === undefined) {\\n        return this._parts[_part] || '';\\n      } else {\\n        this._parts[_part] = v || null;\\n        this.build(!build);\\n        return this;\\n      }\\n    };\\n  }\\n\\n  function generatePrefixAccessor(_part, _key){\\n    return function(v, build) {\\n      if (v === undefined) {\\n        return this._parts[_part] || '';\\n      } else {\\n        if (v !== null) {\\n          v = v + '';\\n          if (v.charAt(0) === _key) {\\n            v = v.substring(1);\\n          }\\n        }\\n\\n        this._parts[_part] = v;\\n        this.build(!build);\\n        return this;\\n      }\\n    };\\n  }\\n\\n  p.protocol = generateSimpleAccessor('protocol');\\n  p.username = generateSimpleAccessor('username');\\n  p.password = generateSimpleAccessor('password');\\n  p.hostname = generateSimpleAccessor('hostname');\\n  p.port = generateSimpleAccessor('port');\\n  p.query = generatePrefixAccessor('query', '?');\\n  p.fragment = generatePrefixAccessor('fragment', '#');\\n\\n  p.search = function(v, build) {\\n    var t = this.query(v, build);\\n    return typeof t === 'string' && t.length ? ('?' + t) : t;\\n  };\\n  p.hash = function(v, build) {\\n    var t = this.fragment(v, build);\\n    return typeof t === 'string' && t.length ? ('#' + t) : t;\\n  };\\n\\n  p.pathname = function(v, build) {\\n    if (v === undefined || v === true) {\\n      var res = this._parts.path || (this._parts.hostname ? '/' : '');\\n      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;\\n    } else {\\n      if (this._parts.urn) {\\n        this._parts.path = v ? URI.recodeUrnPath(v) : '';\\n      } else {\\n        this._parts.path = v ? URI.recodePath(v) : '/';\\n      }\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.path = p.pathname;\\n  p.href = function(href, build) {\\n    var key;\\n\\n    if (href === undefined) {\\n      return this.toString();\\n    }\\n\\n    this._string = '';\\n    this._parts = URI._parts();\\n\\n    var _URI = href instanceof URI;\\n    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);\\n    if (href.nodeName) {\\n      var attribute = URI.getDomAttribute(href);\\n      href = href[attribute] || '';\\n      _object = false;\\n    }\\n\\n    // window.location is reported to be an object, but it's not the sort\\n    // of object we're looking for:\\n    // * location.protocol ends with a colon\\n    // * location.query != object.search\\n    // * location.hash != object.fragment\\n    // simply serializing the unknown object should do the trick\\n    // (for location, not for everything...)\\n    if (!_URI && _object && href.pathname !== undefined) {\\n      href = href.toString();\\n    }\\n\\n    if (typeof href === 'string' || href instanceof String) {\\n      this._parts = URI.parse(String(href), this._parts);\\n    } else if (_URI || _object) {\\n      var src = _URI ? href._parts : href;\\n      for (key in src) {\\n        if (key === 'query') { continue; }\\n        if (hasOwn.call(this._parts, key)) {\\n          this._parts[key] = src[key];\\n        }\\n      }\\n      if (src.query) {\\n        this.query(src.query, false);\\n      }\\n    } else {\\n      throw new TypeError('invalid input');\\n    }\\n\\n    this.build(!build);\\n    return this;\\n  };\\n\\n  // identification accessors\\n  p.is = function(what) {\\n    var ip = false;\\n    var ip4 = false;\\n    var ip6 = false;\\n    var name = false;\\n    var sld = false;\\n    var idn = false;\\n    var punycode = false;\\n    var relative = !this._parts.urn;\\n\\n    if (this._parts.hostname) {\\n      relative = false;\\n      ip4 = URI.ip4_expression.test(this._parts.hostname);\\n      ip6 = URI.ip6_expression.test(this._parts.hostname);\\n      ip = ip4 || ip6;\\n      name = !ip;\\n      sld = name && SLD && SLD.has(this._parts.hostname);\\n      idn = name && URI.idn_expression.test(this._parts.hostname);\\n      punycode = name && URI.punycode_expression.test(this._parts.hostname);\\n    }\\n\\n    switch (what.toLowerCase()) {\\n      case 'relative':\\n        return relative;\\n\\n      case 'absolute':\\n        return !relative;\\n\\n      // hostname identification\\n      case 'domain':\\n      case 'name':\\n        return name;\\n\\n      case 'sld':\\n        return sld;\\n\\n      case 'ip':\\n        return ip;\\n\\n      case 'ip4':\\n      case 'ipv4':\\n      case 'inet4':\\n        return ip4;\\n\\n      case 'ip6':\\n      case 'ipv6':\\n      case 'inet6':\\n        return ip6;\\n\\n      case 'idn':\\n        return idn;\\n\\n      case 'url':\\n        return !this._parts.urn;\\n\\n      case 'urn':\\n        return !!this._parts.urn;\\n\\n      case 'punycode':\\n        return punycode;\\n    }\\n\\n    return null;\\n  };\\n\\n  // component specific input validation\\n  var _protocol = p.protocol;\\n  var _port = p.port;\\n  var _hostname = p.hostname;\\n\\n  p.protocol = function(v, build) {\\n    if (v) {\\n      // accept trailing ://\\n      v = v.replace(/:(\\\\/\\\\/)?$/, '');\\n\\n      if (!v.match(URI.protocol_expression)) {\\n        throw new TypeError('Protocol \\\"' + v + '\\\" contains characters other than [A-Z0-9.+-] or doesn\\\\'t start with [A-Z]');\\n      }\\n    }\\n\\n    return _protocol.call(this, v, build);\\n  };\\n  p.scheme = p.protocol;\\n  p.port = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v !== undefined) {\\n      if (v === 0) {\\n        v = null;\\n      }\\n\\n      if (v) {\\n        v += '';\\n        if (v.charAt(0) === ':') {\\n          v = v.substring(1);\\n        }\\n\\n        URI.ensureValidPort(v);\\n      }\\n    }\\n    return _port.call(this, v, build);\\n  };\\n  p.hostname = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v !== undefined) {\\n      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };\\n      var res = URI.parseHost(v, x);\\n      if (res !== '/') {\\n        throw new TypeError('Hostname \\\"' + v + '\\\" contains characters other than [A-Z0-9.-]');\\n      }\\n\\n      v = x.hostname;\\n      if (this._parts.preventInvalidHostname) {\\n        URI.ensureValidHostname(v, this._parts.protocol);\\n      }\\n    }\\n\\n    return _hostname.call(this, v, build);\\n  };\\n\\n  // compound accessors\\n  p.origin = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v === undefined) {\\n      var protocol = this.protocol();\\n      var authority = this.authority();\\n      if (!authority) {\\n        return '';\\n      }\\n\\n      return (protocol ? protocol + '://' : '') + this.authority();\\n    } else {\\n      var origin = URI(v);\\n      this\\n        .protocol(origin.protocol())\\n        .authority(origin.authority())\\n        .build(!build);\\n      return this;\\n    }\\n  };\\n  p.host = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v === undefined) {\\n      return this._parts.hostname ? URI.buildHost(this._parts) : '';\\n    } else {\\n      var res = URI.parseHost(v, this._parts);\\n      if (res !== '/') {\\n        throw new TypeError('Hostname \\\"' + v + '\\\" contains characters other than [A-Z0-9.-]');\\n      }\\n\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.authority = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v === undefined) {\\n      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';\\n    } else {\\n      var res = URI.parseAuthority(v, this._parts);\\n      if (res !== '/') {\\n        throw new TypeError('Hostname \\\"' + v + '\\\" contains characters other than [A-Z0-9.-]');\\n      }\\n\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.userinfo = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v === undefined) {\\n      var t = URI.buildUserinfo(this._parts);\\n      return t ? t.substring(0, t.length -1) : t;\\n    } else {\\n      if (v[v.length-1] !== '@') {\\n        v += '@';\\n      }\\n\\n      URI.parseUserinfo(v, this._parts);\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.resource = function(v, build) {\\n    var parts;\\n\\n    if (v === undefined) {\\n      return this.path() + this.search() + this.hash();\\n    }\\n\\n    parts = URI.parse(v);\\n    this._parts.path = parts.path;\\n    this._parts.query = parts.query;\\n    this._parts.fragment = parts.fragment;\\n    this.build(!build);\\n    return this;\\n  };\\n\\n  // fraction accessors\\n  p.subdomain = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    // convenience, return \\\"www\\\" from \\\"www.example.org\\\"\\n    if (v === undefined) {\\n      if (!this._parts.hostname || this.is('IP')) {\\n        return '';\\n      }\\n\\n      // grab domain and add another segment\\n      var end = this._parts.hostname.length - this.domain().length - 1;\\n      return this._parts.hostname.substring(0, end) || '';\\n    } else {\\n      var e = this._parts.hostname.length - this.domain().length;\\n      var sub = this._parts.hostname.substring(0, e);\\n      var replace = new RegExp('^' + escapeRegEx(sub));\\n\\n      if (v && v.charAt(v.length - 1) !== '.') {\\n        v += '.';\\n      }\\n\\n      if (v.indexOf(':') !== -1) {\\n        throw new TypeError('Domains cannot contain colons');\\n      }\\n\\n      if (v) {\\n        URI.ensureValidHostname(v, this._parts.protocol);\\n      }\\n\\n      this._parts.hostname = this._parts.hostname.replace(replace, v);\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.domain = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (typeof v === 'boolean') {\\n      build = v;\\n      v = undefined;\\n    }\\n\\n    // convenience, return \\\"example.org\\\" from \\\"www.example.org\\\"\\n    if (v === undefined) {\\n      if (!this._parts.hostname || this.is('IP')) {\\n        return '';\\n      }\\n\\n      // if hostname consists of 1 or 2 segments, it must be the domain\\n      var t = this._parts.hostname.match(/\\\\./g);\\n      if (t && t.length < 2) {\\n        return this._parts.hostname;\\n      }\\n\\n      // grab tld and add another segment\\n      var end = this._parts.hostname.length - this.tld(build).length - 1;\\n      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;\\n      return this._parts.hostname.substring(end) || '';\\n    } else {\\n      if (!v) {\\n        throw new TypeError('cannot set domain empty');\\n      }\\n\\n      if (v.indexOf(':') !== -1) {\\n        throw new TypeError('Domains cannot contain colons');\\n      }\\n\\n      URI.ensureValidHostname(v, this._parts.protocol);\\n\\n      if (!this._parts.hostname || this.is('IP')) {\\n        this._parts.hostname = v;\\n      } else {\\n        var replace = new RegExp(escapeRegEx(this.domain()) + '$');\\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\\n      }\\n\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.tld = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (typeof v === 'boolean') {\\n      build = v;\\n      v = undefined;\\n    }\\n\\n    // return \\\"org\\\" from \\\"www.example.org\\\"\\n    if (v === undefined) {\\n      if (!this._parts.hostname || this.is('IP')) {\\n        return '';\\n      }\\n\\n      var pos = this._parts.hostname.lastIndexOf('.');\\n      var tld = this._parts.hostname.substring(pos + 1);\\n\\n      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {\\n        return SLD.get(this._parts.hostname) || tld;\\n      }\\n\\n      return tld;\\n    } else {\\n      var replace;\\n\\n      if (!v) {\\n        throw new TypeError('cannot set TLD empty');\\n      } else if (v.match(/[^a-zA-Z0-9-]/)) {\\n        if (SLD && SLD.is(v)) {\\n          replace = new RegExp(escapeRegEx(this.tld()) + '$');\\n          this._parts.hostname = this._parts.hostname.replace(replace, v);\\n        } else {\\n          throw new TypeError('TLD \\\"' + v + '\\\" contains characters other than [A-Z0-9]');\\n        }\\n      } else if (!this._parts.hostname || this.is('IP')) {\\n        throw new ReferenceError('cannot set TLD on non-domain host');\\n      } else {\\n        replace = new RegExp(escapeRegEx(this.tld()) + '$');\\n        this._parts.hostname = this._parts.hostname.replace(replace, v);\\n      }\\n\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.directory = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v === undefined || v === true) {\\n      if (!this._parts.path && !this._parts.hostname) {\\n        return '';\\n      }\\n\\n      if (this._parts.path === '/') {\\n        return '/';\\n      }\\n\\n      var end = this._parts.path.length - this.filename().length - 1;\\n      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');\\n\\n      return v ? URI.decodePath(res) : res;\\n\\n    } else {\\n      var e = this._parts.path.length - this.filename().length;\\n      var directory = this._parts.path.substring(0, e);\\n      var replace = new RegExp('^' + escapeRegEx(directory));\\n\\n      // fully qualifier directories begin with a slash\\n      if (!this.is('relative')) {\\n        if (!v) {\\n          v = '/';\\n        }\\n\\n        if (v.charAt(0) !== '/') {\\n          v = '/' + v;\\n        }\\n      }\\n\\n      // directories always end with a slash\\n      if (v && v.charAt(v.length - 1) !== '/') {\\n        v += '/';\\n      }\\n\\n      v = URI.recodePath(v);\\n      this._parts.path = this._parts.path.replace(replace, v);\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.filename = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (typeof v !== 'string') {\\n      if (!this._parts.path || this._parts.path === '/') {\\n        return '';\\n      }\\n\\n      var pos = this._parts.path.lastIndexOf('/');\\n      var res = this._parts.path.substring(pos+1);\\n\\n      return v ? URI.decodePathSegment(res) : res;\\n    } else {\\n      var mutatedDirectory = false;\\n\\n      if (v.charAt(0) === '/') {\\n        v = v.substring(1);\\n      }\\n\\n      if (v.match(/\\\\.?\\\\//)) {\\n        mutatedDirectory = true;\\n      }\\n\\n      var replace = new RegExp(escapeRegEx(this.filename()) + '$');\\n      v = URI.recodePath(v);\\n      this._parts.path = this._parts.path.replace(replace, v);\\n\\n      if (mutatedDirectory) {\\n        this.normalizePath(build);\\n      } else {\\n        this.build(!build);\\n      }\\n\\n      return this;\\n    }\\n  };\\n  p.suffix = function(v, build) {\\n    if (this._parts.urn) {\\n      return v === undefined ? '' : this;\\n    }\\n\\n    if (v === undefined || v === true) {\\n      if (!this._parts.path || this._parts.path === '/') {\\n        return '';\\n      }\\n\\n      var filename = this.filename();\\n      var pos = filename.lastIndexOf('.');\\n      var s, res;\\n\\n      if (pos === -1) {\\n        return '';\\n      }\\n\\n      // suffix may only contain alnum characters (yup, I made this up.)\\n      s = filename.substring(pos+1);\\n      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';\\n      return v ? URI.decodePathSegment(res) : res;\\n    } else {\\n      if (v.charAt(0) === '.') {\\n        v = v.substring(1);\\n      }\\n\\n      var suffix = this.suffix();\\n      var replace;\\n\\n      if (!suffix) {\\n        if (!v) {\\n          return this;\\n        }\\n\\n        this._parts.path += '.' + URI.recodePath(v);\\n      } else if (!v) {\\n        replace = new RegExp(escapeRegEx('.' + suffix) + '$');\\n      } else {\\n        replace = new RegExp(escapeRegEx(suffix) + '$');\\n      }\\n\\n      if (replace) {\\n        v = URI.recodePath(v);\\n        this._parts.path = this._parts.path.replace(replace, v);\\n      }\\n\\n      this.build(!build);\\n      return this;\\n    }\\n  };\\n  p.segment = function(segment, v, build) {\\n    var separator = this._parts.urn ? ':' : '/';\\n    var path = this.path();\\n    var absolute = path.substring(0, 1) === '/';\\n    var segments = path.split(separator);\\n\\n    if (segment !== undefined && typeof segment !== 'number') {\\n      build = v;\\n      v = segment;\\n      segment = undefined;\\n    }\\n\\n    if (segment !== undefined && typeof segment !== 'number') {\\n      throw new Error('Bad segment \\\"' + segment + '\\\", must be 0-based integer');\\n    }\\n\\n    if (absolute) {\\n      segments.shift();\\n    }\\n\\n    if (segment < 0) {\\n      // allow negative indexes to address from the end\\n      segment = Math.max(segments.length + segment, 0);\\n    }\\n\\n    if (v === undefined) {\\n      /*jshint laxbreak: true */\\n      return segment === undefined\\n        ? segments\\n        : segments[segment];\\n      /*jshint laxbreak: false */\\n    } else if (segment === null || segments[segment] === undefined) {\\n      if (isArray(v)) {\\n        segments = [];\\n        // collapse empty elements within array\\n        for (var i=0, l=v.length; i < l; i++) {\\n          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {\\n            continue;\\n          }\\n\\n          if (segments.length && !segments[segments.length -1].length) {\\n            segments.pop();\\n          }\\n\\n          segments.push(trimSlashes(v[i]));\\n        }\\n      } else if (v || typeof v === 'string') {\\n        v = trimSlashes(v);\\n        if (segments[segments.length -1] === '') {\\n          // empty trailing elements have to be overwritten\\n          // to prevent results such as /foo//bar\\n          segments[segments.length -1] = v;\\n        } else {\\n          segments.push(v);\\n        }\\n      }\\n    } else {\\n      if (v) {\\n        segments[segment] = trimSlashes(v);\\n      } else {\\n        segments.splice(segment, 1);\\n      }\\n    }\\n\\n    if (absolute) {\\n      segments.unshift('');\\n    }\\n\\n    return this.path(segments.join(separator), build);\\n  };\\n  p.segmentCoded = function(segment, v, build) {\\n    var segments, i, l;\\n\\n    if (typeof segment !== 'number') {\\n      build = v;\\n      v = segment;\\n      segment = undefined;\\n    }\\n\\n    if (v === undefined) {\\n      segments = this.segment(segment, v, build);\\n      if (!isArray(segments)) {\\n        segments = segments !== undefined ? URI.decode(segments) : undefined;\\n      } else {\\n        for (i = 0, l = segments.length; i < l; i++) {\\n          segments[i] = URI.decode(segments[i]);\\n        }\\n      }\\n\\n      return segments;\\n    }\\n\\n    if (!isArray(v)) {\\n      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;\\n    } else {\\n      for (i = 0, l = v.length; i < l; i++) {\\n        v[i] = URI.encode(v[i]);\\n      }\\n    }\\n\\n    return this.segment(segment, v, build);\\n  };\\n\\n  // mutating query string\\n  var q = p.query;\\n  p.query = function(v, build) {\\n    if (v === true) {\\n      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\\n    } else if (typeof v === 'function') {\\n      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\\n      var result = v.call(this, data);\\n      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\\n      this.build(!build);\\n      return this;\\n    } else if (v !== undefined && typeof v !== 'string') {\\n      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\\n      this.build(!build);\\n      return this;\\n    } else {\\n      return q.call(this, v, build);\\n    }\\n  };\\n  p.setQuery = function(name, value, build) {\\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\\n\\n    if (typeof name === 'string' || name instanceof String) {\\n      data[name] = value !== undefined ? value : null;\\n    } else if (typeof name === 'object') {\\n      for (var key in name) {\\n        if (hasOwn.call(name, key)) {\\n          data[key] = name[key];\\n        }\\n      }\\n    } else {\\n      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');\\n    }\\n\\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\\n    if (typeof name !== 'string') {\\n      build = value;\\n    }\\n\\n    this.build(!build);\\n    return this;\\n  };\\n  p.addQuery = function(name, value, build) {\\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\\n    URI.addQuery(data, name, value === undefined ? null : value);\\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\\n    if (typeof name !== 'string') {\\n      build = value;\\n    }\\n\\n    this.build(!build);\\n    return this;\\n  };\\n  p.removeQuery = function(name, value, build) {\\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\\n    URI.removeQuery(data, name, value);\\n    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\\n    if (typeof name !== 'string') {\\n      build = value;\\n    }\\n\\n    this.build(!build);\\n    return this;\\n  };\\n  p.hasQuery = function(name, value, withinArray) {\\n    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);\\n    return URI.hasQuery(data, name, value, withinArray);\\n  };\\n  p.setSearch = p.setQuery;\\n  p.addSearch = p.addQuery;\\n  p.removeSearch = p.removeQuery;\\n  p.hasSearch = p.hasQuery;\\n\\n  // sanitizing URLs\\n  p.normalize = function() {\\n    if (this._parts.urn) {\\n      return this\\n        .normalizeProtocol(false)\\n        .normalizePath(false)\\n        .normalizeQuery(false)\\n        .normalizeFragment(false)\\n        .build();\\n    }\\n\\n    return this\\n      .normalizeProtocol(false)\\n      .normalizeHostname(false)\\n      .normalizePort(false)\\n      .normalizePath(false)\\n      .normalizeQuery(false)\\n      .normalizeFragment(false)\\n      .build();\\n  };\\n  p.normalizeProtocol = function(build) {\\n    if (typeof this._parts.protocol === 'string') {\\n      this._parts.protocol = this._parts.protocol.toLowerCase();\\n      this.build(!build);\\n    }\\n\\n    return this;\\n  };\\n  p.normalizeHostname = function(build) {\\n    if (this._parts.hostname) {\\n      if (this.is('IDN') && punycode) {\\n        this._parts.hostname = punycode.toASCII(this._parts.hostname);\\n      } else if (this.is('IPv6') && IPv6) {\\n        this._parts.hostname = IPv6.best(this._parts.hostname);\\n      }\\n\\n      this._parts.hostname = this._parts.hostname.toLowerCase();\\n      this.build(!build);\\n    }\\n\\n    return this;\\n  };\\n  p.normalizePort = function(build) {\\n    // remove port of it's the protocol's default\\n    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {\\n      this._parts.port = null;\\n      this.build(!build);\\n    }\\n\\n    return this;\\n  };\\n  p.normalizePath = function(build) {\\n    var _path = this._parts.path;\\n    if (!_path) {\\n      return this;\\n    }\\n\\n    if (this._parts.urn) {\\n      this._parts.path = URI.recodeUrnPath(this._parts.path);\\n      this.build(!build);\\n      return this;\\n    }\\n\\n    if (this._parts.path === '/') {\\n      return this;\\n    }\\n\\n    _path = URI.recodePath(_path);\\n\\n    var _was_relative;\\n    var _leadingParents = '';\\n    var _parent, _pos;\\n\\n    // handle relative paths\\n    if (_path.charAt(0) !== '/') {\\n      _was_relative = true;\\n      _path = '/' + _path;\\n    }\\n\\n    // handle relative files (as opposed to directories)\\n    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {\\n      _path += '/';\\n    }\\n\\n    // resolve simples\\n    _path = _path\\n      .replace(/(\\\\/(\\\\.\\\\/)+)|(\\\\/\\\\.$)/g, '/')\\n      .replace(/\\\\/{2,}/g, '/');\\n\\n    // remember leading parents\\n    if (_was_relative) {\\n      _leadingParents = _path.substring(1).match(/^(\\\\.\\\\.\\\\/)+/) || '';\\n      if (_leadingParents) {\\n        _leadingParents = _leadingParents[0];\\n      }\\n    }\\n\\n    // resolve parents\\n    while (true) {\\n      _parent = _path.search(/\\\\/\\\\.\\\\.(\\\\/|$)/);\\n      if (_parent === -1) {\\n        // no more ../ to resolve\\n        break;\\n      } else if (_parent === 0) {\\n        // top level cannot be relative, skip it\\n        _path = _path.substring(3);\\n        continue;\\n      }\\n\\n      _pos = _path.substring(0, _parent).lastIndexOf('/');\\n      if (_pos === -1) {\\n        _pos = _parent;\\n      }\\n      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);\\n    }\\n\\n    // revert to relative\\n    if (_was_relative && this.is('relative')) {\\n      _path = _leadingParents + _path.substring(1);\\n    }\\n\\n    this._parts.path = _path;\\n    this.build(!build);\\n    return this;\\n  };\\n  p.normalizePathname = p.normalizePath;\\n  p.normalizeQuery = function(build) {\\n    if (typeof this._parts.query === 'string') {\\n      if (!this._parts.query.length) {\\n        this._parts.query = null;\\n      } else {\\n        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));\\n      }\\n\\n      this.build(!build);\\n    }\\n\\n    return this;\\n  };\\n  p.normalizeFragment = function(build) {\\n    if (!this._parts.fragment) {\\n      this._parts.fragment = null;\\n      this.build(!build);\\n    }\\n\\n    return this;\\n  };\\n  p.normalizeSearch = p.normalizeQuery;\\n  p.normalizeHash = p.normalizeFragment;\\n\\n  p.iso8859 = function() {\\n    // expect unicode input, iso8859 output\\n    var e = URI.encode;\\n    var d = URI.decode;\\n\\n    URI.encode = escape;\\n    URI.decode = decodeURIComponent;\\n    try {\\n      this.normalize();\\n    } finally {\\n      URI.encode = e;\\n      URI.decode = d;\\n    }\\n    return this;\\n  };\\n\\n  p.unicode = function() {\\n    // expect iso8859 input, unicode output\\n    var e = URI.encode;\\n    var d = URI.decode;\\n\\n    URI.encode = strictEncodeURIComponent;\\n    URI.decode = unescape;\\n    try {\\n      this.normalize();\\n    } finally {\\n      URI.encode = e;\\n      URI.decode = d;\\n    }\\n    return this;\\n  };\\n\\n  p.readable = function() {\\n    var uri = this.clone();\\n    // removing username, password, because they shouldn't be displayed according to RFC 3986\\n    uri.username('').password('').normalize();\\n    var t = '';\\n    if (uri._parts.protocol) {\\n      t += uri._parts.protocol + '://';\\n    }\\n\\n    if (uri._parts.hostname) {\\n      if (uri.is('punycode') && punycode) {\\n        t += punycode.toUnicode(uri._parts.hostname);\\n        if (uri._parts.port) {\\n          t += ':' + uri._parts.port;\\n        }\\n      } else {\\n        t += uri.host();\\n      }\\n    }\\n\\n    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {\\n      t += '/';\\n    }\\n\\n    t += uri.path(true);\\n    if (uri._parts.query) {\\n      var q = '';\\n      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {\\n        var kv = (qp[i] || '').split('=');\\n        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)\\n          .replace(/&/g, '%26');\\n\\n        if (kv[1] !== undefined) {\\n          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)\\n            .replace(/&/g, '%26');\\n        }\\n      }\\n      t += '?' + q.substring(1);\\n    }\\n\\n    t += URI.decodeQuery(uri.hash(), true);\\n    return t;\\n  };\\n\\n  // resolving relative and absolute URLs\\n  p.absoluteTo = function(base) {\\n    var resolved = this.clone();\\n    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];\\n    var basedir, i, p;\\n\\n    if (this._parts.urn) {\\n      throw new Error('URNs do not have any generally defined hierarchical components');\\n    }\\n\\n    if (!(base instanceof URI)) {\\n      base = new URI(base);\\n    }\\n\\n    if (resolved._parts.protocol) {\\n      // Directly returns even if this._parts.hostname is empty.\\n      return resolved;\\n    } else {\\n      resolved._parts.protocol = base._parts.protocol;\\n    }\\n\\n    if (this._parts.hostname) {\\n      return resolved;\\n    }\\n\\n    for (i = 0; (p = properties[i]); i++) {\\n      resolved._parts[p] = base._parts[p];\\n    }\\n\\n    if (!resolved._parts.path) {\\n      resolved._parts.path = base._parts.path;\\n      if (!resolved._parts.query) {\\n        resolved._parts.query = base._parts.query;\\n      }\\n    } else {\\n      if (resolved._parts.path.substring(-2) === '..') {\\n        resolved._parts.path += '/';\\n      }\\n\\n      if (resolved.path().charAt(0) !== '/') {\\n        basedir = base.directory();\\n        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';\\n        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;\\n        resolved.normalizePath();\\n      }\\n    }\\n\\n    resolved.build();\\n    return resolved;\\n  };\\n  p.relativeTo = function(base) {\\n    var relative = this.clone().normalize();\\n    var relativeParts, baseParts, common, relativePath, basePath;\\n\\n    if (relative._parts.urn) {\\n      throw new Error('URNs do not have any generally defined hierarchical components');\\n    }\\n\\n    base = new URI(base).normalize();\\n    relativeParts = relative._parts;\\n    baseParts = base._parts;\\n    relativePath = relative.path();\\n    basePath = base.path();\\n\\n    if (relativePath.charAt(0) !== '/') {\\n      throw new Error('URI is already relative');\\n    }\\n\\n    if (basePath.charAt(0) !== '/') {\\n      throw new Error('Cannot calculate a URI relative to another relative URI');\\n    }\\n\\n    if (relativeParts.protocol === baseParts.protocol) {\\n      relativeParts.protocol = null;\\n    }\\n\\n    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {\\n      return relative.build();\\n    }\\n\\n    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {\\n      return relative.build();\\n    }\\n\\n    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {\\n      relativeParts.hostname = null;\\n      relativeParts.port = null;\\n    } else {\\n      return relative.build();\\n    }\\n\\n    if (relativePath === basePath) {\\n      relativeParts.path = '';\\n      return relative.build();\\n    }\\n\\n    // determine common sub path\\n    common = URI.commonPath(relativePath, basePath);\\n\\n    // If the paths have nothing in common, return a relative URL with the absolute path.\\n    if (!common) {\\n      return relative.build();\\n    }\\n\\n    var parents = baseParts.path\\n      .substring(common.length)\\n      .replace(/[^\\\\/]*$/, '')\\n      .replace(/.*?\\\\//g, '../');\\n\\n    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';\\n\\n    return relative.build();\\n  };\\n\\n  // comparing URIs\\n  p.equals = function(uri) {\\n    var one = this.clone();\\n    var two = new URI(uri);\\n    var one_map = {};\\n    var two_map = {};\\n    var checked = {};\\n    var one_query, two_query, key;\\n\\n    one.normalize();\\n    two.normalize();\\n\\n    // exact match\\n    if (one.toString() === two.toString()) {\\n      return true;\\n    }\\n\\n    // extract query string\\n    one_query = one.query();\\n    two_query = two.query();\\n    one.query('');\\n    two.query('');\\n\\n    // definitely not equal if not even non-query parts match\\n    if (one.toString() !== two.toString()) {\\n      return false;\\n    }\\n\\n    // query parameters have the same length, even if they're permuted\\n    if (one_query.length !== two_query.length) {\\n      return false;\\n    }\\n\\n    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);\\n    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);\\n\\n    for (key in one_map) {\\n      if (hasOwn.call(one_map, key)) {\\n        if (!isArray(one_map[key])) {\\n          if (one_map[key] !== two_map[key]) {\\n            return false;\\n          }\\n        } else if (!arraysEqual(one_map[key], two_map[key])) {\\n          return false;\\n        }\\n\\n        checked[key] = true;\\n      }\\n    }\\n\\n    for (key in two_map) {\\n      if (hasOwn.call(two_map, key)) {\\n        if (!checked[key]) {\\n          // two contains a parameter not present in one\\n          return false;\\n        }\\n      }\\n    }\\n\\n    return true;\\n  };\\n\\n  // state\\n  p.preventInvalidHostname = function(v) {\\n    this._parts.preventInvalidHostname = !!v;\\n    return this;\\n  };\\n\\n  p.duplicateQueryParameters = function(v) {\\n    this._parts.duplicateQueryParameters = !!v;\\n    return this;\\n  };\\n\\n  p.escapeQuerySpace = function(v) {\\n    this._parts.escapeQuerySpace = !!v;\\n    return this;\\n  };\\n\\n  return URI;\\n}));\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///4\\n\");\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      eval(\"module.exports = function(module) {\\r\\n\\tif(!module.webpackPolyfill) {\\r\\n\\t\\tmodule.deprecate = function() {};\\r\\n\\t\\tmodule.paths = [];\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tif(!module.children) module.children = [];\\r\\n\\t\\tObject.defineProperty(module, \\\"loaded\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.l;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tObject.defineProperty(module, \\\"id\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n};\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///5\\n\");\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports) {\n      eval(\"var g;\\r\\n\\r\\n// This works in non-strict mode\\r\\ng = (function() {\\r\\n\\treturn this;\\r\\n})();\\r\\n\\r\\ntry {\\r\\n\\t// This works if eval is allowed (see CSP)\\r\\n\\tg = g || Function(\\\"return this\\\")() || (1,eval)(\\\"this\\\");\\r\\n} catch(e) {\\r\\n\\t// This works if the window reference is available\\r\\n\\tif(typeof window === \\\"object\\\")\\r\\n\\t\\tg = window;\\r\\n}\\r\\n\\r\\n// g can still be undefined, but nothing to do about it...\\r\\n// We return undefined, instead of nothing here, so it's\\r\\n// easier to handle this case. if(!global) { ...}\\r\\n\\r\\nmodule.exports = g;\\r\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///6\\n\");\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return hypertyDescriptor; });\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"UserActivityObserver\\\",\\n  \\\"configuration\\\": {\\n    \\\"discoveryProviders\\\": [\\\"fitness.google.com\\\"],\\n    \\\"domain_registration\\\": false,\\n    \\\"domain_routing\\\": false\\n  },\\n  \\\"hypertyType\\\": [\\\"user_activity_context\\\"],\\n  \\\"description\\\": \\\"Descriptor of UserActivityObserver Hyperty\\\",\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"dataObjects\\\": [\\\"https://catalogue.%domain%/.well-known/dataschema/Context\\\"]\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL3VzZXItYWN0aXZpdHkvSHlwZXJ0eURlc2NyaXB0b3IuanM/MWYxMiJdLCJuYW1lcyI6WyJoeXBlcnR5RGVzY3JpcHRvciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBTyxJQUFJQSxpQkFBaUIsR0FBRztBQUM3QixVQUFRLHNCQURxQjtBQUU3QixtQkFBaUI7QUFDZiwwQkFBc0IsQ0FBQyxvQkFBRCxDQURQO0FBRWYsMkJBQXVCLEtBRlI7QUFHZixzQkFBa0I7QUFISCxHQUZZO0FBTzdCLGlCQUFlLENBQ2IsdUJBRGEsQ0FQYztBQVU3QixpQkFBZSw0Q0FWYztBQVc3QixpQkFBZTtBQUNiLGVBQVc7QUFERSxHQVhjO0FBYzdCLGNBQVksWUFkaUI7QUFlN0IsZUFBYSxFQWZnQjtBQWdCN0IsaUJBQWUsQ0FDYiwyREFEYTtBQWhCYyxDQUF4QiIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBoeXBlcnR5RGVzY3JpcHRvciA9IHtcclxuICBcIm5hbWVcIjogXCJVc2VyQWN0aXZpdHlPYnNlcnZlclwiLFxyXG4gIFwiY29uZmlndXJhdGlvblwiOiB7XHJcbiAgICBcImRpc2NvdmVyeVByb3ZpZGVyc1wiOiBbXCJmaXRuZXNzLmdvb2dsZS5jb21cIl0sXHJcbiAgICBcImRvbWFpbl9yZWdpc3RyYXRpb25cIjogZmFsc2UsXHJcbiAgICBcImRvbWFpbl9yb3V0aW5nXCI6IGZhbHNlXHJcbiAgfSxcclxuICBcImh5cGVydHlUeXBlXCI6IFtcclxuICAgIFwidXNlcl9hY3Rpdml0eV9jb250ZXh0XCJcclxuICBdLFxyXG4gIFwiZGVzY3JpcHRpb25cIjogXCJEZXNjcmlwdG9yIG9mIFVzZXJBY3Rpdml0eU9ic2VydmVyIEh5cGVydHlcIixcclxuICBcImNvbnN0cmFpbnRzXCI6IHtcclxuICAgIFwiYnJvd3NlclwiOiB0cnVlXHJcbiAgfSxcclxuICBcImxhbmd1YWdlXCI6IFwiamF2YXNjcmlwdFwiLFxyXG4gIFwic2lnbmF0dXJlXCI6IFwiXCIsXHJcbiAgXCJkYXRhT2JqZWN0c1wiOiBbXHJcbiAgICBcImh0dHBzOi8vY2F0YWxvZ3VlLiVkb21haW4lLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvQ29udGV4dFwiXHJcbiAgXVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtaHlwZXJ0eS9zcmMvdXNlci1hY3Rpdml0eS9IeXBlcnR5RGVzY3JpcHRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///7\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});