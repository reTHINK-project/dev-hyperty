(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HypertyDescriptor__ = __webpack_require__(1);\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/**\\r\\n* Copyright 2016 PT Inovação e Sistemas SA\\r\\n* Copyright 2016 INESC-ID\\r\\n* Copyright 2016 QUOBIS NETWORKS SL\\r\\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\\r\\n* Copyright 2016 ORANGE SA\\r\\n* Copyright 2016 Deutsche Telekom AG\\r\\n* Copyright 2016 Apizee\\r\\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\\r\\n*\\r\\n* Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n* you may not use this file except in compliance with the License.\\r\\n* You may obtain a copy of the License at\\r\\n*\\r\\n*   http://www.apache.org/licenses/LICENSE-2.0\\r\\n*\\r\\n* Unless required by applicable law or agreed to in writing, software\\r\\n* distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n* See the License for the specific language governing permissions and\\r\\n* limitations under the License.\\r\\n**/\\n// Service Framework\\n//import IdentityManager from 'service-framework/dist/IdentityManager';\\n//import {ChatManager,ChatController} from 'runtime-core/dist/ChatManager';\\n//import { RegistrationStatus} from 'service-framework/dist/Discovery';\\n//import {Syncher} from 'service-framework/dist/Syncher';\\n// Utils\\n\\n/*import {divideURL} from '../utils/utils';\\r\\nimport Search from '../utils/Search';*/\\n// Internals\\n\\n/*import { communicationObject, CommunicationStatus, communicationChildren } from './communication';\\r\\nimport { UserInfo } from './UserInfo';*/\\n\\n/**\\r\\n* Hyperty Group Chat Manager API (HypertyChat)\\r\\n* @author Vitor Silva [vitor-t-silva@telecom.pt]\\r\\n* @version 0.1.0\\r\\n*/\\n\\nvar GroupChatManager =\\n/*#__PURE__*/\\nfunction () {\\n  function GroupChatManager() {\\n    _classCallCheck(this, GroupChatManager);\\n  }\\n\\n  _createClass(GroupChatManager, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, configuration, factory) {\\n      //    super(hypertyURL, bus, configuration, factory);\\n      var _this = this;\\n\\n      _this._factory = factory;\\n      _this._syncher = factory.createSyncher(hypertyURL, bus, configuration);\\n      _this._manager = factory.createChatManager(hypertyURL, bus, configuration, _this._syncher);\\n      _this.discovery = _this._manager.discovery;\\n      _this.identityManager = _this._manager.identityManager;\\n      _this.search = _this._manager.search;\\n      _this._domain = _this._manager._domain;\\n      _this._myUrl = hypertyURL;\\n      _this.hypertyURL = hypertyURL;\\n      _this._runtimeURL = configuration.runtimeURL;\\n      _this._bus = bus;\\n      _this._backup = configuration.hasOwnProperty('backup') ? configuration.backup : false;\\n      _this._heartbeat = configuration.hasOwnProperty('heartbeat') ? configuration.heartbeat : undefined;\\n\\n      _this._syncher.onNotification(function (event) {\\n        console.log('[GroupChatManager] onNotification:', event);\\n\\n        _this.processNotification(event);\\n      });\\n\\n      _this._resumeReporters();\\n\\n      _this._resumeObservers();\\n    }\\n  }, {\\n    key: \\\"register\\\",\\n    value: function register(CRMaddress, code, identity) {\\n      var _this = this;\\n\\n      debugger;\\n      var msgIdentity = {\\n        userProfile: {\\n          guid: identity.guid,\\n          userURL: identity.userURL,\\n          info: {\\n            code: code\\n          }\\n        }\\n      };\\n      var createMessage = {\\n        type: 'forward',\\n        to: CRMaddress,\\n        from: _this.hypertyURL,\\n        identity: msgIdentity,\\n        body: {\\n          type: 'create',\\n          from: _this.hypertyURL,\\n          identity: msgIdentity\\n        }\\n      };\\n\\n      _this._bus.postMessage(createMessage);\\n    }\\n  }, {\\n    key: \\\"_getRegisteredUser\\\",\\n    value: function _getRegisteredUser() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve, reject) {\\n        if (_this._manager.currentIdentity) {\\n          resolve(_this._manager.currentIdentity);\\n        } else {\\n          // create a new chatController but first get identity\\n          _this._manager.identityManager.discoverUserRegistered().then(function (identity) {\\n            console.log('[GroupChatManager] GET MY IDENTITY:', identity);\\n            resolve(identity);\\n          }).catch(function (error) {\\n            console.error('[GroupChatManager] ERROR:', error);\\n            reject(error);\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"_resumeReporters\\\",\\n    value: function _resumeReporters() {\\n      var _this2 = this;\\n\\n      var _this = this;\\n\\n      _this._syncher.resumeReporters({\\n        store: true\\n      }).then(function (reporters) {\\n        var reportersList = Object.keys(reporters);\\n\\n        if (reportersList.length > 0) {\\n          _this._getRegisteredUser().then(function (identity) {\\n            reportersList.forEach(function (dataObjectReporterURL) {\\n              console.log('[GroupChatManager.resumeReporter]: ', dataObjectReporterURL);\\n\\n              var chatController = _this._factory.createChatController(_this._syncher, _this.discovery, _this._domain, _this.search, identity, _this._manager);\\n\\n              chatController.dataObjectReporter = reporters[dataObjectReporterURL]; // Save the chat controllers by dataObjectReporterURL\\n\\n              _this2._manager._reportersControllers[dataObjectReporterURL] = chatController;\\n\\n              _this._resumeInterworking(chatController.dataObjectReporter);\\n\\n              console.log('[GroupChatManager] chatController invitationsHandler: ', chatController.invitationsHandler); //            chatController.dataObjectReporter.sync();\\n\\n              chatController.invitationsHandler.resumeDiscoveries(_this._manager.discovery, chatController.dataObjectReporter);\\n            });\\n            if (_this._onResumeReporter) _this._onResumeReporter(_this2._manager._reportersControllers);\\n          });\\n        }\\n      }).catch(function (reason) {\\n        console.info('[GroupChatManager.resumeReporters] :', reason);\\n      });\\n    }\\n  }, {\\n    key: \\\"_resumeObservers\\\",\\n    value: function _resumeObservers() {\\n      var _this3 = this;\\n\\n      var _this = this;\\n\\n      _this._syncher.resumeObservers({\\n        store: true\\n      }).then(function (observers) {\\n        console.log('[GroupChatManager] resuming observers : ', observers, _this, _this._onResume);\\n        var observersList = Object.keys(observers);\\n\\n        if (observersList.length > 0) {\\n          _this._getRegisteredUser().then(function (identity) {\\n            observersList.forEach(function (dataObjectObserverURL) {\\n              console.log('[GroupChatManager].syncher.resumeObserver: ', dataObjectObserverURL);\\n              var chatObserver = observers[dataObjectObserverURL];\\n\\n              var chatController = _this._factory.createChatController(_this._syncher, _this._manager.discovery, _this._domain, _this.search, identity, _this._manager);\\n\\n              chatController.dataObjectObserver = chatObserver; // Save the chat controllers by dataObjectReporterURL\\n\\n              _this3._manager._observersControllers[dataObjectObserverURL] = chatController;\\n\\n              var reporterStatus = _this._factory.createRegistrationStatus(chatObserver.url, _this._runtimeURL, _this._myUrl, _this._bus); // recursive function to sync with chat reporter\\n\\n\\n              var reporterSync = function reporterSync(observer, subscriber, status) {\\n                var statusOfReporter = status;\\n                observer.sync().then(function (synched) {\\n                  if (!synched) {\\n                    statusOfReporter.onLive(subscriber, function () {\\n                      statusOfReporter.unsubscribeLive(subscriber);\\n                      reporterSync(observer, subscriber, statusOfReporter);\\n                    }); //TODO: subscribe to sync when reporter is live. New synched messages should trigger onMessage ie onChild\\n                  }\\n                });\\n              };\\n\\n              reporterSync(chatObserver, _this._myUrl, reporterStatus);\\n            });\\n            if (_this._onResumeObserver) _this._onResumeObserver(_this3._manager._observersControllers);\\n          });\\n        }\\n      }).catch(function (reason) {\\n        console.info('[GroupChatManager] Resume Observer | ', reason);\\n      });\\n    }\\n    /**\\r\\n     * This function is used to resume interworking Stubs for participants from legacy chat services\\r\\n     * @param  {Communication}              communication Communication data object\\r\\n     */\\n\\n  }, {\\n    key: \\\"_resumeInterworking\\\",\\n    value: function _resumeInterworking(communication) {\\n      var _this = this;\\n\\n      if (communication.data.participants) {\\n        var participants = communication.data.participants;\\n        var objectUrl = communication.url;\\n        var schemaUrl = communication.schema; // let name = communication.name;\\n\\n        console.log('[GroupChatManager._resumeInterworking for] ', participants);\\n        Object.keys(participants).forEach(function (participant) {\\n          var user = participants[participant].identity.userProfile.userURL.split('://');\\n\\n          if (user[0] !== 'user') {\\n            console.log('[GroupChatManager._resumeInterworking for] ', participant);\\n            user = user[0] + '://' + user[1].split('/')[1];\\n            var msg = {\\n              type: 'create',\\n              from: _this._myUrl,\\n              to: user,\\n              body: {\\n                resource: objectUrl,\\n                schema: schemaUrl,\\n                value: communication.metadata\\n              }\\n            };\\n\\n            _this._bus.postMessage(msg, function () {});\\n          }\\n        });\\n      }\\n    }\\n    /**\\r\\n     * This function is used to create a new Group Chat providing the name and the identifiers of users to be invited.\\r\\n     * @param  {string}                     name  Is a string to identify the Group Chat\\r\\n     * @param  {array<URL.userURL>}         users Array of users to be invited to join the Group Chat. Users are identified with reTHINK User URL, like this format user://<ipddomain>/<user-identifier>\\r\\n     * @return {<Promise>ChatController}    A ChatController object as a Promise.\\r\\n     */\\n\\n  }, {\\n    key: \\\"create\\\",\\n    value: function create(name, users) {\\n      var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n      extra.backup = this._backup;\\n      extra.heartbeat = this._heartbeat;\\n      console.log('[GroupChatManager.create] extra: ', extra);\\n      return this._manager.create(name, users, extra);\\n    }\\n    /**\\r\\n     * This function is used to handle notifications about incoming invitations to join a Group Chat.\\r\\n     * @param  {Function} CreateEvent The CreateEvent fired by the Syncher when an invitaion is received\\r\\n     */\\n\\n  }, {\\n    key: \\\"onInvitation\\\",\\n    value: function onInvitation(callback) {\\n      return this._manager.onInvitation(callback);\\n    }\\n  }, {\\n    key: \\\"onResumeReporter\\\",\\n    value: function onResumeReporter(callback) {\\n      var _this = this;\\n\\n      _this._onResumeReporter = callback;\\n    }\\n  }, {\\n    key: \\\"onResumeObserver\\\",\\n    value: function onResumeObserver(callback) {\\n      var _this = this;\\n\\n      _this._onResumeObserver = callback;\\n    }\\n    /**\\r\\n     * This function is used to join a Group Chat.\\r\\n     * @param  {URL.CommunicationURL} invitationURL  The Communication URL of the Group Chat to join that is provided in the invitation event\\r\\n     * @return {<Promise>ChatController}             It returns the ChatController object as a Promise\\r\\n     */\\n\\n  }, {\\n    key: \\\"join\\\",\\n    value: function join(invitationURL) {\\n      return this._manager.join(invitationURL);\\n    }\\n    /**\\r\\n     * This function is used to retrieve my identity.\\r\\n     * @return {<Promise>Identity}             It returns the Identity object as a Promise\\r\\n     */\\n\\n  }, {\\n    key: \\\"myIdentity\\\",\\n    value: function myIdentity(identity) {\\n      console.log('[GroupChatManager.myIdentity] ', identity);\\n      return this._manager.myIdentity(identity);\\n    }\\n    /**\\r\\n     * This function is used to process incoming messages.\\r\\n     */\\n\\n  }, {\\n    key: \\\"processNotification\\\",\\n    value: function processNotification(event) {\\n      return this._manager.processNotification(event);\\n    }\\n    /**\\r\\n     * This function is used to process incoming messages.\\r\\n     */\\n\\n  }, {\\n    key: \\\"onInvitation\\\",\\n    value: function onInvitation(callback) {\\n      return this._manager.onInvitation(callback);\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */].name;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      console.log('[Connector.getDescriptor]'); //    debugger;\\n\\n      return __WEBPACK_IMPORTED_MODULE_0__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */];\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this.hypertyURL;\\n    }\\n  }]);\\n\\n  return GroupChatManager;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (GroupChatManager);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return hypertyDescriptor; });\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"GroupChatManager\\\",\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"configuration\\\": {},\\n  \\\"hypertyType\\\": [\\\"chat\\\"],\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"dataObjects\\\": [\\\"https://catalogue.%domain%/.well-known/dataschema/Communication\\\"]\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL2dyb3VwLWNoYXQtbWFuYWdlci9IeXBlcnR5RGVzY3JpcHRvci5qcz8xZmExIl0sIm5hbWVzIjpbImh5cGVydHlEZXNjcmlwdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFPLElBQUlBLGlCQUFpQixHQUFHO0FBQzdCLFVBQVEsa0JBRHFCO0FBRTdCLGNBQVksWUFGaUI7QUFHN0IsZUFBYSxFQUhnQjtBQUk3QixtQkFBaUIsRUFKWTtBQU03QixpQkFBZSxDQUNiLE1BRGEsQ0FOYztBQVM3QixpQkFBZTtBQUNiLGVBQVc7QUFERSxHQVRjO0FBWTdCLGlCQUFlLENBQ2IsaUVBRGE7QUFaYyxDQUF4QiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBoeXBlcnR5RGVzY3JpcHRvciA9IHtcclxuICBcIm5hbWVcIjogXCJHcm91cENoYXRNYW5hZ2VyXCIsXHJcbiAgXCJsYW5ndWFnZVwiOiBcImphdmFzY3JpcHRcIixcclxuICBcInNpZ25hdHVyZVwiOiBcIlwiLFxyXG4gIFwiY29uZmlndXJhdGlvblwiOiB7IFxyXG4gICAgfSxcclxuICBcImh5cGVydHlUeXBlXCI6IFtcclxuICAgIFwiY2hhdFwiXHJcbiAgXSxcclxuICBcImNvbnN0cmFpbnRzXCI6IHtcclxuICAgIFwiYnJvd3NlclwiOiB0cnVlXHJcbiAgICAgICB9LFxyXG4gIFwiZGF0YU9iamVjdHNcIjogW1xyXG4gICAgXCJodHRwczovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9kYXRhc2NoZW1hL0NvbW11bmljYXRpb25cIlxyXG4gIF1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LWh5cGVydHkvc3JjL2dyb3VwLWNoYXQtbWFuYWdlci9IeXBlcnR5RGVzY3JpcHRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});