(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__hello__ = __webpack_require__(1);\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/* jshint undef: true */\\n//import {Syncher} from 'service-framework/dist/Syncher';\\n//import {divideURL} from '../utils/utils';\\n\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"HelloWorldReporter\\\",\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"configuration\\\": {},\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"hypertyType\\\": [\\\"hello\\\"],\\n  \\\"dataObjects\\\": [\\\"https://%domain%/.well-known/dataschema/HelloWorldDataSchema\\\"]\\n};\\n/**\\r\\n* Hyperty Connector;\\r\\n* @author Paulo Chainho [paulo-g-chainho@telecom.pt]\\r\\n* @version 0.1.0\\r\\n*/\\n\\nvar HelloWorldReporter =\\n/*#__PURE__*/\\nfunction () {\\n  /**\\r\\n  * Create a new HelloWorldReporter\\r\\n  * @param  {Syncher} syncher - Syncher provided from the runtime core\\r\\n  */\\n  function HelloWorldReporter() {\\n    _classCallCheck(this, HelloWorldReporter);\\n  }\\n\\n  _createClass(HelloWorldReporter, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, configuration, factory) {\\n      if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\\n      if (!bus) throw new Error('The MiniBus is a needed parameter');\\n      if (!configuration) throw new Error('The configuration is a needed parameter');\\n      if (!factory) throw new Error('The factory is a needed parameter');\\n\\n      var _this = this;\\n\\n      var domain = factory.divideURL(hypertyURL).domain;\\n      _this._domain = domain;\\n      _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/HelloWorldDataSchema';\\n      _this._factory = factory;\\n      _this._backup = configuration.hasOwnProperty('backup') ? configuration.backup : false;\\n      console.log('HelloWorldReporter configuration', configuration);\\n\\n      var syncher = _this._factory.createSyncher(hypertyURL, bus, configuration);\\n\\n      _this._syncher = syncher;\\n      _this._runtimeHypertyURL = hypertyURL;\\n      /*_this._syncher.resumeReporters({}).then((resumeReporters) => {\\r\\n          if (!resumeReporters) return;\\r\\n          // lets now observe any changes done in Hello World Object\\r\\n        console.log('[hyperty syncher resume] - dataObject', resumeReporters);\\r\\n          Object.values(resumeReporters).forEach((helloObjtReporter) => {\\r\\n          _this.helloObjtReporter = helloObjtReporter;\\r\\n            this.prepareDataObjectReporter(helloObjtReporter);\\r\\n            helloObjtReporter.data.hello = 'REPORTER RESUMED';\\r\\n            console.log(this._onReporterResume);\\r\\n          if (this._onReporterResume) this._onReporterResume(helloObjtReporter);\\r\\n        })\\r\\n        });*/\\n    }\\n  }, {\\n    key: \\\"hello\\\",\\n\\n    /**\\r\\n    * Create HelloWorld Data Object\\r\\n    * @param  {HypertyURL} HypertyURL - Invited\\r\\n    */\\n    value: function hello(hypertyURL) {\\n      var _this = this;\\n\\n      var syncher = _this._syncher;\\n      return new Promise(function (resolve, reject) {\\n        var input = Object.assign({\\n          resources: ['hello']\\n        }, {});\\n        input.backup = _this._backup;\\n        input.reuseURL = true;\\n        input.mutual = false;\\n        input.domain_registration = false;\\n        syncher.create(_this._objectDescURL, [hypertyURL], __WEBPACK_IMPORTED_MODULE_0__hello__[\\\"a\\\" /* default */], true, false, 'hello', {}, input).then(function (helloObjtReporter) {\\n          console.info('1. Return Created Hello World Data Object Reporter', helloObjtReporter);\\n          _this.helloObjtReporter = helloObjtReporter;\\n\\n          _this.prepareDataObjectReporter(helloObjtReporter);\\n\\n          resolve(helloObjtReporter);\\n        }).catch(function (reason) {\\n          console.error(reason);\\n          reject(reason);\\n        });\\n      });\\n    }\\n  }, {\\n    key: \\\"prepareDataObjectReporter\\\",\\n    value: function prepareDataObjectReporter(helloObjtReporter) {\\n      helloObjtReporter.onSubscription(function (event) {\\n        console.info('-------- Hello World Reporter received subscription request --------- \\\\n'); // All subscription requested are accepted\\n\\n        event.accept();\\n      });\\n      helloObjtReporter.onRead(function (event) {\\n        event.accept();\\n      });\\n    }\\n    /**\\r\\n    * Update HelloWorld Data Object\\r\\n    *\\r\\n    */\\n\\n  }, {\\n    key: \\\"bye\\\",\\n    value: function bye(byeMsg) {\\n      var _this = this;\\n\\n      console.log('bye:', _this.helloObjtReporter);\\n      if (byeMsg) _this.helloObjtReporter.data.hello = byeMsg;else {\\n        _this.helloObjtReporter.data.hello = \\\"bye, bye\\\";\\n      }\\n    }\\n  }, {\\n    key: \\\"onReporterResume\\\",\\n    value: function onReporterResume(callback) {\\n      this._onReporterResume = callback;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return hypertyDescriptor;\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return hypertyDescriptor.name;\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this._runtimeHypertyURL;\\n    }\\n  }]);\\n\\n  return HelloWorldReporter;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (HelloWorldReporter);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"var hello = {\\n  name: \\\"hello\\\",\\n  hello: \\\"Hello buddy!!\\\"\\n};\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (hello);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL2hlbGxvLXdvcmxkL2hlbGxvLmpzPzVkODYiXSwibmFtZXMiOlsiaGVsbG8iLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFFQSxJQUFJQSxLQUFLLEdBQUc7QUFDVkMsTUFBSSxFQUFFLE9BREk7QUFFVkQsT0FBSyxFQUFFO0FBRkcsQ0FBWjtBQUtlQSw4REFBZiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5sZXQgaGVsbG8gPSB7XHJcbiAgbmFtZTogXCJoZWxsb1wiLFxyXG4gIGhlbGxvOiBcIkhlbGxvIGJ1ZGR5ISFcIlxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaGVsbG87XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtaHlwZXJ0eS9zcmMvaGVsbG8td29ybGQvaGVsbG8uanMiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvaHlwZXJ0aWVzL0hlbGxvV29ybGRSZXBvcnRlci5oeS5qcz82MTFlIl0sIm5hbWVzIjpbIndlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwic2VsZiIsIm1vZHVsZXMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsImdldERlZmF1bHQiLCJnZXRNb2R1bGVFeHBvcnRzIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImV2YWwiXSwibWFwcGluZ3MiOiI7O0FBQUEsQ0FBQyxTQUFTQSxnQ0FBVCxDQUEwQ0MsSUFBMUMsRUFBZ0RDLE9BQWhELEVBQXlEO0FBQ3pELE1BQUcsZ0NBQU9DLE9BQVAsT0FBbUIsUUFBbkIsSUFBK0IsZ0NBQU9DLE1BQVAsT0FBa0IsUUFBcEQsRUFDQ0EsTUFBTSxDQUFDRCxPQUFQLEdBQWlCRCxPQUFPLEVBQXhCLENBREQsS0FFSyxJQUFHLElBQUgsRUFDSkcsaUNBQW1CLEVBQWIsb0NBQWlCSCxPQUFqQjtBQUFBO0FBQUE7QUFBQSxvR0FBTixDQURJLEtBRUEsSUFBRyxRQUFPQyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXRCLEVBQ0pBLE9BQU8sQ0FBQyxVQUFELENBQVAsR0FBc0JELE9BQU8sRUFBN0IsQ0FESSxLQUdKRCxJQUFJLENBQUMsVUFBRCxDQUFKLEdBQW1CQyxPQUFPLEVBQTFCO0FBQ0QsQ0FURCxFQVNHLE9BQU9J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ckg7QUFDVjs7QUFDQTtBQUFVOztBQUNWOzs7QUFBVXJCLHlCQUFtQixDQUFDd0IsQ0FBcEIsR0FBd0IsRUFBeEI7QUFDVjs7QUFDQTtBQUFVOztBQUNWOztBQUFVLGFBQU94QixtQkFBbUIsQ0FBQ0EsbUJBQW1CLENBQUN5QixDQUFwQixHQUF3QixDQUF6QixDQUExQjtBQUNWO0FBQVUsS0EvRE07QUFnRWhCOztBQUNBO0FBQVU7QUFDVjs7QUFDQTtBQUFPLGNBQVM5QixNQUFULEVBQWlCK0IsbUJBQWpCLEVBQXNDMUIsbUJBQXRDLEVBQTJEO0FBRWxFOztBQUNBMkIsVUFBSSxDQUFDLHVwaEJBQUQsQ0FBSjtBQUVBO0FBQU8sS0FQRztBQVFWOztBQUNBO0FBQU8sY0FBU2hDLE1BQVQsRUFBaUIrQixtQkFBakIsRUFBc0MxQixtQkFBdEMsRUFBMkQ7QUFFbEU7O0FBQ0EyQixVQUFJLENBQUMsMDBCQUFELENBQUo7QUFFQTtBQUFPLEtBZEcsQ0FqRU0sRUFnRkosU0FoRkk7QUFBaEI7QUFpRkMsQ0EzRkQsRSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJhY3RpdmF0ZVwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhY3RpdmF0ZVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhY3RpdmF0ZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcXFwiX19lc01vZHVsZVxcXCIsIHsgdmFsdWU6IHRydWUgfSk7XFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9faGVsbG9fXyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFxcXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cXFwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXFxcInZhbHVlXFxcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbi8qIGpzaGludCB1bmRlZjogdHJ1ZSAqL1xcbi8vaW1wb3J0IHtTeW5jaGVyfSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXInO1xcbi8vaW1wb3J0IHtkaXZpZGVVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcXG5cXG52YXIgaHlwZXJ0eURlc2NyaXB0b3IgPSB7XFxuICBcXFwibmFtZVxcXCI6IFxcXCJIZWxsb1dvcmxkUmVwb3J0ZXJcXFwiLFxcbiAgXFxcImxhbmd1YWdlXFxcIjogXFxcImphdmFzY3JpcHRcXFwiLFxcbiAgXFxcInNpZ25hdHVyZVxcXCI6IFxcXCJcXFwiLFxcbiAgXFxcImNvbmZpZ3VyYXRpb25cXFwiOiB7fSxcXG4gIFxcXCJjb25zdHJhaW50c1xcXCI6IHtcXG4gICAgXFxcImJyb3dzZXJcXFwiOiB0cnVlXFxuICB9LFxcbiAgXFxcImh5cGVydHlUeXBlXFxcIjogW1xcXCJoZWxsb1xcXCJdLFxcbiAgXFxcImRhdGFPYmplY3RzXFxcIjogW1xcXCJodHRwczovLyVkb21haW4lLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvSGVsbG9Xb3JsZERhdGFTY2hlbWFcXFwiXVxcbn07XFxuLyoqXFxyXFxuKiBIeXBlcnR5IENvbm5lY3RvcjtcXHJcXG4qIEBhdXRob3IgUGF1bG8gQ2hhaW5obyBbcGF1bG8tZy1jaGFpbmhvQHRlbGVjb20ucHRdXFxyXFxuKiBAdmVyc2lvbiAwLjEuMFxcclxcbiovXFxuXFxudmFyIEhlbGxvV29ybGRSZXBvcnRlciA9XFxuLyojX19QVVJFX18qL1xcbmZ1bmN0aW9uICgpIHtcXG4gIC8qKlxcclxcbiAgKiBDcmVhdGUgYSBuZXcgSGVsbG9Xb3JsZFJlcG9ydGVyXFxyXFxuICAqIEBwYXJhbSAge1N5bmNoZXJ9IHN5bmNoZXIgLSBTeW5jaGVyIHByb3ZpZGVkIGZyb20gdGhlIHJ1bnRpbWUgY29yZVxcclxcbiAgKi9cXG4gIGZ1bmN0aW9uIEhlbGxvV29ybGRSZXBvcnRlcigpIHtcXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlbGxvV29ybGRSZXBvcnRlcik7XFxuICB9XFxuXFxuICBfY3JlYXRlQ2xhc3MoSGVsbG9Xb3JsZFJlcG9ydGVyLCBbe1xcbiAgICBrZXk6IFxcXCJfc3RhcnRcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0KGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbiwgZmFjdG9yeSkge1xcbiAgICAgIGlmICghaHlwZXJ0eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgaHlwZXJ0eVVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcXG4gICAgICBpZiAoIWJ1cykgdGhyb3cgbmV3IEVycm9yKCdUaGUgTWluaUJ1cyBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcXG4gICAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHRocm93IG5ldyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7XFxuICAgICAgaWYgKCFmYWN0b3J5KSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBmYWN0b3J5IGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpO1xcblxcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIGRvbWFpbiA9IGZhY3RvcnkuZGl2aWRlVVJMKGh5cGVydHlVUkwpLmRvbWFpbjtcXG4gICAgICBfdGhpcy5fZG9tYWluID0gZG9tYWluO1xcbiAgICAgIF90aGlzLl9vYmplY3REZXNjVVJMID0gJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicgKyBkb21haW4gKyAnLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvSGVsbG9Xb3JsZERhdGFTY2hlbWEnO1xcbiAgICAgIF90aGlzLl9mYWN0b3J5ID0gZmFjdG9yeTtcXG4gICAgICBfdGhpcy5fYmFja3VwID0gY29uZmlndXJhdGlvbi5oYXNPd25Qcm9wZXJ0eSgnYmFja3VwJykgPyBjb25maWd1cmF0aW9uLmJhY2t1cCA6IGZhbHNlO1xcbiAgICAgIGNvbnNvbGUubG9nKCdIZWxsb1dvcmxkUmVwb3J0ZXIgY29uZmlndXJhdGlvbicsIGNvbmZpZ3VyYXRpb24pO1xcblxcbiAgICAgIHZhciBzeW5jaGVyID0gX3RoaXMuX2ZhY3RvcnkuY3JlYXRlU3luY2hlcihoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24pO1xcblxcbiAgICAgIF90aGlzLl9zeW5jaGVyID0gc3luY2hlcjtcXG4gICAgICBfdGhpcy5fcnVudGltZUh5cGVydHlVUkwgPSBoeXBlcnR5VVJMO1xcbiAgICAgIC8qX3RoaXMuX3N5bmNoZXIucmVzdW1lUmVwb3J0ZXJzKHt9KS50aGVuKChyZXN1bWVSZXBvcnRlcnMpID0+IHtcXHJcXG4gICAgICAgICAgaWYgKCFyZXN1bWVSZXBvcnRlcnMpIHJldHVybjtcXHJcXG4gICAgICAgICAgLy8gbGV0cyBub3cgb2JzZXJ2ZSBhbnkgY2hhbmdlcyBkb25lIGluIEhlbGxvIFdvcmxkIE9iamVjdFxcclxcbiAgICAgICAgY29uc29sZS5sb2coJ1toeXBlcnR5IHN5bmNoZXIgcmVzdW1lXSAtIGRhdGFPYmplY3QnLCByZXN1bWVSZXBvcnRlcnMpO1xcclxcbiAgICAgICAgICBPYmplY3QudmFsdWVzKHJlc3VtZVJlcG9ydGVycykuZm9yRWFjaCgoaGVsbG9PYmp0UmVwb3J0ZXIpID0+IHtcXHJcXG4gICAgICAgICAgX3RoaXMuaGVsbG9PYmp0UmVwb3J0ZXIgPSBoZWxsb09ianRSZXBvcnRlcjtcXHJcXG4gICAgICAgICAgICB0aGlzLnByZXBhcmVEYXRhT2JqZWN0UmVwb3J0ZXIoaGVsbG9PYmp0UmVwb3J0ZXIpO1xcclxcbiAgICAgICAgICAgIGhlbGxvT2JqdFJlcG9ydGVyLmRhdGEuaGVsbG8gPSAnUkVQT1JURVIgUkVTVU1FRCc7XFxyXFxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5fb25SZXBvcnRlclJlc3VtZSk7XFxyXFxuICAgICAgICAgIGlmICh0aGlzLl9vblJlcG9ydGVyUmVzdW1lKSB0aGlzLl9vblJlcG9ydGVyUmVzdW1lKGhlbGxvT2JqdFJlcG9ydGVyKTtcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgICAgICB9KTsqL1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXFxcImhlbGxvXFxcIixcXG5cXG4gICAgLyoqXFxyXFxuICAgICogQ3JlYXRlIEhlbGxvV29ybGQgRGF0YSBPYmplY3RcXHJcXG4gICAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSBIeXBlcnR5VVJMIC0gSW52aXRlZFxcclxcbiAgICAqL1xcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGVsbG8oaHlwZXJ0eVVSTCkge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIHN5bmNoZXIgPSBfdGhpcy5fc3luY2hlcjtcXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xcbiAgICAgICAgdmFyIGlucHV0ID0gT2JqZWN0LmFzc2lnbih7XFxuICAgICAgICAgIHJlc291cmNlczogWydoZWxsbyddXFxuICAgICAgICB9LCB7fSk7XFxuICAgICAgICBpbnB1dC5iYWNrdXAgPSBfdGhpcy5fYmFja3VwO1xcbiAgICAgICAgaW5wdXQucmV1c2VVUkwgPSB0cnVlO1xcbiAgICAgICAgaW5wdXQubXV0dWFsID0gZmFsc2U7XFxuICAgICAgICBpbnB1dC5kb21haW5fcmVnaXN0cmF0aW9uID0gZmFsc2U7XFxuICAgICAgICBzeW5jaGVyLmNyZWF0ZShfdGhpcy5fb2JqZWN0RGVzY1VSTCwgW2h5cGVydHlVUkxdLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2hlbGxvX19bXFxcImFcXFwiIC8qIGRlZmF1bHQgKi9dLCB0cnVlLCBmYWxzZSwgJ2hlbGxvJywge30sIGlucHV0KS50aGVuKGZ1bmN0aW9uIChoZWxsb09ianRSZXBvcnRlcikge1xcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzEuIFJldHVybiBDcmVhdGVkIEhlbGxvIFdvcmxkIERhdGEgT2JqZWN0IFJlcG9ydGVyJywgaGVsbG9PYmp0UmVwb3J0ZXIpO1xcbiAgICAgICAgICBfdGhpcy5oZWxsb09ianRSZXBvcnRlciA9IGhlbGxvT2JqdFJlcG9ydGVyO1xcblxcbiAgICAgICAgICBfdGhpcy5wcmVwYXJlRGF0YU9iamVjdFJlcG9ydGVyKGhlbGxvT2JqdFJlcG9ydGVyKTtcXG5cXG4gICAgICAgICAgcmVzb2x2ZShoZWxsb09ianRSZXBvcnRlcik7XFxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTtcXG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJwcmVwYXJlRGF0YU9iamVjdFJlcG9ydGVyXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVEYXRhT2JqZWN0UmVwb3J0ZXIoaGVsbG9PYmp0UmVwb3J0ZXIpIHtcXG4gICAgICBoZWxsb09ianRSZXBvcnRlci5vblN1YnNjcmlwdGlvbihmdW5jdGlvbiAoZXZlbnQpIHtcXG4gICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0gSGVsbG8gV29ybGQgUmVwb3J0ZXIgcmVjZWl2ZWQgc3Vic2NyaXB0aW9uIHJlcXVlc3QgLS0tLS0tLS0tIFxcXFxuJyk7IC8vIEFsbCBzdWJzY3JpcHRpb24gcmVxdWVzdGVkIGFyZSBhY2NlcHRlZFxcblxcbiAgICAgICAgZXZlbnQuYWNjZXB0KCk7XFxuICAgICAgfSk7XFxuICAgICAgaGVsbG9PYmp0UmVwb3J0ZXIub25SZWFkKGZ1bmN0aW9uIChldmVudCkge1xcbiAgICAgICAgZXZlbnQuYWNjZXB0KCk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICogVXBkYXRlIEhlbGxvV29ybGQgRGF0YSBPYmplY3RcXHJcXG4gICAgKlxcclxcbiAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJieWVcXFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnllKGJ5ZU1zZykge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgY29uc29sZS5sb2coJ2J5ZTonLCBfdGhpcy5oZWxsb09ianRSZXBvcnRlcik7XFxuICAgICAgaWYgKGJ5ZU1zZykgX3RoaXMuaGVsbG9PYmp0UmVwb3J0ZXIuZGF0YS5oZWxsbyA9IGJ5ZU1zZztlbHNlIHtcXG4gICAgICAgIF90aGlzLmhlbGxvT2JqdFJlcG9ydGVyLmRhdGEuaGVsbG8gPSBcXFwiYnllLCBieWVcXFwiO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJvblJlcG9ydGVyUmVzdW1lXFxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVwb3J0ZXJSZXN1bWUoY2FsbGJhY2spIHtcXG4gICAgICB0aGlzLl9vblJlcG9ydGVyUmVzdW1lID0gY2FsbGJhY2s7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwiZGVzY3JpcHRvclxcXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBoeXBlcnR5RGVzY3JpcHRvcjtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFxcXCJuYW1lXFxcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIGh5cGVydHlEZXNjcmlwdG9yLm5hbWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcXFwicnVudGltZUh5cGVydHlVUkxcXFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fcnVudGltZUh5cGVydHlVUkw7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBIZWxsb1dvcmxkUmVwb3J0ZXI7XFxufSgpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcXFwiZGVmYXVsdFxcXCJdID0gKEhlbGxvV29ybGRSZXBvcnRlcik7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTR2WkdWMkxXaDVjR1Z5ZEhrdmMzSmpMMmhsYkd4dkxYZHZjbXhrTDBobGJHeHZWMjl5YkdSU1pYQnZjblJsY2k1b2VTNXFjejh4WXpjNUlsMHNJbTVoYldWeklqcGJJbWg1Y0dWeWRIbEVaWE5qY21sd2RHOXlJaXdpU0dWc2JHOVhiM0pzWkZKbGNHOXlkR1Z5SWl3aWFIbHdaWEowZVZWU1RDSXNJbUoxY3lJc0ltTnZibVpwWjNWeVlYUnBiMjRpTENKbVlXTjBiM0o1SWl3aVJYSnliM0lpTENKZmRHaHBjeUlzSW1SdmJXRnBiaUlzSW1ScGRtbGtaVlZTVENJc0lsOWtiMjFoYVc0aUxDSmZiMkpxWldOMFJHVnpZMVZTVENJc0lsOW1ZV04wYjNKNUlpd2lYMkpoWTJ0MWNDSXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2lZbUZqYTNWd0lpd2lZMjl1YzI5c1pTSXNJbXh2WnlJc0luTjVibU5vWlhJaUxDSmpjbVZoZEdWVGVXNWphR1Z5SWl3aVgzTjVibU5vWlhJaUxDSmZjblZ1ZEdsdFpVaDVjR1Z5ZEhsVlVrd2lMQ0pRY205dGFYTmxJaXdpY21WemIyeDJaU0lzSW5KbGFtVmpkQ0lzSW1sdWNIVjBJaXdpVDJKcVpXTjBJaXdpWVhOemFXZHVJaXdpY21WemIzVnlZMlZ6SWl3aWNtVjFjMlZWVWt3aUxDSnRkWFIxWVd3aUxDSmtiMjFoYVc1ZmNtVm5hWE4wY21GMGFXOXVJaXdpWTNKbFlYUmxJaXdpYUdWc2JHOGlMQ0owYUdWdUlpd2lhR1ZzYkc5UFltcDBVbVZ3YjNKMFpYSWlMQ0pwYm1adklpd2ljSEpsY0dGeVpVUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNpSXNJbU5oZEdOb0lpd2ljbVZoYzI5dUlpd2laWEp5YjNJaUxDSnZibE4xWW5OamNtbHdkR2x2YmlJc0ltVjJaVzUwSWl3aVlXTmpaWEIwSWl3aWIyNVNaV0ZrSWl3aVlubGxUWE5uSWl3aVpHRjBZU0lzSW1OaGJHeGlZV05ySWl3aVgyOXVVbVZ3YjNKMFpYSlNaWE4xYldVaUxDSnVZVzFsSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096dEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUlVFc1NVRkJUVUVzYVVKQlFXbENMRWRCUVVjN1FVRkRlRUlzVlVGQlVTeHZRa0ZFWjBJN1FVRkZlRUlzWTBGQldTeFpRVVpaTzBGQlIzaENMR1ZCUVdFc1JVRklWenRCUVVsNFFpeHRRa0ZCYVVJc1JVRktUenRCUVUxNFFpeHBRa0ZCWlR0QlFVTmlMR1ZCUVZjN1FVRkVSU3hIUVU1VE8wRkJVM2hDTEdsQ1FVRmxMRU5CUTJJc1QwRkVZU3hEUVZSVE8wRkJXWGhDTEdsQ1FVRmxMRU5CUTJJc09FUkJSR0U3UVVGYVV5eERRVUV4UWp0QlFXZENRVHM3T3pzN08wbEJTMDFETEd0Q096czdRVUZGU2pzN096dEJRVXRCTEdkRFFVRmpPMEZCUVVFN1FVRkZaRHM3T3pzeVFrRkZUME1zVlN4RlFVRlpReXhITEVWQlFVdERMR0VzUlVGQlpVTXNUeXhGUVVGVE8wRkJSVGxETEZWQlFVa3NRMEZCUTBnc1ZVRkJUQ3hGUVVGcFFpeE5RVUZOTEVsQlFVbEpMRXRCUVVvc1EwRkJWU3h6UTBGQlZpeERRVUZPTzBGQlEycENMRlZCUVVrc1EwRkJRMGdzUjBGQlRDeEZRVUZWTEUxQlFVMHNTVUZCU1Vjc1MwRkJTaXhEUVVGVkxHMURRVUZXTEVOQlFVNDdRVUZEVml4VlFVRkpMRU5CUVVOR0xHRkJRVXdzUlVGQmIwSXNUVUZCVFN4SlFVRkpSU3hMUVVGS0xFTkJRVlVzZVVOQlFWWXNRMEZCVGp0QlFVTndRaXhWUVVGSkxFTkJRVU5FTEU5QlFVd3NSVUZCWXl4TlFVRk5MRWxCUVVsRExFdEJRVW9zUTBGQlZTeHRRMEZCVml4RFFVRk9PenRCUVVWa0xGVkJRVWxETEV0QlFVc3NSMEZCUnl4SlFVRmFPenRCUVVWQkxGVkJRVWxETEUxQlFVMHNSMEZCUjBnc1QwRkJUeXhEUVVGRFNTeFRRVUZTTEVOQlFXdENVQ3hWUVVGc1FpeEZRVUU0UWswc1RVRkJNME03UVVGRFFVUXNWMEZCU3l4RFFVRkRSeXhQUVVGT0xFZEJRV2RDUml4TlFVRm9RanRCUVVOQlJDeFhRVUZMTEVOQlFVTkpMR05CUVU0c1IwRkJkVUlzYlVOQlFXMURTQ3hOUVVGdVF5eEhRVUUwUXl3NFEwRkJia1U3UVVGRFFVUXNWMEZCU3l4RFFVRkRTeXhSUVVGT0xFZEJRV2xDVUN4UFFVRnFRanRCUVVOQlJTeFhRVUZMTEVOQlFVTk5MRTlCUVU0c1IwRkJaMEpVTEdGQlFXRXNRMEZCUTFVc1kwRkJaQ3hEUVVFMlFpeFJRVUUzUWl4SlFVRjVRMVlzWVVGQllTeERRVUZEVnl4TlFVRjJSQ3hIUVVGblJTeExRVUZvUmp0QlFVVkJReXhoUVVGUExFTkJRVU5ETEVkQlFWSXNRMEZCV1N4clEwRkJXaXhGUVVGblJHSXNZVUZCYUVRN08wRkJSVUVzVlVGQlNXTXNUMEZCVHl4SFFVRkhXQ3hMUVVGTExFTkJRVU5MTEZGQlFVNHNRMEZCWlU4c1lVRkJaaXhEUVVFMlFtcENMRlZCUVRkQ0xFVkJRWGxEUXl4SFFVRjZReXhGUVVFNFEwTXNZVUZCT1VNc1EwRkJaRHM3UVVGRlFVY3NWMEZCU3l4RFFVRkRZU3hSUVVGT0xFZEJRV2xDUml4UFFVRnFRanRCUVVWQldDeFhRVUZMTEVOQlFVTmpMR3RDUVVGT0xFZEJRVEpDYmtJc1ZVRkJNMEk3UVVGRlFUczdPenM3T3pzN096czdPMEZCYjBKRU96czdPMEZCWTBRN096czdNRUpCUzAxQkxGVXNSVUZCV1R0QlFVTm9RaXhWUVVGSlN5eExRVUZMTEVkQlFVY3NTVUZCV2pzN1FVRkRRU3hWUVVGSlZ5eFBRVUZQTEVkQlFVZFlMRXRCUVVzc1EwRkJRMkVzVVVGQmNFSTdRVUZGUVN4aFFVRlBMRWxCUVVsRkxFOUJRVW9zUTBGQldTeFZRVUZUUXl4UFFVRlVMRVZCUVd0Q1F5eE5RVUZzUWl4RlFVRXdRanRCUVVVelF5eFpRVUZKUXl4TFFVRkxMRWRCUVVkRExFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpPMEZCUVVORExHMUNRVUZUTEVWQlFVVXNRMEZCUXl4UFFVRkVPMEZCUVZvc1UwRkJaQ3hGUVVGelF5eEZRVUYwUXl4RFFVRmFPMEZCUTBGSUxHRkJRVXNzUTBGQlExWXNUVUZCVGl4SFFVRmxVaXhMUVVGTExFTkJRVU5OTEU5QlFYSkNPMEZCUTBGWkxHRkJRVXNzUTBGQlEwa3NVVUZCVGl4SFFVRnBRaXhKUVVGcVFqdEJRVU5CU2l4aFFVRkxMRU5CUVVOTExFMUJRVTRzUjBGQlpTeExRVUZtTzBGQlEwRk1MR0ZCUVVzc1EwRkJRMDBzYlVKQlFVNHNSMEZCTkVJc1MwRkJOVUk3UVVGRlFXSXNaVUZCVHl4RFFVRkRZeXhOUVVGU0xFTkJRV1Y2UWl4TFFVRkxMRU5CUVVOSkxHTkJRWEpDTEVWQlFYRkRMRU5CUVVOVUxGVkJRVVFzUTBGQmNrTXNSVUZCYlVRclFpeDFSRUZCYmtRc1JVRkJNRVFzU1VGQk1VUXNSVUZCWjBVc1MwRkJhRVVzUlVGQmRVVXNUMEZCZGtVc1JVRkJaMFlzUlVGQmFFWXNSVUZCYjBaU0xFdEJRWEJHTEVWQlFUSkdVeXhKUVVFelJpeERRVUZuUnl4VlFVRlRReXhwUWtGQlZDeEZRVUUwUWp0QlFVTXhTRzVDTEdsQ1FVRlBMRU5CUVVOdlFpeEpRVUZTTEVOQlFXRXNiMFJCUVdJc1JVRkJiVVZFTEdsQ1FVRnVSVHRCUVVWQk5VSXNaVUZCU3l4RFFVRkRORUlzYVVKQlFVNHNSMEZCTUVKQkxHbENRVUV4UWpzN1FVRkZRVFZDTEdWQlFVc3NRMEZCUXpoQ0xIbENRVUZPTEVOQlFXZERSaXhwUWtGQmFFTTdPMEZCUlVGYUxHbENRVUZQTEVOQlFVTlpMR2xDUVVGRUxFTkJRVkE3UVVGRlJDeFRRVlJFTEVWQlZVTkhMRXRCVmtRc1EwRlZUeXhWUVVGVFF5eE5RVUZVTEVWQlFXbENPMEZCUTNSQ2RrSXNhVUpCUVU4c1EwRkJRM2RDTEV0QlFWSXNRMEZCWTBRc1RVRkJaRHRCUVVOQlppeG5Ra0ZCVFN4RFFVRkRaU3hOUVVGRUxFTkJRVTQ3UVVGRFJDeFRRV0pFTzBGQlpVUXNUMEYyUWswc1EwRkJVRHRCUVhkQ1JEczdPemhEUVVWNVFrb3NhVUlzUlVGQmJVSTdRVUZGTTBOQkxIVkNRVUZwUWl4RFFVRkRUU3hqUVVGc1FpeERRVUZwUXl4VlFVRlRReXhMUVVGVUxFVkJRV2RDTzBGQlF5OURNVUlzWlVGQlR5eERRVUZEYjBJc1NVRkJVaXhEUVVGaExEQkZRVUZpTEVWQlJDdERMRU5CUnk5RE96dEJRVVZCVFN4aFFVRkxMRU5CUVVORExFMUJRVTQ3UVVGRFJDeFBRVTVFTzBGQlVVRlNMSFZDUVVGcFFpeERRVUZEVXl4TlFVRnNRaXhEUVVGNVFpeFZRVUZEUml4TFFVRkVMRVZCUVZjN1FVRkRiRU5CTEdGQlFVc3NRMEZCUTBNc1RVRkJUanRCUVVORUxFOUJSa1E3UVVGSlJEdEJRVVZFT3pzN096czdPM2RDUVV0SlJTeE5MRVZCUVZFN1FVRkRWaXhWUVVGSmRFTXNTMEZCU3l4SFFVRkhMRWxCUVZvN08wRkJSVUZUTEdGQlFVOHNRMEZCUTBNc1IwRkJVaXhEUVVGWkxFMUJRVm9zUlVGQmIwSldMRXRCUVVzc1EwRkJRelJDTEdsQ1FVRXhRanRCUVVWQkxGVkJRVWxWTEUxQlFVb3NSVUZEUlhSRExFdEJRVXNzUTBGQlF6UkNMR2xDUVVGT0xFTkJRWGRDVnl4SlFVRjRRaXhEUVVFMlFtSXNTMEZCTjBJc1IwRkJjVU5aTEUxQlFYSkRMRU5CUkVZc1MwRkZTenRCUVVOSWRFTXNZVUZCU3l4RFFVRkRORUlzYVVKQlFVNHNRMEZCZDBKWExFbEJRWGhDTEVOQlFUWkNZaXhMUVVFM1FpeEhRVUZ4UXl4VlFVRnlRenRCUVVORE8wRkJRMG83T3p0eFEwRkZaMEpqTEZFc1JVRkJWVHRCUVVONlFpeFhRVUZMUXl4cFFrRkJUQ3hIUVVGNVFrUXNVVUZCZWtJN1FVRkRSRHM3TzNkQ1FXeEdaMEk3UVVGRFppeGhRVUZQTDBNc2FVSkJRVkE3UVVGRFJEczdPM2RDUVVWVk8wRkJRMVFzWVVGQlQwRXNhVUpCUVdsQ0xFTkJRVU5wUkN4SlFVRjZRanRCUVVORU96czdkMEpCUlhOQ08wRkJRM0pDTEdGQlFVOHNTMEZCU3pWQ0xHdENRVUZhTzBGQlEwUTdPenM3T3p0QlFUWkZXWEJDTEdsR1FVRm1JaXdpWm1sc1pTSTZJakF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUJxYzJocGJuUWdkVzVrWldZNklIUnlkV1VnS2k5Y2NseHVYSEpjYmk4dmFXMXdiM0owSUh0VGVXNWphR1Z5ZlNCbWNtOXRJQ2R6WlhKMmFXTmxMV1p5WVcxbGQyOXlheTlrYVhOMEwxTjVibU5vWlhJbk8xeHlYRzR2TDJsdGNHOXlkQ0I3WkdsMmFXUmxWVkpNZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeTkxZEdsc2N5YzdYSEpjYm1sdGNHOXlkQ0JvWld4c2J5Qm1jbTl0SUNjdUwyaGxiR3h2Snp0Y2NseHVYSEpjYm1OdmJuTjBJR2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlJRDBnZTF4eVhHNGdJRndpYm1GdFpWd2lPaUJjSWtobGJHeHZWMjl5YkdSU1pYQnZjblJsY2x3aUxGeHlYRzRnSUZ3aWJHRnVaM1ZoWjJWY0lqb2dYQ0pxWVhaaGMyTnlhWEIwWENJc1hISmNiaUFnWENKemFXZHVZWFIxY21WY0lqb2dYQ0pjSWl4Y2NseHVJQ0JjSW1OdmJtWnBaM1Z5WVhScGIyNWNJam9nZTF4eVhHNGdJSDBzWEhKY2JpQWdYQ0pqYjI1emRISmhhVzUwYzF3aU9pQjdYSEpjYmlBZ0lDQmNJbUp5YjNkelpYSmNJam9nZEhKMVpWeHlYRzRnSUgwc1hISmNiaUFnWENKb2VYQmxjblI1Vkhsd1pWd2lPaUJiWEhKY2JpQWdJQ0JjSW1obGJHeHZYQ0pjY2x4dUlDQmRMRnh5WEc0Z0lGd2laR0YwWVU5aWFtVmpkSE5jSWpvZ1cxeHlYRzRnSUNBZ1hDSm9kSFJ3Y3pvdkx5VmtiMjFoYVc0bEx5NTNaV3hzTFd0dWIzZHVMMlJoZEdGelkyaGxiV0V2U0dWc2JHOVhiM0pzWkVSaGRHRlRZMmhsYldGY0lseHlYRzRnSUYxY2NseHVmVHRjY2x4dUx5b3FYSEpjYmlvZ1NIbHdaWEowZVNCRGIyNXVaV04wYjNJN1hISmNiaW9nUUdGMWRHaHZjaUJRWVhWc2J5QkRhR0ZwYm1odklGdHdZWFZzYnkxbkxXTm9ZV2x1YUc5QWRHVnNaV052YlM1d2RGMWNjbHh1S2lCQWRtVnljMmx2YmlBd0xqRXVNRnh5WEc0cUwxeHlYRzVqYkdGemN5QklaV3hzYjFkdmNteGtVbVZ3YjNKMFpYSWdlMXh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QklaV3hzYjFkdmNteGtVbVZ3YjNKMFpYSmNjbHh1SUNBcUlFQndZWEpoYlNBZ2UxTjVibU5vWlhKOUlITjVibU5vWlhJZ0xTQlRlVzVqYUdWeUlIQnliM1pwWkdWa0lHWnliMjBnZEdobElISjFiblJwYldVZ1kyOXlaVnh5WEc0Z0lDb3ZYSEpjYmx4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHlYRzVjY2x4dUlIMWNjbHh1WEhKY2JpQWdYM04wWVhKMEtHaDVjR1Z5ZEhsVlVrd3NJR0oxY3l3Z1kyOXVabWxuZFhKaGRHbHZiaXdnWm1GamRHOXllU2tnZTF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doYUhsd1pYSjBlVlZTVENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdhSGx3WlhKMGVWVlNUQ0JwY3lCaElHNWxaV1JsWkNCd1lYSmhiV1YwWlhJbktUdGNjbHh1SUNBZ0lHbG1JQ2doWW5WektTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JOYVc1cFFuVnpJR2x6SUdFZ2JtVmxaR1ZrSUhCaGNtRnRaWFJsY2ljcE8xeHlYRzRnSUNBZ2FXWWdLQ0ZqYjI1bWFXZDFjbUYwYVc5dUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JqYjI1bWFXZDFjbUYwYVc5dUlHbHpJR0VnYm1WbFpHVmtJSEJoY21GdFpYUmxjaWNwTzF4eVhHNGdJQ0FnYVdZZ0tDRm1ZV04wYjNKNUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JtWVdOMGIzSjVJR2x6SUdFZ2JtVmxaR1ZrSUhCaGNtRnRaWFJsY2ljcE8xeHlYRzVjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHUnZiV0ZwYmlBOUlHWmhZM1J2Y25rdVpHbDJhV1JsVlZKTUtHaDVjR1Z5ZEhsVlVrd3BMbVJ2YldGcGJqdGNjbHh1SUNBZ0lGOTBhR2x6TGw5a2IyMWhhVzRnUFNCa2IyMWhhVzQ3WEhKY2JpQWdJQ0JmZEdocGN5NWZiMkpxWldOMFJHVnpZMVZTVENBOUlDZG9lWEJsY25SNUxXTmhkR0ZzYjJkMVpUb3ZMMk5oZEdGc2IyZDFaUzRuSUNzZ1pHOXRZV2x1SUNzZ0p5OHVkMlZzYkMxcmJtOTNiaTlrWVhSaGMyTm9aVzFoTDBobGJHeHZWMjl5YkdSRVlYUmhVMk5vWlcxaEp6dGNjbHh1SUNBZ0lGOTBhR2x6TGw5bVlXTjBiM0o1SUQwZ1ptRmpkRzl5ZVR0Y2NseHVJQ0FnSUY5MGFHbHpMbDlpWVdOcmRYQWdQU0JqYjI1bWFXZDFjbUYwYVc5dUxtaGhjMDkzYmxCeWIzQmxjblI1S0NkaVlXTnJkWEFuS1NBL0lHTnZibVpwWjNWeVlYUnBiMjR1WW1GamEzVndJRG9nWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owaGxiR3h2VjI5eWJHUlNaWEJ2Y25SbGNpQmpiMjVtYVdkMWNtRjBhVzl1Snl3Z1kyOXVabWxuZFhKaGRHbHZiaWs3WEhKY2JseHlYRzRnSUNBZ2JHVjBJSE41Ym1Ob1pYSWdQU0JmZEdocGN5NWZabUZqZEc5eWVTNWpjbVZoZEdWVGVXNWphR1Z5S0doNWNHVnlkSGxWVWt3c0lHSjFjeXdnWTI5dVptbG5kWEpoZEdsdmJpazdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM041Ym1Ob1pYSWdQU0J6ZVc1amFHVnlPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDl5ZFc1MGFXMWxTSGx3WlhKMGVWVlNUQ0E5SUdoNWNHVnlkSGxWVWt3N1hISmNibHh5WEc0Z0lDQWdMeXBmZEdocGN5NWZjM2x1WTJobGNpNXlaWE4xYldWU1pYQnZjblJsY25Nb2UzMHBMblJvWlc0b0tISmxjM1Z0WlZKbGNHOXlkR1Z5Y3lrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLQ0Z5WlhOMWJXVlNaWEJ2Y25SbGNuTXBJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklHeGxkSE1nYm05M0lHOWljMlZ5ZG1VZ1lXNTVJR05vWVc1blpYTWdaRzl1WlNCcGJpQklaV3hzYnlCWGIzSnNaQ0JQWW1wbFkzUmNjbHh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0b2VYQmxjblI1SUhONWJtTm9aWElnY21WemRXMWxYU0F0SUdSaGRHRlBZbXBsWTNRbkxDQnlaWE4xYldWU1pYQnZjblJsY25NcE8xeHlYRzVjY2x4dUlDQWdJQ0FnVDJKcVpXTjBMblpoYkhWbGN5aHlaWE4xYldWU1pYQnZjblJsY25NcExtWnZja1ZoWTJnb0tHaGxiR3h2VDJKcWRGSmxjRzl5ZEdWeUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1gzUm9hWE11YUdWc2JHOVBZbXAwVW1Wd2IzSjBaWElnUFNCb1pXeHNiMDlpYW5SU1pYQnZjblJsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbVZ3WVhKbFJHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUtHaGxiR3h2VDJKcWRGSmxjRzl5ZEdWeUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FHVnNiRzlQWW1wMFVtVndiM0owWlhJdVpHRjBZUzVvWld4c2J5QTlJQ2RTUlZCUFVsUkZVaUJTUlZOVlRVVkVKenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvZEdocGN5NWZiMjVTWlhCdmNuUmxjbEpsYzNWdFpTazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDI5dVVtVndiM0owWlhKU1pYTjFiV1VwSUhSb2FYTXVYMjl1VW1Wd2IzSjBaWEpTWlhOMWJXVW9hR1ZzYkc5UFltcDBVbVZ3YjNKMFpYSXBPMXh5WEc0Z0lDQWdJQ0I5S1Z4eVhHNWNjbHh1SUNBZ0lIMHBPeW92WEhKY2JseHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJR1JsYzJOeWFYQjBiM0lvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYUhsd1pYSjBlVVJsYzJOeWFYQjBiM0k3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JuWlhRZ2JtRnRaU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaTV1WVcxbE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJSEoxYm5ScGJXVkllWEJsY25SNVZWSk1LQ2w3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNuVnVkR2x0WlVoNWNHVnlkSGxWVWt3N1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlFTnlaV0YwWlNCSVpXeHNiMWR2Y214a0lFUmhkR0VnVDJKcVpXTjBYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEllWEJsY25SNVZWSk1mU0JJZVhCbGNuUjVWVkpNSUMwZ1NXNTJhWFJsWkZ4eVhHNGdJQ292WEhKY2JseHlYRzRnSUdobGJHeHZLR2g1Y0dWeWRIbFZVa3dwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0JzWlhRZ2MzbHVZMmhsY2lBOUlGOTBhR2x6TGw5emVXNWphR1Z5TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQnBibkIxZENBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTNKbGMyOTFjbU5sY3pvZ1d5ZG9aV3hzYnlkZGZTd2dlMzBwTzF4eVhHNGdJQ0FnSUNCcGJuQjFkQzVpWVdOcmRYQWdQU0JmZEdocGN5NWZZbUZqYTNWd08xeHlYRzRnSUNBZ0lDQnBibkIxZEM1eVpYVnpaVlZTVENBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUdsdWNIVjBMbTExZEhWaGJDQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQnBibkIxZEM1a2IyMWhhVzVmY21WbmFYTjBjbUYwYVc5dUlEMGdabUZzYzJVN1hISmNibHh5WEc0Z0lDQWdJQ0J6ZVc1amFHVnlMbU55WldGMFpTaGZkR2hwY3k1ZmIySnFaV04wUkdWelkxVlNUQ3dnVzJoNWNHVnlkSGxWVWt4ZExDQm9aV3hzYnl3Z2RISjFaU3dnWm1Gc2MyVXNJQ2RvWld4c2J5Y3NJSHQ5TENCcGJuQjFkQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaG9aV3hzYjA5aWFuUlNaWEJ2Y25SbGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25NUzRnVW1WMGRYSnVJRU55WldGMFpXUWdTR1ZzYkc4Z1YyOXliR1FnUkdGMFlTQlBZbXBsWTNRZ1VtVndiM0owWlhJbkxDQm9aV3hzYjA5aWFuUlNaWEJ2Y25SbGNpazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG1obGJHeHZUMkpxZEZKbGNHOXlkR1Z5SUQwZ2FHVnNiRzlQWW1wMFVtVndiM0owWlhJN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkJ5WlhCaGNtVkVZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSW9hR1ZzYkc5UFltcDBVbVZ3YjNKMFpYSXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHaGxiR3h2VDJKcWRGSmxjRzl5ZEdWeUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDNWpZWFJqYUNobWRXNWpkR2x2YmloeVpXRnpiMjRwSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0hKbFlYTnZiaWs3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0hKbGNHRnlaVVJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaWhvWld4c2IwOWlhblJTWlhCdmNuUmxjaWtnZTF4eVhHNWNjbHh1SUNBZ0lHaGxiR3h2VDJKcWRGSmxjRzl5ZEdWeUxtOXVVM1ZpYzJOeWFYQjBhVzl1S0daMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEhKY2JpQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25MUzB0TFMwdExTMGdTR1ZzYkc4Z1YyOXliR1FnVW1Wd2IzSjBaWElnY21WalpXbDJaV1FnYzNWaWMyTnlhWEIwYVc5dUlISmxjWFZsYzNRZ0xTMHRMUzB0TFMwdElGeGNiaWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnUVd4c0lITjFZbk5qY21sd2RHbHZiaUJ5WlhGMVpYTjBaV1FnWVhKbElHRmpZMlZ3ZEdWa1hISmNibHh5WEc0Z0lDQWdJQ0JsZG1WdWRDNWhZMk5sY0hRb0tUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUdobGJHeHZUMkpxZEZKbGNHOXlkR1Z5TG05dVVtVmhaQ2dvWlhabGJuUXBJRDArSUh0Y2NseHVJQ0FnSUNBZ1pYWmxiblF1WVdOalpYQjBLQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRlZ3WkdGMFpTQklaV3hzYjFkdmNteGtJRVJoZEdFZ1QySnFaV04wWEhKY2JpQWdLbHh5WEc0Z0lDb3ZYSEpjYmx4eVhHNGdJR0o1WlNoaWVXVk5jMmNwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMko1WlRvbkxDQmZkR2hwY3k1b1pXeHNiMDlpYW5SU1pYQnZjblJsY2lBcE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoaWVXVk5jMmNwWEhKY2JpQWdJQ0FnSUY5MGFHbHpMbWhsYkd4dlQySnFkRkpsY0c5eWRHVnlMbVJoZEdFdWFHVnNiRzhnUFNCaWVXVk5jMmM3WEhKY2JpQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdYM1JvYVhNdWFHVnNiRzlQWW1wMFVtVndiM0owWlhJdVpHRjBZUzVvWld4c2J5QTlJRndpWW5sbExDQmllV1ZjSWp0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2IyNVNaWEJ2Y25SbGNsSmxjM1Z0WlNoallXeHNZbUZqYXlrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmYjI1U1pYQnZjblJsY2xKbGMzVnRaU0E5SUdOaGJHeGlZV05yTzF4eVhHNGdJSDFjY2x4dVhISmNibHh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJWld4c2IxZHZjbXhrVW1Wd2IzSjBaWEk3WEhKY2JseHlYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z0xpNHZaR1YyTFdoNWNHVnlkSGt2YzNKakwyaGxiR3h2TFhkdmNteGtMMGhsYkd4dlYyOXliR1JTWlhCdmNuUmxjaTVvZVM1cWN5SmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMFxcblwiKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuZXZhbChcInZhciBoZWxsbyA9IHtcXG4gIG5hbWU6IFxcXCJoZWxsb1xcXCIsXFxuICBoZWxsbzogXFxcIkhlbGxvIGJ1ZGR5ISFcXFwiXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXFxcImFcXFwiXSA9IChoZWxsbyk7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTR2WkdWMkxXaDVjR1Z5ZEhrdmMzSmpMMmhsYkd4dkxYZHZjbXhrTDJobGJHeHZMbXB6UHpWa09EWWlYU3dpYm1GdFpYTWlPbHNpYUdWc2JHOGlMQ0p1WVcxbElsMHNJbTFoY0hCcGJtZHpJam9pUVVGRlFTeEpRVUZKUVN4TFFVRkxMRWRCUVVjN1FVRkRWa01zVFVGQlNTeEZRVUZGTEU5QlJFazdRVUZGVmtRc1QwRkJTeXhGUVVGRk8wRkJSa2NzUTBGQldqdEJRVXRsUVN3NFJFRkJaaUlzSW1acGJHVWlPaUl4TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYSEpjYmx4eVhHNXNaWFFnYUdWc2JHOGdQU0I3WEhKY2JpQWdibUZ0WlRvZ1hDSm9aV3hzYjF3aUxGeHlYRzRnSUdobGJHeHZPaUJjSWtobGJHeHZJR0oxWkdSNUlTRmNJbHh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnYUdWc2JHODdYSEpjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMaTlrWlhZdGFIbHdaWEowZVM5emNtTXZhR1ZzYkc4dGQyOXliR1F2YUdWc2JHOHVhbk1pWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzFcXG5cIik7XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKVtcImRlZmF1bHRcIl07XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvaHlwZXJ0aWVzL0hlbGxvV29ybGRSZXBvcnRlci5oeS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});