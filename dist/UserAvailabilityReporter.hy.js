(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ReporterHypertyDescriptor__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__availability_js__ = __webpack_require__(2);\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/**\\r\\n* Copyright 2016 PT Inovação e Sistemas SA\\r\\n* Copyright 2016 INESC-ID\\r\\n* Copyright 2016 QUOBIS NETWORKS SL\\r\\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\\r\\n* Copyright 2016 ORANGE SA\\r\\n* Copyright 2016 Deutsche Telekom AG\\r\\n* Copyright 2016 Apizee\\r\\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\\r\\n*\\r\\n* Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n* you may not use this file except in compliance with the License.\\r\\n* You may obtain a copy of the License at\\r\\n*\\r\\n*   http://www.apache.org/licenses/LICENSE-2.0\\r\\n*\\r\\n* Unless required by applicable law or agreed to in writing, software\\r\\n* distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n* See the License for the specific language governing permissions and\\r\\n* limitations under the License.\\r\\n**/\\n// Service Framework\\n//import {Discovery} from 'service-framework/dist/Discovery';\\n//import IdentityManager from 'service-framework/dist/IdentityManager';\\n//import {Syncher} from 'service-framework/dist/Syncher';\\n//import {ContextReporter} from 'service-framework/dist/ContextManager';\\n// Utils\\n//import EventEmitter from '../utils/EventEmitter.js';\\n//import {divideURL} from '../utils/utils.js';\\n//import URI from 'urijs';\\n\\n\\n/**\\r\\n* Hyperty User Availability;\\r\\n* @author Paulo Chainho  [paulo-g-chainho@alticelabs.com]\\r\\n* @version 0.1.0\\r\\n*/\\n\\nvar UserAvailabilityReporter =\\n/*#__PURE__*/\\nfunction () {\\n  function UserAvailabilityReporter() {\\n    _classCallCheck(this, UserAvailabilityReporter);\\n  }\\n\\n  _createClass(UserAvailabilityReporter, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, configuration, factory) {\\n      var _this2 = this;\\n\\n      this.hypertyURL = hypertyURL;\\n      this._context = factory.createContextReporter(hypertyURL, bus, configuration);\\n\\n      var _this = this;\\n\\n      console.info('[UserAvailabilityReporter] started with url: ', hypertyURL); //    this.syncher = new Syncher(hypertyURL, bus, configuration);\\n      //    this.discovery = new Discovery(hypertyURL, bus);\\n\\n      this.identityManager = factory.createIdentityManager(hypertyURL, configuration.runtimeURL, bus);\\n      /*    this.domain = divideURL(hypertyURL).domain;\\r\\n      \\r\\n          this.userAvailabilityyDescURL = 'hyperty-catalogue://catalogue.' + this.domain + '/.well-known/dataschema/Context';\\r\\n      */\\n      //    this.heartbeat = [];\\n\\n      this.context.syncher.onNotification(function (event) {\\n        var _this = _this2;\\n\\n        _this.context.processNotification(event);\\n      });\\n      /*    this.syncher.onClose((event) => {\\r\\n      \\r\\n            console.log('[UserAvailabilityReporter.onClose]')\\r\\n            let _this = this;\\r\\n            _this.setStatus('unavailable');\\r\\n            event.ack();\\r\\n          });*/\\n    }\\n  }, {\\n    key: \\\"start\\\",\\n    value: function start() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve, reject) {\\n        console.log('[UserAvailabilityReporter.starting]');\\n\\n        _this.context.syncher.resumeReporters({\\n          store: true\\n        }).then(function (reporters) {\\n          var reportersList = Object.keys(reporters);\\n\\n          if (reportersList.length > 0) {\\n            //TODO: filter from contexts instead of returning context[0]\\n            _this.context.contexts['myAvailability'] = _this._filterResumedContexts(reporters);\\n            console.log('[UserAvailabilityReporter.start] resuming ', _this.context.contexts['myAvailability']); // set availability to available\\n\\n            _this.context._onSubscription(_this.context.contexts['myAvailability']);\\n            /*      _this.userAvailability = reporters[reportersList[0]];\\r\\n            \\r\\n                  _this._onSubscription(_this.userAvailability);*/\\n\\n\\n            resolve(_this.context.contexts['myAvailability']);\\n          } else {\\n            console.log('[UserAvailabilityReporter.start] nothing to resume ', reporters);\\n            var name = 'myAvailability';\\n            resolve(_this.create(name, Object(__WEBPACK_IMPORTED_MODULE_1__availability_js__[\\\"a\\\" /* default */])(), ['availability_context'], name));\\n          }\\n        }).catch(function (reason) {\\n          console.error('[UserAvailabilityReporter] Resume failed | ', reason);\\n        });\\n      }).catch(function (reason) {\\n        reject('[UserAvailabilityReporter] Start failed | ', reason);\\n      });\\n    } // return my resumed context\\n\\n  }, {\\n    key: \\\"_filterResumedContexts\\\",\\n    value: function _filterResumedContexts(reporters) {\\n      var _this3 = this;\\n\\n      var last = 0;\\n      return Object.keys(reporters).filter(function (reporter) {\\n        return reporters[reporter].metadata.reporter === _this3.context.syncher._owner;\\n      }).reduce(function (obj, key) {\\n        if (Date.parse(reporters[key].metadata.lastModified) > last) obj = reporters[key];\\n        return obj;\\n      }, {});\\n    }\\n  }, {\\n    key: \\\"onResumeReporter\\\",\\n    value: function onResumeReporter(callback) {\\n      var _this = this;\\n\\n      _this.context._onResumeReporter = callback;\\n    }\\n    /*\\r\\n      onNotification(event) {\\r\\n        let _this = this;\\r\\n        console.info('userAvailability Event Received: ', event);\\r\\n        console.log('from hyperty', event.from);\\r\\n    \\r\\n        event.ack();\\r\\n    \\r\\n      }*/\\n\\n    /**\\r\\n     * This function is used to create a new status object syncher\\r\\n     * @param  {URL.UserURL} contacts List of Users\\r\\n     * @return {Promise}\\r\\n     */\\n\\n  }, {\\n    key: \\\"create\\\",\\n    value: function create(id, init, resources) {\\n      var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'myContext';\\n      return this.context.create(id, init, resources, name);\\n    }\\n    /*  _onSubscription(userAvailability){\\r\\n        userAvailability.onSubscription((event) => {\\r\\n          console.info('[UserAvailabilityReporterReporter._onSubscription] accepting: ', event);\\r\\n          event.accept();\\r\\n        });\\r\\n      }*/\\n\\n  }, {\\n    key: \\\"setStatus\\\",\\n    value: function setStatus(newStatus) {\\n      //    _this.contexts[id].data.values[0].value;\\n      var newContext = [{\\n        value: newStatus\\n      }];\\n      return this._context.setContext('myAvailability', newContext);\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__ReporterHypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */].name;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__ReporterHypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */];\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this.hypertyURL;\\n    }\\n  }, {\\n    key: \\\"context\\\",\\n    get: function get() {\\n      return this._context;\\n    }\\n  }]);\\n\\n  return UserAvailabilityReporter;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (UserAvailabilityReporter);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return hypertyDescriptor; });\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"UserAvailabilityReporter\\\",\\n  \\\"configuration\\\": {\\n    \\\"expires\\\": 3600\\n  },\\n  \\\"hypertyType\\\": [\\\"availability_context\\\"],\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"dataObjects\\\": [\\\"https://catalogue.%domain%/.well-known/dataschema/ContextReporter\\\"]\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL3VzZXItYXZhaWxhYmlsaXR5L1JlcG9ydGVySHlwZXJ0eURlc2NyaXB0b3IuanM/MWMwMiJdLCJuYW1lcyI6WyJoeXBlcnR5RGVzY3JpcHRvciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBTyxJQUFJQSxpQkFBaUIsR0FBRztBQUM3QixVQUFRLDBCQURxQjtBQUU3QixtQkFBaUI7QUFBRSxlQUFXO0FBQWIsR0FGWTtBQUc3QixpQkFBZSxDQUNiLHNCQURhLENBSGM7QUFNN0IsaUJBQWU7QUFDYixlQUFXO0FBREUsR0FOYztBQVM3QixjQUFZLFlBVGlCO0FBVTdCLGVBQWEsRUFWZ0I7QUFXN0IsaUJBQWUsQ0FDYixtRUFEYTtBQVhjLENBQXhCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbGV0IGh5cGVydHlEZXNjcmlwdG9yID0ge1xyXG4gIFwibmFtZVwiOiBcIlVzZXJBdmFpbGFiaWxpdHlSZXBvcnRlclwiLFxyXG4gIFwiY29uZmlndXJhdGlvblwiOiB7IFwiZXhwaXJlc1wiOiAzNjAwIH0sXHJcbiAgXCJoeXBlcnR5VHlwZVwiOiBbXHJcbiAgICBcImF2YWlsYWJpbGl0eV9jb250ZXh0XCJcclxuICBdLFxyXG4gIFwiY29uc3RyYWludHNcIjoge1xyXG4gICAgXCJicm93c2VyXCI6IHRydWVcclxuICB9LFxyXG4gIFwibGFuZ3VhZ2VcIjogXCJqYXZhc2NyaXB0XCIsXHJcbiAgXCJzaWduYXR1cmVcIjogXCJcIixcclxuICBcImRhdGFPYmplY3RzXCI6IFtcclxuICAgIFwiaHR0cHM6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vZGF0YXNjaGVtYS9Db250ZXh0UmVwb3J0ZXJcIlxyXG4gIF1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LWh5cGVydHkvc3JjL3VzZXItYXZhaWxhYmlsaXR5L1JlcG9ydGVySHlwZXJ0eURlc2NyaXB0b3IuanMiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (function () {\\n  return Object.assign({}, {\\n    id: '_' + Math.random().toString(36).substr(2, 9),\\n    // do we need this?\\n    values: [{\\n      name: \\\"availability\\\",\\n      type: \\\"availability_status\\\",\\n      unit: \\\"pres\\\",\\n      value: \\\"available\\\"\\n    }]\\n  });\\n});\\n;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL3VzZXItYXZhaWxhYmlsaXR5L2F2YWlsYWJpbGl0eS5qcz8xYWQyIl0sIm5hbWVzIjpbIk9iamVjdCIsImFzc2lnbiIsImlkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwidmFsdWVzIiwibmFtZSIsInR5cGUiLCJ1bml0IiwidmFsdWUiXSwibWFwcGluZ3MiOiJBQUFlLHFFQUFXO0FBQ3RCLFNBQU9BLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0I7QUFDckJDLE1BQUUsRUFBRSxNQUFNQyxJQUFJLENBQUNDLE1BQUwsR0FBY0MsUUFBZCxDQUF1QixFQUF2QixFQUEyQkMsTUFBM0IsQ0FBa0MsQ0FBbEMsRUFBcUMsQ0FBckMsQ0FEVztBQUM2QjtBQUNsREMsVUFBTSxFQUFFLENBQUM7QUFDTEMsVUFBSSxFQUFFLGNBREQ7QUFFTEMsVUFBSSxFQUFFLHFCQUZEO0FBR0xDLFVBQUksRUFBRSxNQUhEO0FBSUxDLFdBQUssRUFBRTtBQUpGLEtBQUQ7QUFGYSxHQUFsQixDQUFQO0FBU0g7QUFBQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwge1xyXG4gICAgICAgIGlkOiAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSksLy8gZG8gd2UgbmVlZCB0aGlzP1xyXG4gICAgICAgIHZhbHVlczogW3tcclxuICAgICAgICAgICAgbmFtZTogXCJhdmFpbGFiaWxpdHlcIixcclxuICAgICAgICAgICAgdHlwZTogXCJhdmFpbGFiaWxpdHlfc3RhdHVzXCIsXHJcbiAgICAgICAgICAgIHVuaXQ6IFwicHJlc1wiLFxyXG4gICAgICAgICAgICB2YWx1ZTogXCJhdmFpbGFibGVcIlxyXG4gICAgICAgIH1dXHJcbiAgICB9KTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1oeXBlcnR5L3NyYy91c2VyLWF2YWlsYWJpbGl0eS9hdmFpbGFiaWxpdHkuanMiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});