(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_EventEmitter__ = __webpack_require__(1);\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/* jshint undef: true */\\n// import {Syncher} from 'service-framework/dist/Syncher';\\n// import {divideURL} from '../utils/utils';\\n //import helloWorldObserverDescriptor from './HelloWorldObserverDesc'\\n\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"HelloWorldObserver\\\",\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"configuration\\\": {},\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"hypertyType\\\": [\\\"hello\\\"],\\n  \\\"dataObjects\\\": [\\\"https://%domain%/.well-known/dataschema/HelloWorldDataSchema\\\"]\\n};\\n/**\\r\\n* Hello World Observer\\r\\n* @author Paulo Chainho [paulo-g-chainho@telecom.pt]\\r\\n* @version 0.1.0\\r\\n*/\\n\\nvar HelloWorldObserver =\\n/*#__PURE__*/\\nfunction (_EventEmitter) {\\n  _inherits(HelloWorldObserver, _EventEmitter);\\n\\n  /**\\r\\n  * Create a new HelloWorldObserver\\r\\n  * @param  {Syncher} syncher - Syncher provided from the runtime core\\r\\n  */\\n  function HelloWorldObserver() {\\n    _classCallCheck(this, HelloWorldObserver);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(HelloWorldObserver).call(this));\\n  }\\n\\n  _createClass(HelloWorldObserver, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, configuration, factory) {\\n      if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\\n      if (!bus) throw new Error('The MiniBus is a needed parameter');\\n      if (!configuration) throw new Error('The configuration is a needed parameter');\\n      if (!factory) throw new Error('The factory is a needed parameter');\\n\\n      var _this = this;\\n\\n      var domain = factory.divideURL(hypertyURL).domain;\\n      _this._domain = domain;\\n      _this._objectDescURL = 'hyperty-catalogue://catalogue.' + domain + '/.well-known/dataschema/HelloWorldDataSchema';\\n      var syncher = factory.createSyncher(hypertyURL, bus, configuration);\\n      syncher.onNotification(function (event) {\\n        _this._onNotification(event);\\n      });\\n      syncher.resumeObservers({}).then(function (resumedObservers) {\\n        if (!resumedObservers) return; // lets now observe any changes done in Hello World Object\\n\\n        console.log('[hyperty syncher resume] - dataObject', resumedObservers);\\n        Object.values(resumedObservers).forEach(function (helloObjtObserver) {\\n          _this._changes(helloObjtObserver);\\n\\n          helloObjtObserver.sync();\\n        });\\n      }).catch(function (reason) {\\n        console.log('[hyperty syncher resume] - ', reason);\\n      });\\n      _this._syncher = syncher;\\n      _this._runtimeHypertyURL = hypertyURL;\\n    }\\n  }, {\\n    key: \\\"_onNotification\\\",\\n    value: function _onNotification(event) {\\n      var _this = this;\\n\\n      console.info('Event Received: ', event);\\n\\n      _this.trigger('invitation', event.identity); // Acknowledge reporter about the Invitation was received\\n\\n\\n      event.ack();\\n      var input = {\\n        schema: _this._objectDescURL,\\n        resource: event.url,\\n        store: true,\\n        p2p: false,\\n        mutual: false\\n      }; // Subscribe Hello World Object\\n\\n      _this._syncher.subscribe(input).then(function (helloObjtObserver) {\\n        // Hello World Object was subscribed\\n        console.info(helloObjtObserver); // lets now observe any changes done in Hello World Object\\n\\n        console.log('[hyperty syncher subscribe] - dataObject', helloObjtObserver);\\n\\n        _this._changes(helloObjtObserver);\\n      }).catch(function (reason) {\\n        console.error(reason);\\n      });\\n    }\\n  }, {\\n    key: \\\"_changes\\\",\\n    value: function _changes(dataObject) {\\n      var _this2 = this;\\n\\n      console.log('[hyperty syncher] - dataObject', dataObject); // lets notify the App the subscription was accepted with the mnost updated version of Hello World Object\\n\\n      this.trigger('hello', dataObject.data);\\n      dataObject.onChange('*', function (event) {\\n        // Hello World Object was changed\\n        console.info('message received:', event);\\n\\n        if (event.field === 'hello') {\\n          // lets notify the App about the change\\n          _this2.trigger('hello', dataObject.data);\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return hypertyDescriptor;\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return hypertyDescriptor.name;\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this._runtimeHypertyURL;\\n    }\\n  }]);\\n\\n  return HelloWorldObserver;\\n}(__WEBPACK_IMPORTED_MODULE_0__utils_EventEmitter__[\\\"a\\\" /* default */]);\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (HelloWorldObserver);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/**\\r\\n * Copyright 2016 PT Inovação e Sistemas SA\\r\\n * Copyright 2016 INESC-ID\\r\\n * Copyright 2016 QUOBIS NETWORKS SL\\r\\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\\r\\n * Copyright 2016 ORANGE SA\\r\\n * Copyright 2016 Deutsche Telekom AG\\r\\n * Copyright 2016 Apizee\\r\\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n **/\\n\\n/**\\r\\n * EventEmitter\\r\\n * All classes which extends this, can have addEventListener and trigger events;\\r\\n */\\nvar EventEmitter =\\n/*#__PURE__*/\\nfunction () {\\n  /**\\r\\n   * Initializes the EventEmitter\\r\\n   */\\n  function EventEmitter() {\\n    _classCallCheck(this, EventEmitter);\\n\\n    // set up listener holder\\n    this.__eventListeners = {};\\n  }\\n  /**\\r\\n   * addEventListener listen for an eventType\\r\\n   * @param  {string}         eventType - listening for this type of event\\r\\n   * @param  {Function}       cb        - callback function will be executed when the event it is invoked\\r\\n   */\\n\\n\\n  _createClass(EventEmitter, [{\\n    key: \\\"addEventListener\\\",\\n    value: function addEventListener(eventType, cb) {\\n      // add callback to the list of callbacks for this type\\n      // if the list doesn't exist yet, create it with the callback as member\\n      if (cb != undefined) {\\n        if (!this.__eventListeners[eventType]) this.__eventListeners[eventType] = [cb];else this.__eventListeners[eventType].push(cb);\\n      }\\n    }\\n    /**\\r\\n     * Invoke the eventType\\r\\n     * @param  {string} eventType - event will be invoked\\r\\n     * @param  {object} params - parameters will be passed to the addEventListener\\r\\n     */\\n\\n  }, {\\n    key: \\\"trigger\\\",\\n    value: function trigger(eventType, params) {\\n      // check if there are callbacks for this type\\n      var callbacks = this.__eventListeners[eventType];\\n\\n      if (callbacks) {\\n        callbacks.forEach(function (cb) {\\n          // catch errors to make sure every callback is being called\\n          try {\\n            cb(params);\\n          } catch (e) {\\n            console.warn(\\\"calling listener \\\" + cb.name + \\\" for event type \\\" + eventType + \\\" with parameters '\\\" + params + \\\"' resulted in an error!\\\", e);\\n          }\\n        });\\n      }\\n    }\\n  }]);\\n\\n  return EventEmitter;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (EventEmitter);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL3V0aWxzL0V2ZW50RW1pdHRlci5qcz9kMzE4Il0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIl9fZXZlbnRMaXN0ZW5lcnMiLCJldmVudFR5cGUiLCJjYiIsInVuZGVmaW5lZCIsInB1c2giLCJwYXJhbXMiLCJjYWxsYmFja3MiLCJmb3JFYWNoIiwiZSIsImNvbnNvbGUiLCJ3YXJuIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7O0lBSU1BLFk7OztBQUVGOzs7QUFHQSwwQkFBYztBQUFBOztBQUNWO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsRUFBeEI7QUFDSDtBQUVEOzs7Ozs7Ozs7cUNBS2lCQyxTLEVBQVdDLEUsRUFBSTtBQUM1QjtBQUNBO0FBQ0EsVUFBSUEsRUFBRSxJQUFJQyxTQUFWLEVBQXFCO0FBQ2pCLFlBQUksQ0FBQyxLQUFLSCxnQkFBTCxDQUFzQkMsU0FBdEIsQ0FBTCxFQUNJLEtBQUtELGdCQUFMLENBQXNCQyxTQUF0QixJQUFtQyxDQUFDQyxFQUFELENBQW5DLENBREosS0FHSSxLQUFLRixnQkFBTCxDQUFzQkMsU0FBdEIsRUFBaUNHLElBQWpDLENBQXNDRixFQUF0QztBQUNQO0FBQ0o7QUFFRDs7Ozs7Ozs7NEJBS1FELFMsRUFBV0ksTSxFQUFRO0FBQ3ZCO0FBQ0EsVUFBSUMsU0FBUyxHQUFHLEtBQUtOLGdCQUFMLENBQXNCQyxTQUF0QixDQUFoQjs7QUFDQSxVQUFJSyxTQUFKLEVBQWU7QUFDWEEsaUJBQVMsQ0FBQ0MsT0FBVixDQUFrQixVQUFDTCxFQUFELEVBQVE7QUFDdEI7QUFDQSxjQUFJO0FBQ0FBLGNBQUUsQ0FBQ0csTUFBRCxDQUFGO0FBQ0gsV0FGRCxDQUVFLE9BQU9HLENBQVAsRUFBVTtBQUNSQyxtQkFBTyxDQUFDQyxJQUFSLENBQWEsc0JBQXNCUixFQUFFLENBQUNTLElBQXpCLEdBQWdDLGtCQUFoQyxHQUFxRFYsU0FBckQsR0FBaUUsb0JBQWpFLEdBQXdGSSxNQUF4RixHQUFpRyx5QkFBOUcsRUFBeUlHLENBQXpJO0FBQ0g7QUFDSixTQVBEO0FBUUg7QUFDSjs7Ozs7O0FBSVVULHFFQUFmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4gKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4gKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4gKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKiovXHJcblxyXG4vKipcclxuICogRXZlbnRFbWl0dGVyXHJcbiAqIEFsbCBjbGFzc2VzIHdoaWNoIGV4dGVuZHMgdGhpcywgY2FuIGhhdmUgYWRkRXZlbnRMaXN0ZW5lciBhbmQgdHJpZ2dlciBldmVudHM7XHJcbiAqL1xyXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIEV2ZW50RW1pdHRlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBzZXQgdXAgbGlzdGVuZXIgaG9sZGVyXHJcbiAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGRFdmVudExpc3RlbmVyIGxpc3RlbiBmb3IgYW4gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgZXZlbnRUeXBlIC0gbGlzdGVuaW5nIGZvciB0aGlzIHR5cGUgb2YgZXZlbnRcclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICBjYiAgICAgICAgLSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGV2ZW50IGl0IGlzIGludm9rZWRcclxuICAgICAqL1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNiKSB7XHJcbiAgICAgICAgLy8gYWRkIGNhbGxiYWNrIHRvIHRoZSBsaXN0IG9mIGNhbGxiYWNrcyBmb3IgdGhpcyB0eXBlXHJcbiAgICAgICAgLy8gaWYgdGhlIGxpc3QgZG9lc24ndCBleGlzdCB5ZXQsIGNyZWF0ZSBpdCB3aXRoIHRoZSBjYWxsYmFjayBhcyBtZW1iZXJcclxuICAgICAgICBpZiAoY2IgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50VHlwZV0pXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnRUeXBlXSA9IFtjYl07XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudFR5cGVdLnB1c2goY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZSB0aGUgZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHdpbGwgYmUgaW52b2tlZFxyXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbXMgLSBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBhZGRFdmVudExpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXIoZXZlbnRUeXBlLCBwYXJhbXMpIHtcclxuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgY2FsbGJhY2tzIGZvciB0aGlzIHR5cGVcclxuICAgICAgICBsZXQgY2FsbGJhY2tzID0gdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50VHlwZV07XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICBjYWxsYmFja3MuZm9yRWFjaCgoY2IpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGNhdGNoIGVycm9ycyB0byBtYWtlIHN1cmUgZXZlcnkgY2FsbGJhY2sgaXMgYmVpbmcgY2FsbGVkXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNiKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiY2FsbGluZyBsaXN0ZW5lciBcIiArIGNiLm5hbWUgKyBcIiBmb3IgZXZlbnQgdHlwZSBcIiArIGV2ZW50VHlwZSArIFwiIHdpdGggcGFyYW1ldGVycyAnXCIgKyBwYXJhbXMgKyBcIicgcmVzdWx0ZWQgaW4gYW4gZXJyb3IhXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtaHlwZXJ0eS9zcmMvdXRpbHMvRXZlbnRFbWl0dGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});