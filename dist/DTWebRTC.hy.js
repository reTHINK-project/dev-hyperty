(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_EventEmitter__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HypertyDescriptor__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_webrtc_adapter_test__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_webrtc_adapter_test___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_webrtc_adapter_test__);\\nfunction _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/* jshint undef: true */\\n//import {Discovery} from 'service-framework/dist/Discovery';\\n//import {Syncher} from 'service-framework/dist/Syncher';\\n//import {divideURL} from '../utils/utils';\\n // for receiving\\n\\n //import Search from '../utils/Search';\\n//import iceconfig from './stunTurnserverConfig';\\n//import IdentityManager from 'service-framework/dist/IdentityManager';\\n\\n\\n\\nvar DTWebRTC =\\n/*#__PURE__*/\\nfunction (_EventEmitter) {\\n  _inherits(DTWebRTC, _EventEmitter);\\n\\n  // extends EventEmitter because we need to recieve events\\n  function DTWebRTC() {\\n    _classCallCheck(this, DTWebRTC);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(DTWebRTC).call(this)); // call event emitter constructor to be able to receive things\\n  }\\n\\n  _createClass(DTWebRTC, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, configuration, factory) {\\n      var _this = this;\\n\\n      if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');\\n      if (!bus) throw new Error('The MiniBus is a needed parameter');\\n      if (!configuration) throw new Error('The configuration is a needed parameter');\\n      this._domain = factory.divideURL(hypertyURL).domain;\\n      this._objectDescURL = 'hyperty-catalogue://catalogue.' + this._domain + '/.well-known/dataschema/Connection';\\n      this._syncher = factory.createSyncher(hypertyURL, bus, configuration);\\n      this.discovery = factory.createDiscovery(hypertyURL, configuration.runtimeURL, bus);\\n      console.log(\\\"[DTWebRTC] [constructor] >>>>> Discovery object is:\\\", this.discovery);\\n      var identityManager = factory.createIdentityManager(hypertyURL, configuration.runtimeURL, bus);\\n      this.search = factory.createSearch(this.discovery, identityManager);\\n      this.objObserver;\\n      this.objReporter;\\n      this.callerIdentity;\\n      this.constraints = {\\n        'audio': true,\\n        'video': true\\n      };\\n      this.receivingConstraints = {\\n        offerToReceiveAudio: 1,\\n        offerToReceiveVideo: 1\\n      };\\n      this.sender = null; // sender == false --> I'm the receiver @ start\\n\\n      this.myUrl = hypertyURL; // own hypertyUrl\\n\\n      this.partner = null; // hypertyURL of the other hyperty\\n\\n      this.pc = null; // the peer connection object of WebRTC\\n\\n      this.mediaStream = null;\\n      this.iceconfig = configuration; // receiving starts here\\n\\n      this._syncher.onNotification(function (event) {\\n        _this._onNotification(event);\\n      });\\n    }\\n  }, {\\n    key: \\\"_onNotification\\\",\\n    value: function _onNotification(event) {\\n      var _this2 = this;\\n\\n      if (this.sender == null) {\\n        this.sender = false;\\n      }\\n\\n      console.info('[DTWebRTC]: Event Received: ', event);\\n\\n      switch (event.type) {\\n        case \\\"create\\\":\\n          // ensure that a PC is existing\\n          this.createPC(); // the peer has created an object and we are requested to subscribe for changes to this remote object\\n          // this.trigger('invitation', event.identity);\\n\\n          this.callerIdentity = event.identity;\\n          console.info(\\\"[DTWebRTC]: [_onNotification] sending event.ack() \\\");\\n          var result = event.ack(); // Acknowledge reporter about the Invitation was received\\n\\n          console.info(\\\"[DTWebRTC]: [_onNotification] event.ack() result is:\\\", result);\\n          setTimeout(function () {\\n            // Subscribe to Object\\n            var input = {\\n              schema: _this2._objectDescURL,\\n              resource: event.url\\n            };\\n\\n            _this2._syncher.subscribe(input).then(function (objObserver) {\\n              console.info(\\\"[DTWebRTC]: [_onNotification] objObserver \\\", objObserver); // if successful, we get an observer object back\\n\\n              _this2.objObserver = objObserver; // if we are not the initiator of the call, then signal and handle this invite\\n\\n              if (!_this2.sender) {\\n                _this2.partner = event.from;\\n                console.log('got invite');\\n\\n                _this2.trigger('incomingcall', _this2.callerIdentity);\\n              }\\n\\n              _this2.handleObserverObject(objObserver);\\n            }).catch(function (reason) {\\n              console.error(reason);\\n            });\\n          }, 750);\\n          break;\\n\\n        case \\\"delete\\\":\\n          this.cleanupPC();\\n          this.trigger('disconnected');\\n          break;\\n      }\\n    }\\n    /**\\r\\n      Establishing a connection to the remote side by invoking syncher.subscribe.\\r\\n      This will be called for the invite as well as for the the accept. It returns\\r\\n      an objectReporter object, if successfully.\\r\\n     **/\\n\\n  }, {\\n    key: \\\"connect\\\",\\n    value: function connect(hypertyURL) {\\n      var _this3 = this;\\n\\n      this.partner = hypertyURL;\\n\\n      if (this.sender == null) {\\n        this.sender = true;\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n        // initial data for sync object\\n        var dataObject = {\\n          name: \\\"Connection\\\",\\n          status: \\\"\\\",\\n          owner: _this3.myUrl,\\n          connectionDescription: {},\\n          iceCandidates: [] // ensure this the objReporter object is created before we create the offer\\n\\n        };\\n\\n        _this3._syncher.create(_this3._objectDescURL, [hypertyURL], dataObject, true, false, 'call', {}, {\\n          resources: ['audio', 'video']\\n        }).then(function (objReporter) {\\n          console.info('1. Return Created WebRTC Object Reporter', objReporter);\\n          _this3.objReporter = objReporter;\\n\\n          if (_this3.sender) {\\n            // offer\\n            _this3.invite().then(function (offer) {\\n              _this3.objReporter.data.connectionDescription = offer;\\n            });\\n          }\\n\\n          objReporter.onSubscription(function (event) {\\n            console.info('-------- Receiver received subscription request --------- \\\\n');\\n            event.accept(); // all subscription requested are accepted\\n\\n            resolve(objReporter);\\n          });\\n        }).catch(function (reason) {\\n          console.error(reason);\\n          reject(reason);\\n        });\\n      });\\n    } // WEBRTC FUNCTIONS HERE\\n\\n  }, {\\n    key: \\\"setMediaOptions\\\",\\n    value: function setMediaOptions(opt) {\\n      this.constraints = opt;\\n    } // caller invites a callee\\n\\n  }, {\\n    key: \\\"invite\\\",\\n    value: function invite() {\\n      var _this4 = this;\\n\\n      this.createPC();\\n      return new Promise(function (resolve, reject) {\\n        console.log('>>>Constraints', _this4.constraints);\\n        navigator.mediaDevices.getUserMedia(_this4.constraints).then(function (stream) {\\n          console.log(\\\"[DTWebRTC]: localviodeo\\\");\\n\\n          _this4.trigger('localvideo', stream); //document.getElementById('localVideo').srcObject = stream;\\n\\n\\n          _this4.mediaStream = stream;\\n\\n          _this4.pc.addStream(stream); // this.pc.createOffer(this.receivingConstraints).then( (offer) => {\\n\\n\\n          _this4.pc.createOffer().then(function (offer) {\\n            _this4.pc.setLocalDescription(new RTCSessionDescription(offer), function () {\\n              resolve(offer);\\n            }, function () {\\n              reject();\\n            });\\n          }).catch(function (e) {\\n            reject(\\\"Create Offer failed: \\\", e);\\n          });\\n        });\\n      });\\n    } // calle accepted the invitation\\n\\n  }, {\\n    key: \\\"acceptCall\\\",\\n    value: function acceptCall() {\\n      var _this5 = this;\\n\\n      var offer = this.objObserver.data ? this.objObserver.data.connectionDescription : null;\\n\\n      if (!offer) {\\n        console.log(\\\"[DTWebRTC]: offer was't set in the invitation - data: \\\", data);\\n        return;\\n      }\\n\\n      console.log(\\\"[DTWebRTC]: >>>Constraints\\\", this.constraints);\\n      navigator.mediaDevices.getUserMedia(this.constraints).then(function (stream) {\\n        _this5.trigger('localvideo', stream);\\n\\n        _this5.mediaStream = stream;\\n\\n        _this5.pc.addStream(stream); // add the stream to the peer connection so the other peer can receive it later\\n        // this.pc.setRemoteDescription(new RTCSessionDescription(offer), () => {\\n        // connect to the other hyperty now\\n\\n\\n        _this5.connect(_this5.partner).then(function (objReporter) {\\n          console.log(\\\"[DTWebRTC]: objReporter created successfully: \\\", objReporter);\\n          _this5.objReporter = objReporter;\\n\\n          _this5.pc.createAnswer().then(function (answer) {\\n            _this5.objReporter.data.connectionDescription = answer;\\n\\n            _this5.pc.setLocalDescription(new RTCSessionDescription(answer), function () {\\n              console.log(\\\"[DTWebRTC]: localDescription (answer) successfully set: \\\", answer);\\n            }, function (err) {\\n              console.log(\\\"Error in setLocalDescription: \\\" + err);\\n            });\\n          });\\n        }); // }, (err) => {\\n        //   console.log(\\\"Error in setRemoteDescription: \\\" + err);\\n        // });\\n\\n      });\\n    } // choose ICE-Server(s), if (mode != 0) use only Stun/Turn from Settings-GUI\\n\\n  }, {\\n    key: \\\"setIceServer\\\",\\n    value: function setIceServer(ice, mode) {\\n      this.iceconfig.ice = mode ? ice : ice.concat(this.iceconfig.ice);\\n    } //create a peer connection with its event handlers\\n\\n  }, {\\n    key: \\\"createPC\\\",\\n    value: function createPC() {\\n      var _this6 = this;\\n\\n      if (this.pc) return;\\n      this.pc = new RTCPeerConnection(this.iceconfig);\\n      console.log(\\\"[DTWebRTC]: created PeerConnection\\\", this.pc); //event handler for when remote stream is added to peer connection\\n\\n      this.pc.onaddstream = function (obj) {\\n        console.log('[DTWebRTC]: >>>onaddstream', _this6.pc);\\n\\n        _this6.trigger('remotevideo', obj.stream);\\n      }; //event handler for when local ice candidate has been found\\n\\n\\n      this.pc.onicecandidate = function (e) {\\n        console.log(\\\"[DTWebRTC]: icecandidateevent occured: \\\", e);\\n        if (!e.candidate) return;\\n        var icecandidate = {\\n          type: 'candidate',\\n          candidate: e.candidate.candidate,\\n          sdpMid: e.candidate.sdpMid,\\n          sdpMLineIndex: e.candidate.sdpMLineIndex\\n        };\\n        var data = _this6.objReporter.data;\\n        var ices = JSON.parse(JSON.stringify(data.iceCandidates));\\n        ices.push(icecandidate);\\n        _this6.objReporter.data.iceCandidates = ices;\\n      }; // unfortunately onremovestream() didn't recognizes the remove of a stream\\n\\n\\n      this.pc.onRemoteStreamRemoved = function (a) {\\n        console.log('>>>stream removed from remote', a);\\n      };\\n    } ////////////////////////////////////\\n    // HypertyConnector functions\\n\\n  }, {\\n    key: \\\"handleObserverObject\\\",\\n    value: function handleObserverObject(dataObjectObserver) {\\n      var _this7 = this;\\n\\n      var peerData = dataObjectObserver.data;\\n      console.info(\\\"[DTWebRTC]: handleObserverObject Peer Data:\\\", peerData);\\n\\n      if (peerData.hasOwnProperty('connectionDescription')) {\\n        this.processPeerInformation(peerData.connectionDescription);\\n      }\\n\\n      if (peerData.hasOwnProperty('iceCandidates')) {\\n        peerData.iceCandidates.forEach(function (ice) {\\n          console.log(\\\"[DTWebRTC]: handleObserverObject for ice\\\", ice);\\n\\n          _this7.processPeerInformation(ice);\\n        });\\n      }\\n\\n      dataObjectObserver.onChange('*', function (event) {\\n        console.debug('[DTWebRTC]: Observer on change message: ', event); // this event also includes the answer from the callee so we need to\\n        // process the answer from event.data and the candidates which might trickle\\n        // from event.data[0]\\n\\n        if (event.data[0]) {\\n          // [0] this does the trick when ice candidates are trickling ;)\\n          console.log('>>event.data[0]', event.data[0]);\\n\\n          _this7.processPeerInformation(event.data[0]);\\n        } else {\\n          console.log('[DTWebRTC]: >>event', event);\\n\\n          _this7.processPeerInformation(event.data);\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"processPeerInformation\\\",\\n    value: function processPeerInformation(data) {\\n      console.info(\\\"[DTWebRTC]: processPeerInformation: \\\", JSON.stringify(data)); //this.createPC();\\n\\n      if (!this.pc) {\\n        console.info(\\\"[DTWebRTC]: processPeerInformation: no PeerConnection existing --> maybe in disconnecting process. --> ignoring this update\\\");\\n        return;\\n      }\\n\\n      if (data.type === 'offer' || data.type === 'answer') {\\n        console.info('[DTWebRTC]: Process Connection Description: ', data);\\n        this.pc.setRemoteDescription(new RTCSessionDescription(data)).then(function () {\\n          console.log(\\\"[DTWebRTC]: remote success\\\");\\n        }, function (err) {\\n          console.log(\\\"[DTWebRTC]: setRemoteDescription error: \\\", err);\\n        });\\n      }\\n\\n      if (data.candidate) {\\n        console.info('Process Ice Candidate: ', data);\\n        this.pc.addIceCandidate(new RTCIceCandidate({\\n          candidate: data.candidate\\n        }));\\n      }\\n    }\\n  }, {\\n    key: \\\"cleanupPC\\\",\\n    value: function cleanupPC() {\\n      this.sender = null;\\n\\n      if (this.mediaStream && this.pc) {\\n        // removeStream is deprecated --> using removeTrack instead\\n        var tracks = this.mediaStream.getTracks();\\n        tracks.forEach(function (track) {\\n          track.stop(); // this.pc.removeTrack(track);\\n        }); // if ( this.pc ) {\\n        //   this.pc.removeStream(this.mediaStream);\\n        // }\\n      }\\n\\n      if (this.pc) this.pc.close();\\n      this.pc = null;\\n    }\\n  }, {\\n    key: \\\"disconnect\\\",\\n    value: function disconnect() {\\n      var _this8 = this;\\n\\n      console.log('[DTWebRTC]>>>lets disconnect', this);\\n      return new Promise(function (resolve, reject) {\\n        try {\\n          if (_this8.objReporter) {\\n            _this8.objReporter.delete();\\n          }\\n\\n          if (_this8.objObserver) {\\n            _this8.objObserver.delete();\\n          }\\n\\n          _this8.cleanupPC();\\n\\n          _this8.trigger('disconnected');\\n\\n          resolve();\\n        } catch (e) {\\n          reject(e);\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"switchLocalAudio\\\",\\n    value: function switchLocalAudio(newState) {\\n      console.log('[DTWebRTC] --> setting local audio to: ' + newState);\\n\\n      try {\\n        this.mediaStream.getAudioTracks()[0].enabled = newState;\\n      } catch (x) {\\n        console.err(\\\"error while (un)muting local audio state!\\\");\\n      }\\n    }\\n  }, {\\n    key: \\\"switchLocalVideo\\\",\\n    value: function switchLocalVideo(newState) {\\n      console.log('[DTWebRTC] --> setting local video to: ' + newState);\\n\\n      try {\\n        this.mediaStream.getVideoTracks()[0].enabled = newState;\\n      } catch (x) {\\n        console.err(\\\"error while (un)muting local video state!\\\");\\n      }\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_1__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */].name;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_1__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */];\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this.myUrl;\\n    }\\n  }]);\\n\\n  return DTWebRTC;\\n}(__WEBPACK_IMPORTED_MODULE_0__utils_EventEmitter__[\\\"a\\\" /* default */]);\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (DTWebRTC);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/**\\r\\n * Copyright 2016 PT Inovação e Sistemas SA\\r\\n * Copyright 2016 INESC-ID\\r\\n * Copyright 2016 QUOBIS NETWORKS SL\\r\\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\\r\\n * Copyright 2016 ORANGE SA\\r\\n * Copyright 2016 Deutsche Telekom AG\\r\\n * Copyright 2016 Apizee\\r\\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n **/\\n\\n/**\\r\\n * EventEmitter\\r\\n * All classes which extends this, can have addEventListener and trigger events;\\r\\n */\\nvar EventEmitter =\\n/*#__PURE__*/\\nfunction () {\\n  /**\\r\\n   * Initializes the EventEmitter\\r\\n   */\\n  function EventEmitter() {\\n    _classCallCheck(this, EventEmitter);\\n\\n    // set up listener holder\\n    this.__eventListeners = {};\\n  }\\n  /**\\r\\n   * addEventListener listen for an eventType\\r\\n   * @param  {string}         eventType - listening for this type of event\\r\\n   * @param  {Function}       cb        - callback function will be executed when the event it is invoked\\r\\n   */\\n\\n\\n  _createClass(EventEmitter, [{\\n    key: \\\"addEventListener\\\",\\n    value: function addEventListener(eventType, cb) {\\n      // add callback to the list of callbacks for this type\\n      // if the list doesn't exist yet, create it with the callback as member\\n      if (cb != undefined) {\\n        if (!this.__eventListeners[eventType]) this.__eventListeners[eventType] = [cb];else this.__eventListeners[eventType].push(cb);\\n      }\\n    }\\n    /**\\r\\n     * Invoke the eventType\\r\\n     * @param  {string} eventType - event will be invoked\\r\\n     * @param  {object} params - parameters will be passed to the addEventListener\\r\\n     */\\n\\n  }, {\\n    key: \\\"trigger\\\",\\n    value: function trigger(eventType, params) {\\n      // check if there are callbacks for this type\\n      var callbacks = this.__eventListeners[eventType];\\n\\n      if (callbacks) {\\n        callbacks.forEach(function (cb) {\\n          // catch errors to make sure every callback is being called\\n          try {\\n            cb(params);\\n          } catch (e) {\\n            console.warn(\\\"calling listener \\\" + cb.name + \\\" for event type \\\" + eventType + \\\" with parameters '\\\" + params + \\\"' resulted in an error!\\\", e);\\n          }\\n        });\\n      }\\n    }\\n  }]);\\n\\n  return EventEmitter;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"a\\\"] = (EventEmitter);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL3V0aWxzL0V2ZW50RW1pdHRlci5qcz9kMzE4Il0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIl9fZXZlbnRMaXN0ZW5lcnMiLCJldmVudFR5cGUiLCJjYiIsInVuZGVmaW5lZCIsInB1c2giLCJwYXJhbXMiLCJjYWxsYmFja3MiLCJmb3JFYWNoIiwiZSIsImNvbnNvbGUiLCJ3YXJuIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7O0lBSU1BLFk7OztBQUVGOzs7QUFHQSwwQkFBYztBQUFBOztBQUNWO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsRUFBeEI7QUFDSDtBQUVEOzs7Ozs7Ozs7cUNBS2lCQyxTLEVBQVdDLEUsRUFBSTtBQUM1QjtBQUNBO0FBQ0EsVUFBSUEsRUFBRSxJQUFJQyxTQUFWLEVBQXFCO0FBQ2pCLFlBQUksQ0FBQyxLQUFLSCxnQkFBTCxDQUFzQkMsU0FBdEIsQ0FBTCxFQUNJLEtBQUtELGdCQUFMLENBQXNCQyxTQUF0QixJQUFtQyxDQUFDQyxFQUFELENBQW5DLENBREosS0FHSSxLQUFLRixnQkFBTCxDQUFzQkMsU0FBdEIsRUFBaUNHLElBQWpDLENBQXNDRixFQUF0QztBQUNQO0FBQ0o7QUFFRDs7Ozs7Ozs7NEJBS1FELFMsRUFBV0ksTSxFQUFRO0FBQ3ZCO0FBQ0EsVUFBSUMsU0FBUyxHQUFHLEtBQUtOLGdCQUFMLENBQXNCQyxTQUF0QixDQUFoQjs7QUFDQSxVQUFJSyxTQUFKLEVBQWU7QUFDWEEsaUJBQVMsQ0FBQ0MsT0FBVixDQUFrQixVQUFDTCxFQUFELEVBQVE7QUFDdEI7QUFDQSxjQUFJO0FBQ0FBLGNBQUUsQ0FBQ0csTUFBRCxDQUFGO0FBQ0gsV0FGRCxDQUVFLE9BQU9HLENBQVAsRUFBVTtBQUNSQyxtQkFBTyxDQUFDQyxJQUFSLENBQWEsc0JBQXNCUixFQUFFLENBQUNTLElBQXpCLEdBQWdDLGtCQUFoQyxHQUFxRFYsU0FBckQsR0FBaUUsb0JBQWpFLEdBQXdGSSxNQUF4RixHQUFpRyx5QkFBOUcsRUFBeUlHLENBQXpJO0FBQ0g7QUFDSixTQVBEO0FBUUg7QUFDSjs7Ozs7O0FBSVVULHFFQUFmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4gKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4gKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4gKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKiovXHJcblxyXG4vKipcclxuICogRXZlbnRFbWl0dGVyXHJcbiAqIEFsbCBjbGFzc2VzIHdoaWNoIGV4dGVuZHMgdGhpcywgY2FuIGhhdmUgYWRkRXZlbnRMaXN0ZW5lciBhbmQgdHJpZ2dlciBldmVudHM7XHJcbiAqL1xyXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIEV2ZW50RW1pdHRlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBzZXQgdXAgbGlzdGVuZXIgaG9sZGVyXHJcbiAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGRFdmVudExpc3RlbmVyIGxpc3RlbiBmb3IgYW4gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgZXZlbnRUeXBlIC0gbGlzdGVuaW5nIGZvciB0aGlzIHR5cGUgb2YgZXZlbnRcclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICBjYiAgICAgICAgLSBjYWxsYmFjayBmdW5jdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGV2ZW50IGl0IGlzIGludm9rZWRcclxuICAgICAqL1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNiKSB7XHJcbiAgICAgICAgLy8gYWRkIGNhbGxiYWNrIHRvIHRoZSBsaXN0IG9mIGNhbGxiYWNrcyBmb3IgdGhpcyB0eXBlXHJcbiAgICAgICAgLy8gaWYgdGhlIGxpc3QgZG9lc24ndCBleGlzdCB5ZXQsIGNyZWF0ZSBpdCB3aXRoIHRoZSBjYWxsYmFjayBhcyBtZW1iZXJcclxuICAgICAgICBpZiAoY2IgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50VHlwZV0pXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnRUeXBlXSA9IFtjYl07XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudFR5cGVdLnB1c2goY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZSB0aGUgZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHdpbGwgYmUgaW52b2tlZFxyXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbXMgLSBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBhZGRFdmVudExpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXIoZXZlbnRUeXBlLCBwYXJhbXMpIHtcclxuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgY2FsbGJhY2tzIGZvciB0aGlzIHR5cGVcclxuICAgICAgICBsZXQgY2FsbGJhY2tzID0gdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50VHlwZV07XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICBjYWxsYmFja3MuZm9yRWFjaCgoY2IpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGNhdGNoIGVycm9ycyB0byBtYWtlIHN1cmUgZXZlcnkgY2FsbGJhY2sgaXMgYmVpbmcgY2FsbGVkXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNiKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiY2FsbGluZyBsaXN0ZW5lciBcIiArIGNiLm5hbWUgKyBcIiBmb3IgZXZlbnQgdHlwZSBcIiArIGV2ZW50VHlwZSArIFwiIHdpdGggcGFyYW1ldGVycyAnXCIgKyBwYXJhbXMgKyBcIicgcmVzdWx0ZWQgaW4gYW4gZXJyb3IhXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtaHlwZXJ0eS9zcmMvdXRpbHMvRXZlbnRFbWl0dGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return hypertyDescriptor; });\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"DTWebRTC\\\",\\n  \\\"configuration\\\": {\\n    \\\"iceServers\\\": [{\\n      \\\"urls\\\": \\\"turn:numb.viagenie.ca\\\",\\n      \\\"credential\\\": \\\"zJcH3erd9cUv5Zh\\\",\\n      \\\"username\\\": \\\"luis-t-duarte@telecom.pt\\\"\\n    }, {\\n      \\\"urls\\\": [\\\"stun:stun.voiparound.com\\\", \\\"stun:stun.voipbuster.com\\\", \\\"stun:stun.voipstunt.com\\\", \\\"stun:stun.voxgratia.org\\\", \\\"stun:stun.ekiga.net\\\", \\\"stun:stun.schlund.de\\\", \\\"stun:stun.iptel.org\\\", \\\"stun:stun.l.google.com:19302\\\", \\\"stun:stun1.l.google.com:19302\\\", \\\"stun:stun.ideasip.com\\\", \\\"stun:stun4.l.google.com:19302\\\", \\\"stun:stun2.l.google.com:19302\\\", \\\"stun:stun3.l.google.com:19302\\\"]\\n    }],\\n    \\\"iceTransportPolicy\\\": \\\"all\\\"\\n  },\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true,\\n    \\\"windowSandbox\\\": true,\\n    \\\"mic\\\": true,\\n    \\\"camera\\\": true\\n  },\\n  \\\"hypertyType\\\": [\\\"audio\\\", \\\"video\\\"],\\n  \\\"dataObjects\\\": [\\\"https://catalogue.%domain%/.well-known/dataschema/Connection\\\"]\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL2R0d2VicnRjL0h5cGVydHlEZXNjcmlwdG9yLmpzPzE0ZGMiXSwibmFtZXMiOlsiaHlwZXJ0eURlc2NyaXB0b3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQU8sSUFBSUEsaUJBQWlCLEdBQUc7QUFDN0IsVUFBUSxVQURxQjtBQUU3QixtQkFBaUI7QUFDZixrQkFBYyxDQUNUO0FBQ0UsY0FBUSx1QkFEVjtBQUVFLG9CQUFjLGlCQUZoQjtBQUdFLGtCQUFZO0FBSGQsS0FEUyxFQU1UO0FBQ08sY0FBUSxDQUNOLDBCQURNLEVBRU4sMEJBRk0sRUFHTix5QkFITSxFQUlOLHlCQUpNLEVBS04scUJBTE0sRUFNTixzQkFOTSxFQU9OLHFCQVBNLEVBUU4sOEJBUk0sRUFTTiwrQkFUTSxFQVVOLHVCQVZNLEVBV04sK0JBWE0sRUFZTiwrQkFaTSxFQWFOLCtCQWJNO0FBRGYsS0FOUyxDQURDO0FBeUJiLDBCQUFzQjtBQXpCVCxHQUZZO0FBNkI3QixpQkFBZTtBQUNiLGVBQVUsSUFERztBQUNFLHFCQUFnQixJQURsQjtBQUN1QixXQUFNLElBRDdCO0FBQ2tDLGNBQVM7QUFEM0MsR0E3QmM7QUFnQzdCLGlCQUFlLENBQUMsT0FBRCxFQUFVLE9BQVYsQ0FoQ2M7QUFpQzdCLGlCQUFlLENBQ2IsOERBRGE7QUFqQ2MsQ0FBeEIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgaHlwZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgXCJuYW1lXCI6IFwiRFRXZWJSVENcIixcclxuICBcImNvbmZpZ3VyYXRpb25cIjoge1xyXG4gICAgXCJpY2VTZXJ2ZXJzXCI6IFtcclxuICAgICAgICAge1xyXG4gICAgICAgICAgIFwidXJsc1wiOiBcInR1cm46bnVtYi52aWFnZW5pZS5jYVwiLFxyXG4gICAgICAgICAgIFwiY3JlZGVudGlhbFwiOiBcInpKY0gzZXJkOWNVdjVaaFwiLFxyXG4gICAgICAgICAgIFwidXNlcm5hbWVcIjogXCJsdWlzLXQtZHVhcnRlQHRlbGVjb20ucHRcIlxyXG4gICAgICAgICB9LFxyXG4gICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInVybHNcIjogW1xyXG4gICAgICAgICAgICAgICAgICBcInN0dW46c3R1bi52b2lwYXJvdW5kLmNvbVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInN0dW46c3R1bi52b2lwYnVzdGVyLmNvbVwiLFxyXG4gICAgICAgICAgICAgICAgICBcInN0dW46c3R1bi52b2lwc3R1bnQuY29tXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic3R1bjpzdHVuLnZveGdyYXRpYS5vcmdcIixcclxuICAgICAgICAgICAgICAgICAgXCJzdHVuOnN0dW4uZWtpZ2EubmV0XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic3R1bjpzdHVuLnNjaGx1bmQuZGVcIixcclxuICAgICAgICAgICAgICAgICAgXCJzdHVuOnN0dW4uaXB0ZWwub3JnXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic3R1bjpzdHVuLmwuZ29vZ2xlLmNvbToxOTMwMlwiLFxyXG4gICAgICAgICAgICAgICAgICBcInN0dW46c3R1bjEubC5nb29nbGUuY29tOjE5MzAyXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic3R1bjpzdHVuLmlkZWFzaXAuY29tXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwic3R1bjpzdHVuNC5sLmdvb2dsZS5jb206MTkzMDJcIixcclxuICAgICAgICAgICAgICAgICAgXCJzdHVuOnN0dW4yLmwuZ29vZ2xlLmNvbToxOTMwMlwiLFxyXG4gICAgICAgICAgICAgICAgICBcInN0dW46c3R1bjMubC5nb29nbGUuY29tOjE5MzAyXCJcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIFwiaWNlVHJhbnNwb3J0UG9saWN5XCI6IFwiYWxsXCJcclxuICB9LFxyXG4gIFwiY29uc3RyYWludHNcIjoge1xyXG4gICAgXCJicm93c2VyXCI6dHJ1ZSxcIndpbmRvd1NhbmRib3hcIjp0cnVlLFwibWljXCI6dHJ1ZSxcImNhbWVyYVwiOnRydWVcclxuICB9LFxyXG4gIFwiaHlwZXJ0eVR5cGVcIjogW1wiYXVkaW9cIiwgXCJ2aWRlb1wiXSxcclxuICBcImRhdGFPYmplY3RzXCI6IFtcclxuICAgIFwiaHR0cHM6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vZGF0YXNjaGVtYS9Db25uZWN0aW9uXCJcclxuICBdXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1oeXBlcnR5L3NyYy9kdHdlYnJ0Yy9IeXBlcnR5RGVzY3JpcHRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///2\\n\");\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/*\\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\\n *\\n *  Use of this source code is governed by a BSD-style license\\n *  that can be found in the LICENSE file in the root of the source\\n *  tree.\\n */\\n\\n/* More information about these options at jshint.com/docs/options */\\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\\n   eqeqeq: true, forin: false, globalstrict: true, node: true,\\n   quotmark: single, undef: true, unused: strict */\\n/* global mozRTCIceCandidate, mozRTCPeerConnection, Promise,\\nmozRTCSessionDescription, webkitRTCPeerConnection, MediaStreamTrack,\\nMediaStream, RTCIceGatherer, RTCIceTransport, RTCDtlsTransport,\\nRTCRtpSender, RTCRtpReceiver*/\\n/* exported trace,requestUserMedia */\\n\\n\\n\\nvar getUserMedia = null;\\nvar attachMediaStream = null;\\nvar reattachMediaStream = null;\\nvar webrtcDetectedBrowser = null;\\nvar webrtcDetectedVersion = null;\\nvar webrtcMinimumVersion = null;\\nvar webrtcUtils = {\\n  log: function() {\\n    // suppress console.log output when being included as a module.\\n    if (true) {\\n      return;\\n    }\\n    console.log.apply(console, arguments);\\n  },\\n  extractVersion: function(uastring, expr, pos) {\\n    var match = uastring.match(expr);\\n    return match && match.length >= pos && parseInt(match[pos], 10);\\n  }\\n};\\n\\nfunction trace(text) {\\n  // This function is used for logging.\\n  if (text[text.length - 1] === '\\\\n') {\\n    text = text.substring(0, text.length - 1);\\n  }\\n  if (window.performance) {\\n    var now = (window.performance.now() / 1000).toFixed(3);\\n    webrtcUtils.log(now + ': ' + text);\\n  } else {\\n    webrtcUtils.log(text);\\n  }\\n}\\n\\nif (typeof window === 'object') {\\n  if (window.HTMLMediaElement &&\\n    !('srcObject' in window.HTMLMediaElement.prototype)) {\\n    // Shim the srcObject property, once, when HTMLMediaElement is found.\\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\\n      get: function() {\\n        // If prefixed srcObject property exists, return it.\\n        // Otherwise use the shimmed property, _srcObject\\n        return 'mozSrcObject' in this ? this.mozSrcObject : this._srcObject;\\n      },\\n      set: function(stream) {\\n        if ('mozSrcObject' in this) {\\n          this.mozSrcObject = stream;\\n        } else {\\n          // Use _srcObject as a private property for this shim\\n          this._srcObject = stream;\\n          // TODO: revokeObjectUrl(this.src) when !stream to release resources?\\n          this.src = URL.createObjectURL(stream);\\n        }\\n      }\\n    });\\n  }\\n  // Proxy existing globals\\n  getUserMedia = window.navigator && window.navigator.getUserMedia;\\n}\\n\\n// Attach a media stream to an element.\\nattachMediaStream = function(element, stream) {\\n  element.srcObject = stream;\\n};\\n\\nreattachMediaStream = function(to, from) {\\n  to.srcObject = from.srcObject;\\n};\\n\\nif (typeof window === 'undefined' || !window.navigator) {\\n  webrtcUtils.log('This does not appear to be a browser');\\n  webrtcDetectedBrowser = 'not a browser';\\n} else if (navigator.mozGetUserMedia) {\\n  webrtcUtils.log('This appears to be Firefox');\\n\\n  webrtcDetectedBrowser = 'firefox';\\n\\n  // the detected firefox version.\\n  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,\\n      /Firefox\\\\/([0-9]+)\\\\./, 1);\\n\\n  // the minimum firefox version still supported by adapter.\\n  webrtcMinimumVersion = 31;\\n\\n  // Shim for RTCPeerConnection on older versions.\\n  if (!window.RTCPeerConnection) {\\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\\n      if (webrtcDetectedVersion < 38) {\\n        // .urls is not supported in FF < 38.\\n        // create RTCIceServers with a single url.\\n        if (pcConfig && pcConfig.iceServers) {\\n          var newIceServers = [];\\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\\n            var server = pcConfig.iceServers[i];\\n            if (server.hasOwnProperty('urls')) {\\n              for (var j = 0; j < server.urls.length; j++) {\\n                var newServer = {\\n                  url: server.urls[j]\\n                };\\n                if (server.urls[j].indexOf('turn') === 0) {\\n                  newServer.username = server.username;\\n                  newServer.credential = server.credential;\\n                }\\n                newIceServers.push(newServer);\\n              }\\n            } else {\\n              newIceServers.push(pcConfig.iceServers[i]);\\n            }\\n          }\\n          pcConfig.iceServers = newIceServers;\\n        }\\n      }\\n      return new mozRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors\\n    };\\n    window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;\\n\\n    // wrap static methods. Currently just generateCertificate.\\n    if (mozRTCPeerConnection.generateCertificate) {\\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\\n        get: function() {\\n          if (arguments.length) {\\n            return mozRTCPeerConnection.generateCertificate.apply(null,\\n                arguments);\\n          } else {\\n            return mozRTCPeerConnection.generateCertificate;\\n          }\\n        }\\n      });\\n    }\\n\\n    window.RTCSessionDescription = mozRTCSessionDescription;\\n    window.RTCIceCandidate = mozRTCIceCandidate;\\n  }\\n\\n  // getUserMedia constraints shim.\\n  getUserMedia = function(constraints, onSuccess, onError) {\\n    var constraintsToFF37 = function(c) {\\n      if (typeof c !== 'object' || c.require) {\\n        return c;\\n      }\\n      var require = [];\\n      Object.keys(c).forEach(function(key) {\\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\\n          return;\\n        }\\n        var r = c[key] = (typeof c[key] === 'object') ?\\n            c[key] : {ideal: c[key]};\\n        if (r.min !== undefined ||\\n            r.max !== undefined || r.exact !== undefined) {\\n          require.push(key);\\n        }\\n        if (r.exact !== undefined) {\\n          if (typeof r.exact === 'number') {\\n            r.min = r.max = r.exact;\\n          } else {\\n            c[key] = r.exact;\\n          }\\n          delete r.exact;\\n        }\\n        if (r.ideal !== undefined) {\\n          c.advanced = c.advanced || [];\\n          var oc = {};\\n          if (typeof r.ideal === 'number') {\\n            oc[key] = {min: r.ideal, max: r.ideal};\\n          } else {\\n            oc[key] = r.ideal;\\n          }\\n          c.advanced.push(oc);\\n          delete r.ideal;\\n          if (!Object.keys(r).length) {\\n            delete c[key];\\n          }\\n        }\\n      });\\n      if (require.length) {\\n        c.require = require;\\n      }\\n      return c;\\n    };\\n    if (webrtcDetectedVersion < 38) {\\n      webrtcUtils.log('spec: ' + JSON.stringify(constraints));\\n      if (constraints.audio) {\\n        constraints.audio = constraintsToFF37(constraints.audio);\\n      }\\n      if (constraints.video) {\\n        constraints.video = constraintsToFF37(constraints.video);\\n      }\\n      webrtcUtils.log('ff37: ' + JSON.stringify(constraints));\\n    }\\n    return navigator.mozGetUserMedia(constraints, onSuccess, onError);\\n  };\\n\\n  navigator.getUserMedia = getUserMedia;\\n\\n  // Shim for mediaDevices on older versions.\\n  if (!navigator.mediaDevices) {\\n    navigator.mediaDevices = {getUserMedia: requestUserMedia,\\n      addEventListener: function() { },\\n      removeEventListener: function() { }\\n    };\\n  }\\n  navigator.mediaDevices.enumerateDevices =\\n      navigator.mediaDevices.enumerateDevices || function() {\\n    return new Promise(function(resolve) {\\n      var infos = [\\n        {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\\n        {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\\n      ];\\n      resolve(infos);\\n    });\\n  };\\n\\n  if (webrtcDetectedVersion < 41) {\\n    // Work around http://bugzil.la/1169665\\n    var orgEnumerateDevices =\\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\\n    navigator.mediaDevices.enumerateDevices = function() {\\n      return orgEnumerateDevices().then(undefined, function(e) {\\n        if (e.name === 'NotFoundError') {\\n          return [];\\n        }\\n        throw e;\\n      });\\n    };\\n  }\\n} else if (navigator.webkitGetUserMedia && window.webkitRTCPeerConnection) {\\n  webrtcUtils.log('This appears to be Chrome');\\n\\n  webrtcDetectedBrowser = 'chrome';\\n\\n  // the detected chrome version.\\n  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,\\n      /Chrom(e|ium)\\\\/([0-9]+)\\\\./, 2);\\n\\n  // the minimum chrome version still supported by adapter.\\n  webrtcMinimumVersion = 38;\\n\\n  // The RTCPeerConnection object.\\n  window.RTCPeerConnection = function(pcConfig, pcConstraints) {\\n    // Translate iceTransportPolicy to iceTransports,\\n    // see https://code.google.com/p/webrtc/issues/detail?id=4869\\n    if (pcConfig && pcConfig.iceTransportPolicy) {\\n      pcConfig.iceTransports = pcConfig.iceTransportPolicy;\\n    }\\n\\n    var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors\\n    var origGetStats = pc.getStats.bind(pc);\\n    pc.getStats = function(selector, successCallback, errorCallback) { // jshint ignore: line\\n      var self = this;\\n      var args = arguments;\\n\\n      // If selector is a function then we are in the old style stats so just\\n      // pass back the original getStats format to avoid breaking old users.\\n      if (arguments.length > 0 && typeof selector === 'function') {\\n        return origGetStats(selector, successCallback);\\n      }\\n\\n      var fixChromeStats = function(response) {\\n        var standardReport = {};\\n        var reports = response.result();\\n        reports.forEach(function(report) {\\n          var standardStats = {\\n            id: report.id,\\n            timestamp: report.timestamp,\\n            type: report.type\\n          };\\n          report.names().forEach(function(name) {\\n            standardStats[name] = report.stat(name);\\n          });\\n          standardReport[standardStats.id] = standardStats;\\n        });\\n\\n        return standardReport;\\n      };\\n\\n      if (arguments.length >= 2) {\\n        var successCallbackWrapper = function(response) {\\n          args[1](fixChromeStats(response));\\n        };\\n\\n        return origGetStats.apply(this, [successCallbackWrapper, arguments[0]]);\\n      }\\n\\n      // promise-support\\n      return new Promise(function(resolve, reject) {\\n        if (args.length === 1 && selector === null) {\\n          origGetStats.apply(self, [\\n              function(response) {\\n                resolve.apply(null, [fixChromeStats(response)]);\\n              }, reject]);\\n        } else {\\n          origGetStats.apply(self, [resolve, reject]);\\n        }\\n      });\\n    };\\n\\n    return pc;\\n  };\\n  window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;\\n\\n  // wrap static methods. Currently just generateCertificate.\\n  if (webkitRTCPeerConnection.generateCertificate) {\\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\\n      get: function() {\\n        if (arguments.length) {\\n          return webkitRTCPeerConnection.generateCertificate.apply(null,\\n              arguments);\\n        } else {\\n          return webkitRTCPeerConnection.generateCertificate;\\n        }\\n      }\\n    });\\n  }\\n\\n  // add promise support\\n  ['createOffer', 'createAnswer'].forEach(function(method) {\\n    var nativeMethod = webkitRTCPeerConnection.prototype[method];\\n    webkitRTCPeerConnection.prototype[method] = function() {\\n      var self = this;\\n      if (arguments.length < 1 || (arguments.length === 1 &&\\n          typeof(arguments[0]) === 'object')) {\\n        var opts = arguments.length === 1 ? arguments[0] : undefined;\\n        return new Promise(function(resolve, reject) {\\n          nativeMethod.apply(self, [resolve, reject, opts]);\\n        });\\n      } else {\\n        return nativeMethod.apply(this, arguments);\\n      }\\n    };\\n  });\\n\\n  ['setLocalDescription', 'setRemoteDescription',\\n      'addIceCandidate'].forEach(function(method) {\\n    var nativeMethod = webkitRTCPeerConnection.prototype[method];\\n    webkitRTCPeerConnection.prototype[method] = function() {\\n      var args = arguments;\\n      var self = this;\\n      return new Promise(function(resolve, reject) {\\n        nativeMethod.apply(self, [args[0],\\n            function() {\\n              resolve();\\n              if (args.length >= 2) {\\n                args[1].apply(null, []);\\n              }\\n            },\\n            function(err) {\\n              reject(err);\\n              if (args.length >= 3) {\\n                args[2].apply(null, [err]);\\n              }\\n            }]\\n          );\\n      });\\n    };\\n  });\\n\\n  // getUserMedia constraints shim.\\n  var constraintsToChrome = function(c) {\\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\\n      return c;\\n    }\\n    var cc = {};\\n    Object.keys(c).forEach(function(key) {\\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\\n        return;\\n      }\\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\\n      if (r.exact !== undefined && typeof r.exact === 'number') {\\n        r.min = r.max = r.exact;\\n      }\\n      var oldname = function(prefix, name) {\\n        if (prefix) {\\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\\n        }\\n        return (name === 'deviceId') ? 'sourceId' : name;\\n      };\\n      if (r.ideal !== undefined) {\\n        cc.optional = cc.optional || [];\\n        var oc = {};\\n        if (typeof r.ideal === 'number') {\\n          oc[oldname('min', key)] = r.ideal;\\n          cc.optional.push(oc);\\n          oc = {};\\n          oc[oldname('max', key)] = r.ideal;\\n          cc.optional.push(oc);\\n        } else {\\n          oc[oldname('', key)] = r.ideal;\\n          cc.optional.push(oc);\\n        }\\n      }\\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\\n        cc.mandatory = cc.mandatory || {};\\n        cc.mandatory[oldname('', key)] = r.exact;\\n      } else {\\n        ['min', 'max'].forEach(function(mix) {\\n          if (r[mix] !== undefined) {\\n            cc.mandatory = cc.mandatory || {};\\n            cc.mandatory[oldname(mix, key)] = r[mix];\\n          }\\n        });\\n      }\\n    });\\n    if (c.advanced) {\\n      cc.optional = (cc.optional || []).concat(c.advanced);\\n    }\\n    return cc;\\n  };\\n\\n  getUserMedia = function(constraints, onSuccess, onError) {\\n    if (constraints.audio) {\\n      constraints.audio = constraintsToChrome(constraints.audio);\\n    }\\n    if (constraints.video) {\\n      constraints.video = constraintsToChrome(constraints.video);\\n    }\\n    webrtcUtils.log('chrome: ' + JSON.stringify(constraints));\\n    return navigator.webkitGetUserMedia(constraints, onSuccess, onError);\\n  };\\n  navigator.getUserMedia = getUserMedia;\\n\\n  if (!navigator.mediaDevices) {\\n    navigator.mediaDevices = {getUserMedia: requestUserMedia,\\n                              enumerateDevices: function() {\\n      return new Promise(function(resolve) {\\n        var kinds = {audio: 'audioinput', video: 'videoinput'};\\n        return MediaStreamTrack.getSources(function(devices) {\\n          resolve(devices.map(function(device) {\\n            return {label: device.label,\\n                    kind: kinds[device.kind],\\n                    deviceId: device.id,\\n                    groupId: ''};\\n          }));\\n        });\\n      });\\n    }};\\n  }\\n\\n  // A shim for getUserMedia method on the mediaDevices object.\\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\\n  if (!navigator.mediaDevices.getUserMedia) {\\n    navigator.mediaDevices.getUserMedia = function(constraints) {\\n      return requestUserMedia(constraints);\\n    };\\n  } else {\\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\\n    // function which returns a Promise, it does not accept spec-style\\n    // constraints.\\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\\n        bind(navigator.mediaDevices);\\n    navigator.mediaDevices.getUserMedia = function(c) {\\n      webrtcUtils.log('spec:   ' + JSON.stringify(c)); // whitespace for alignment\\n      c.audio = constraintsToChrome(c.audio);\\n      c.video = constraintsToChrome(c.video);\\n      webrtcUtils.log('chrome: ' + JSON.stringify(c));\\n      return origGetUserMedia(c);\\n    };\\n  }\\n\\n  // Dummy devicechange event methods.\\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\\n    navigator.mediaDevices.addEventListener = function() {\\n      webrtcUtils.log('Dummy mediaDevices.addEventListener called.');\\n    };\\n  }\\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\\n    navigator.mediaDevices.removeEventListener = function() {\\n      webrtcUtils.log('Dummy mediaDevices.removeEventListener called.');\\n    };\\n  }\\n\\n  // Attach a media stream to an element.\\n  attachMediaStream = function(element, stream) {\\n    if (webrtcDetectedVersion >= 43) {\\n      element.srcObject = stream;\\n    } else if (typeof element.src !== 'undefined') {\\n      element.src = URL.createObjectURL(stream);\\n    } else {\\n      webrtcUtils.log('Error attaching stream to element.');\\n    }\\n  };\\n  reattachMediaStream = function(to, from) {\\n    if (webrtcDetectedVersion >= 43) {\\n      to.srcObject = from.srcObject;\\n    } else {\\n      to.src = from.src;\\n    }\\n  };\\n\\n} else if (navigator.mediaDevices && navigator.userAgent.match(\\n    /Edge\\\\/(\\\\d+).(\\\\d+)$/)) {\\n  webrtcUtils.log('This appears to be Edge');\\n  webrtcDetectedBrowser = 'edge';\\n\\n  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,\\n      /Edge\\\\/(\\\\d+).(\\\\d+)$/, 2);\\n\\n  // The minimum version still supported by adapter.\\n  // This is the build number for Edge.\\n  webrtcMinimumVersion = 10547;\\n\\n  if (window.RTCIceGatherer) {\\n    // Generate an alphanumeric identifier for cname or mids.\\n    // TODO: use UUIDs instead? https://gist.github.com/jed/982883\\n    var generateIdentifier = function() {\\n      return Math.random().toString(36).substr(2, 10);\\n    };\\n\\n    // The RTCP CNAME used by all peerconnections from the same JS.\\n    var localCName = generateIdentifier();\\n\\n    // SDP helpers - to be moved into separate module.\\n    var SDPUtils = {};\\n\\n    // Splits SDP into lines, dealing with both CRLF and LF.\\n    SDPUtils.splitLines = function(blob) {\\n      return blob.trim().split('\\\\n').map(function(line) {\\n        return line.trim();\\n      });\\n    };\\n\\n    // Splits SDP into sessionpart and mediasections. Ensures CRLF.\\n    SDPUtils.splitSections = function(blob) {\\n      var parts = blob.split('\\\\r\\\\nm=');\\n      return parts.map(function(part, index) {\\n        return (index > 0 ? 'm=' + part : part).trim() + '\\\\r\\\\n';\\n      });\\n    };\\n\\n    // Returns lines that start with a certain prefix.\\n    SDPUtils.matchPrefix = function(blob, prefix) {\\n      return SDPUtils.splitLines(blob).filter(function(line) {\\n        return line.indexOf(prefix) === 0;\\n      });\\n    };\\n\\n    // Parses an ICE candidate line. Sample input:\\n    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8 rport 55996\\\"\\n    SDPUtils.parseCandidate = function(line) {\\n      var parts;\\n      // Parse both variants.\\n      if (line.indexOf('a=candidate:') === 0) {\\n        parts = line.substring(12).split(' ');\\n      } else {\\n        parts = line.substring(10).split(' ');\\n      }\\n\\n      var candidate = {\\n        foundation: parts[0],\\n        component: parts[1],\\n        protocol: parts[2].toLowerCase(),\\n        priority: parseInt(parts[3], 10),\\n        ip: parts[4],\\n        port: parseInt(parts[5], 10),\\n        // skip parts[6] == 'typ'\\n        type: parts[7]\\n      };\\n\\n      for (var i = 8; i < parts.length; i += 2) {\\n        switch (parts[i]) {\\n          case 'raddr':\\n            candidate.relatedAddress = parts[i + 1];\\n            break;\\n          case 'rport':\\n            candidate.relatedPort = parseInt(parts[i + 1], 10);\\n            break;\\n          case 'tcptype':\\n            candidate.tcpType = parts[i + 1];\\n            break;\\n          default: // Unknown extensions are silently ignored.\\n            break;\\n        }\\n      }\\n      return candidate;\\n    };\\n\\n    // Translates a candidate object into SDP candidate attribute.\\n    SDPUtils.writeCandidate = function(candidate) {\\n      var sdp = [];\\n      sdp.push(candidate.foundation);\\n      sdp.push(candidate.component);\\n      sdp.push(candidate.protocol.toUpperCase());\\n      sdp.push(candidate.priority);\\n      sdp.push(candidate.ip);\\n      sdp.push(candidate.port);\\n\\n      var type = candidate.type;\\n      sdp.push('typ');\\n      sdp.push(type);\\n      if (type !== 'host' && candidate.relatedAddress &&\\n          candidate.relatedPort) {\\n        sdp.push('raddr');\\n        sdp.push(candidate.relatedAddress); // was: relAddr\\n        sdp.push('rport');\\n        sdp.push(candidate.relatedPort); // was: relPort\\n      }\\n      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\\n        sdp.push('tcptype');\\n        sdp.push(candidate.tcpType);\\n      }\\n      return 'candidate:' + sdp.join(' ');\\n    };\\n\\n    // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\\n    // a=rtpmap:111 opus/48000/2\\n    SDPUtils.parseRtpMap = function(line) {\\n      var parts = line.substr(9).split(' ');\\n      var parsed = {\\n        payloadType: parseInt(parts.shift(), 10) // was: id\\n      };\\n\\n      parts = parts[0].split('/');\\n\\n      parsed.name = parts[0];\\n      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\\n      parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // was: channels\\n      return parsed;\\n    };\\n\\n    // Generate an a=rtpmap line from RTCRtpCodecCapability or RTCRtpCodecParameters.\\n    SDPUtils.writeRtpMap = function(codec) {\\n      var pt = codec.payloadType;\\n      if (codec.preferredPayloadType !== undefined) {\\n        pt = codec.preferredPayloadType;\\n      }\\n      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\\n          (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\\\\r\\\\n';\\n    };\\n\\n    // Parses an ftmp line, returns dictionary. Sample input:\\n    // a=fmtp:96 vbr=on;cng=on\\n    // Also deals with vbr=on; cng=on\\n    SDPUtils.parseFmtp = function(line) {\\n      var parsed = {};\\n      var kv;\\n      var parts = line.substr(line.indexOf(' ') + 1).split(';');\\n      for (var j = 0; j < parts.length; j++) {\\n        kv = parts[j].trim().split('=');\\n        parsed[kv[0].trim()] = kv[1];\\n      }\\n      return parsed;\\n    };\\n\\n    // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\\n    SDPUtils.writeFtmp = function(codec) {\\n      var line = '';\\n      var pt = codec.payloadType;\\n      if (codec.preferredPayloadType !== undefined) {\\n        pt = codec.preferredPayloadType;\\n      }\\n      if (codec.parameters && codec.parameters.length) {\\n        var params = [];\\n        Object.keys(codec.parameters).forEach(function(param) {\\n          params.push(param + '=' + codec.parameters[param]);\\n        });\\n        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\\\r\\\\n';\\n      }\\n      return line;\\n    };\\n\\n    // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\\n    // a=rtcp-fb:98 nack rpsi\\n    SDPUtils.parseRtcpFb = function(line) {\\n      var parts = line.substr(line.indexOf(' ') + 1).split(' ');\\n      return {\\n        type: parts.shift(),\\n        parameter: parts.join(' ')\\n      };\\n    };\\n    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\\n    SDPUtils.writeRtcpFb = function(codec) {\\n      var lines = '';\\n      var pt = codec.payloadType;\\n      if (codec.preferredPayloadType !== undefined) {\\n        pt = codec.preferredPayloadType;\\n      }\\n      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\\n        // FIXME: special handling for trr-int?\\n        codec.rtcpFeedback.forEach(function(fb) {\\n          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + ' ' + fb.parameter +\\n              '\\\\r\\\\n';\\n        });\\n      }\\n      return lines;\\n    };\\n\\n    // Parses an RFC 5576 ssrc media attribute. Sample input:\\n    // a=ssrc:3735928559 cname:something\\n    SDPUtils.parseSsrcMedia = function(line) {\\n      var sp = line.indexOf(' ');\\n      var parts = {\\n        ssrc: line.substr(7, sp - 7),\\n      };\\n      var colon = line.indexOf(':', sp);\\n      if (colon > -1) {\\n        parts.attribute = line.substr(sp + 1, colon - sp - 1);\\n        parts.value = line.substr(colon + 1);\\n      } else {\\n        parts.attribute = line.substr(sp + 1);\\n      }\\n      return parts;\\n    };\\n\\n    // Extracts DTLS parameters from SDP media section or sessionpart.\\n    // FIXME: for consistency with other functions this should only\\n    //   get the fingerprint line as input. See also getIceParameters.\\n    SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\\n      var lines = SDPUtils.splitLines(mediaSection);\\n      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.\\n      var fpLine = lines.filter(function(line) {\\n        return line.indexOf('a=fingerprint:') === 0;\\n      })[0].substr(14);\\n      // Note: a=setup line is ignored since we use the 'auto' role.\\n      var dtlsParameters = {\\n        role: 'auto',\\n        fingerprints: [{\\n          algorithm: fpLine.split(' ')[0],\\n          value: fpLine.split(' ')[1]\\n        }]\\n      };\\n      return dtlsParameters;\\n    };\\n\\n    // Serializes DTLS parameters to SDP.\\n    SDPUtils.writeDtlsParameters = function(params, setupType) {\\n      var sdp = 'a=setup:' + setupType + '\\\\r\\\\n';\\n      params.fingerprints.forEach(function(fp) {\\n        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\\\r\\\\n';\\n      });\\n      return sdp;\\n    };\\n    // Parses ICE information from SDP media section or sessionpart.\\n    // FIXME: for consistency with other functions this should only\\n    //   get the ice-ufrag and ice-pwd lines as input.\\n    SDPUtils.getIceParameters = function(mediaSection, sessionpart) {\\n      var lines = SDPUtils.splitLines(mediaSection);\\n      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.\\n      var iceParameters = {\\n        usernameFragment: lines.filter(function(line) {\\n          return line.indexOf('a=ice-ufrag:') === 0;\\n        })[0].substr(12),\\n        password: lines.filter(function(line) {\\n          return line.indexOf('a=ice-pwd:') === 0;\\n        })[0].substr(10)\\n      };\\n      return iceParameters;\\n    };\\n\\n    // Serializes ICE parameters to SDP.\\n    SDPUtils.writeIceParameters = function(params) {\\n      return 'a=ice-ufrag:' + params.usernameFragment + '\\\\r\\\\n' +\\n          'a=ice-pwd:' + params.password + '\\\\r\\\\n';\\n    };\\n\\n    // Parses the SDP media section and returns RTCRtpParameters.\\n    SDPUtils.parseRtpParameters = function(mediaSection) {\\n      var description = {\\n        codecs: [],\\n        headerExtensions: [],\\n        fecMechanisms: [],\\n        rtcp: []\\n      };\\n      var lines = SDPUtils.splitLines(mediaSection);\\n      var mline = lines[0].split(' ');\\n      for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\\n        var pt = mline[i];\\n        var rtpmapline = SDPUtils.matchPrefix(\\n            mediaSection, 'a=rtpmap:' + pt + ' ')[0];\\n        if (rtpmapline) {\\n          var codec = SDPUtils.parseRtpMap(rtpmapline);\\n          var fmtps = SDPUtils.matchPrefix(\\n              mediaSection, 'a=fmtp:' + pt + ' ');\\n          // Only the first a=fmtp:<pt> is considered.\\n          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\\n          codec.rtcpFeedback = SDPUtils.matchPrefix(\\n              mediaSection, 'a=rtcp-fb:' + pt + ' ')\\n            .map(SDPUtils.parseRtcpFb);\\n          description.codecs.push(codec);\\n        }\\n      }\\n      // FIXME: parse headerExtensions, fecMechanisms and rtcp.\\n      return description;\\n    };\\n\\n    // Generates parts of the SDP media section describing the capabilities / parameters.\\n    SDPUtils.writeRtpDescription = function(kind, caps) {\\n      var sdp = '';\\n\\n      // Build the mline.\\n      sdp += 'm=' + kind + ' ';\\n      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\\n      sdp += ' UDP/TLS/RTP/SAVPF ';\\n      sdp += caps.codecs.map(function(codec) {\\n        if (codec.preferredPayloadType !== undefined) {\\n          return codec.preferredPayloadType;\\n        }\\n        return codec.payloadType;\\n      }).join(' ') + '\\\\r\\\\n';\\n\\n      sdp += 'c=IN IP4 0.0.0.0\\\\r\\\\n';\\n      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\\\r\\\\n';\\n\\n      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\\n      caps.codecs.forEach(function(codec) {\\n        sdp += SDPUtils.writeRtpMap(codec);\\n        sdp += SDPUtils.writeFtmp(codec);\\n        sdp += SDPUtils.writeRtcpFb(codec);\\n      });\\n      // FIXME: add headerExtensions, fecMechanismş and rtcp.\\n      sdp += 'a=rtcp-mux\\\\r\\\\n';\\n      return sdp;\\n    };\\n\\n    SDPUtils.writeSessionBoilerplate = function() {\\n      // FIXME: sess-id should be an NTP timestamp.\\n      return 'v=0\\\\r\\\\n' +\\n          'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\\\\r\\\\n' +\\n          's=-\\\\r\\\\n' +\\n          't=0 0\\\\r\\\\n';\\n    };\\n\\n    SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\\n      var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\\n\\n      // Map ICE parameters (ufrag, pwd) to SDP.\\n      sdp += SDPUtils.writeIceParameters(\\n          transceiver.iceGatherer.getLocalParameters());\\n\\n      // Map DTLS parameters to SDP.\\n      sdp += SDPUtils.writeDtlsParameters(\\n          transceiver.dtlsTransport.getLocalParameters(),\\n          type === 'offer' ? 'actpass' : 'active');\\n\\n      sdp += 'a=mid:' + transceiver.mid + '\\\\r\\\\n';\\n\\n      if (transceiver.rtpSender && transceiver.rtpReceiver) {\\n        sdp += 'a=sendrecv\\\\r\\\\n';\\n      } else if (transceiver.rtpSender) {\\n        sdp += 'a=sendonly\\\\r\\\\n';\\n      } else if (transceiver.rtpReceiver) {\\n        sdp += 'a=recvonly\\\\r\\\\n';\\n      } else {\\n        sdp += 'a=inactive\\\\r\\\\n';\\n      }\\n\\n      // FIXME: for RTX there might be multiple SSRCs. Not implemented in Edge yet.\\n      if (transceiver.rtpSender) {\\n        var msid = 'msid:' + stream.id + ' ' +\\n            transceiver.rtpSender.track.id + '\\\\r\\\\n';\\n        sdp += 'a=' + msid;\\n        sdp += 'a=ssrc:' + transceiver.sendSsrc + ' ' + msid;\\n      }\\n      // FIXME: this should be written by writeRtpDescription.\\n      sdp += 'a=ssrc:' + transceiver.sendSsrc + ' cname:' +\\n          localCName + '\\\\r\\\\n';\\n      return sdp;\\n    };\\n\\n    // Gets the direction from the mediaSection or the sessionpart.\\n    SDPUtils.getDirection = function(mediaSection, sessionpart) {\\n      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\\n      var lines = SDPUtils.splitLines(mediaSection);\\n      for (var i = 0; i < lines.length; i++) {\\n        switch (lines[i]) {\\n          case 'a=sendrecv':\\n          case 'a=sendonly':\\n          case 'a=recvonly':\\n          case 'a=inactive':\\n            return lines[i].substr(2);\\n        }\\n      }\\n      if (sessionpart) {\\n        return SDPUtils.getDirection(sessionpart);\\n      }\\n      return 'sendrecv';\\n    };\\n\\n    // ORTC defines an RTCIceCandidate object but no constructor.\\n    // Not implemented in Edge.\\n    if (!window.RTCIceCandidate) {\\n      window.RTCIceCandidate = function(args) {\\n        return args;\\n      };\\n    }\\n    // ORTC does not have a session description object but\\n    // other browsers (i.e. Chrome) that will support both PC and ORTC\\n    // in the future might have this defined already.\\n    if (!window.RTCSessionDescription) {\\n      window.RTCSessionDescription = function(args) {\\n        return args;\\n      };\\n    }\\n\\n    window.RTCPeerConnection = function(config) {\\n      var self = this;\\n\\n      this.onicecandidate = null;\\n      this.onaddstream = null;\\n      this.onremovestream = null;\\n      this.onsignalingstatechange = null;\\n      this.oniceconnectionstatechange = null;\\n      this.onnegotiationneeded = null;\\n      this.ondatachannel = null;\\n\\n      this.localStreams = [];\\n      this.remoteStreams = [];\\n      this.getLocalStreams = function() { return self.localStreams; };\\n      this.getRemoteStreams = function() { return self.remoteStreams; };\\n\\n      this.localDescription = new RTCSessionDescription({\\n        type: '',\\n        sdp: ''\\n      });\\n      this.remoteDescription = new RTCSessionDescription({\\n        type: '',\\n        sdp: ''\\n      });\\n      this.signalingState = 'stable';\\n      this.iceConnectionState = 'new';\\n\\n      this.iceOptions = {\\n        gatherPolicy: 'all',\\n        iceServers: []\\n      };\\n      if (config && config.iceTransportPolicy) {\\n        switch (config.iceTransportPolicy) {\\n          case 'all':\\n          case 'relay':\\n            this.iceOptions.gatherPolicy = config.iceTransportPolicy;\\n            break;\\n          case 'none':\\n            // FIXME: remove once implementation and spec have added this.\\n            throw new TypeError('iceTransportPolicy \\\"none\\\" not supported');\\n        }\\n      }\\n      if (config && config.iceServers) {\\n        // Edge does not like\\n        // 1) stun:\\n        // 2) turn: that does not have all of turn:host:port?transport=udp\\n        // 3) an array of urls\\n        config.iceServers.forEach(function(server) {\\n          if (server.urls) {\\n            var url;\\n            if (typeof(server.urls) === 'string') {\\n              url = server.urls;\\n            } else {\\n              url = server.urls[0];\\n            }\\n            if (url.indexOf('transport=udp') !== -1) {\\n              self.iceServers.push({\\n                username: server.username,\\n                credential: server.credential,\\n                urls: url\\n              });\\n            }\\n          }\\n        });\\n      }\\n\\n      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\\n      // everything that is needed to describe a SDP m-line.\\n      this.transceivers = [];\\n\\n      // since the iceGatherer is currently created in createOffer but we\\n      // must not emit candidates until after setLocalDescription we buffer\\n      // them in this array.\\n      this._localIceCandidatesBuffer = [];\\n    };\\n\\n    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {\\n      var self = this;\\n      // FIXME: need to apply ice candidates in a way which is async but in-order\\n      this._localIceCandidatesBuffer.forEach(function(event) {\\n        if (self.onicecandidate !== null) {\\n          self.onicecandidate(event);\\n        }\\n      });\\n      this._localIceCandidatesBuffer = [];\\n    };\\n\\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\\n      // Clone is necessary for local demos mostly, attaching directly\\n      // to two different senders does not work (build 10547).\\n      this.localStreams.push(stream.clone());\\n      this._maybeFireNegotiationNeeded();\\n    };\\n\\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\\n      var idx = this.localStreams.indexOf(stream);\\n      if (idx > -1) {\\n        this.localStreams.splice(idx, 1);\\n        this._maybeFireNegotiationNeeded();\\n      }\\n    };\\n\\n    // Determines the intersection of local and remote capabilities.\\n    window.RTCPeerConnection.prototype._getCommonCapabilities =\\n        function(localCapabilities, remoteCapabilities) {\\n      var commonCapabilities = {\\n        codecs: [],\\n        headerExtensions: [],\\n        fecMechanisms: []\\n      };\\n      localCapabilities.codecs.forEach(function(lCodec) {\\n        for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\\n          var rCodec = remoteCapabilities.codecs[i];\\n          if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\\n              lCodec.clockRate === rCodec.clockRate &&\\n              lCodec.numChannels === rCodec.numChannels) {\\n            // push rCodec so we reply with offerer payload type\\n            commonCapabilities.codecs.push(rCodec);\\n\\n            // FIXME: also need to determine intersection between\\n            // .rtcpFeedback and .parameters\\n            break;\\n          }\\n        }\\n      });\\n\\n      localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\\n        for (var i = 0; i < remoteCapabilities.headerExtensions.length; i++) {\\n          var rHeaderExtension = remoteCapabilities.headerExtensions[i];\\n          if (lHeaderExtension.uri === rHeaderExtension.uri) {\\n            commonCapabilities.headerExtensions.push(rHeaderExtension);\\n            break;\\n          }\\n        }\\n      });\\n\\n      // FIXME: fecMechanisms\\n      return commonCapabilities;\\n    };\\n\\n    // Create ICE gatherer, ICE transport and DTLS transport.\\n    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =\\n        function(mid, sdpMLineIndex) {\\n      var self = this;\\n      var iceGatherer = new RTCIceGatherer(self.iceOptions);\\n      var iceTransport = new RTCIceTransport(iceGatherer);\\n      iceGatherer.onlocalcandidate = function(evt) {\\n        var event = {};\\n        event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\\n\\n        var cand = evt.candidate;\\n        // Edge emits an empty object for RTCIceCandidateComplete‥\\n        if (!cand || Object.keys(cand).length === 0) {\\n          // polyfill since RTCIceGatherer.state is not implemented in Edge 10547 yet.\\n          if (iceGatherer.state === undefined) {\\n            iceGatherer.state = 'completed';\\n          }\\n\\n          // Emit a candidate with type endOfCandidates to make the samples work.\\n          // Edge requires addIceCandidate with this empty candidate to start checking.\\n          // The real solution is to signal end-of-candidates to the other side when\\n          // getting the null candidate but some apps (like the samples) don't do that.\\n          event.candidate.candidate =\\n              'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';\\n        } else {\\n          // RTCIceCandidate doesn't have a component, needs to be added\\n          cand.component = iceTransport.component === 'RTCP' ? 2 : 1;\\n          event.candidate.candidate = SDPUtils.writeCandidate(cand);\\n        }\\n\\n        var complete = self.transceivers.every(function(transceiver) {\\n          return transceiver.iceGatherer &&\\n              transceiver.iceGatherer.state === 'completed';\\n        });\\n        // FIXME: update .localDescription with candidate and (potentially) end-of-candidates.\\n        //     To make this harder, the gatherer might emit candidates before localdescription\\n        //     is set. To make things worse, gather.getLocalCandidates still errors in\\n        //     Edge 10547 when no candidates have been gathered yet.\\n\\n        if (self.onicecandidate !== null) {\\n          // Emit candidate if localDescription is set.\\n          // Also emits null candidate when all gatherers are complete.\\n          if (self.localDescription && self.localDescription.type === '') {\\n            self._localIceCandidatesBuffer.push(event);\\n            if (complete) {\\n              self._localIceCandidatesBuffer.push({});\\n            }\\n          } else {\\n            self.onicecandidate(event);\\n            if (complete) {\\n              self.onicecandidate({});\\n            }\\n          }\\n        }\\n      };\\n      iceTransport.onicestatechange = function() {\\n        self._updateConnectionState();\\n      };\\n\\n      var dtlsTransport = new RTCDtlsTransport(iceTransport);\\n      dtlsTransport.ondtlsstatechange = function() {\\n        self._updateConnectionState();\\n      };\\n      dtlsTransport.onerror = function() {\\n        // onerror does not set state to failed by itself.\\n        dtlsTransport.state = 'failed';\\n        self._updateConnectionState();\\n      };\\n\\n      return {\\n        iceGatherer: iceGatherer,\\n        iceTransport: iceTransport,\\n        dtlsTransport: dtlsTransport\\n      };\\n    };\\n\\n    // Start the RTP Sender and Receiver for a transceiver.\\n    window.RTCPeerConnection.prototype._transceive = function(transceiver,\\n        send, recv) {\\n      var params = this._getCommonCapabilities(transceiver.localCapabilities,\\n          transceiver.remoteCapabilities);\\n      if (send && transceiver.rtpSender) {\\n        params.encodings = [{\\n          ssrc: transceiver.sendSsrc\\n        }];\\n        params.rtcp = {\\n          cname: localCName,\\n          ssrc: transceiver.recvSsrc\\n        };\\n        transceiver.rtpSender.send(params);\\n      }\\n      if (recv && transceiver.rtpReceiver) {\\n        params.encodings = [{\\n          ssrc: transceiver.recvSsrc\\n        }];\\n        params.rtcp = {\\n          cname: transceiver.cname,\\n          ssrc: transceiver.sendSsrc\\n        };\\n        transceiver.rtpReceiver.receive(params);\\n      }\\n    };\\n\\n    window.RTCPeerConnection.prototype.setLocalDescription =\\n        function(description) {\\n      var self = this;\\n      if (description.type === 'offer') {\\n        if (!this._pendingOffer) {\\n        } else {\\n          this.transceivers = this._pendingOffer;\\n          delete this._pendingOffer;\\n        }\\n      } else if (description.type === 'answer') {\\n        var sections = SDPUtils.splitSections(self.remoteDescription.sdp);\\n        var sessionpart = sections.shift();\\n        sections.forEach(function(mediaSection, sdpMLineIndex) {\\n          var transceiver = self.transceivers[sdpMLineIndex];\\n          var iceGatherer = transceiver.iceGatherer;\\n          var iceTransport = transceiver.iceTransport;\\n          var dtlsTransport = transceiver.dtlsTransport;\\n          var localCapabilities = transceiver.localCapabilities;\\n          var remoteCapabilities = transceiver.remoteCapabilities;\\n          var rejected = mediaSection.split('\\\\n', 1)[0]\\n              .split(' ', 2)[1] === '0';\\n\\n          if (!rejected) {\\n            var remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\\n                sessionpart);\\n            iceTransport.start(iceGatherer, remoteIceParameters, 'controlled');\\n\\n            var remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\\n              sessionpart);\\n            dtlsTransport.start(remoteDtlsParameters);\\n\\n            // Calculate intersection of capabilities.\\n            var params = self._getCommonCapabilities(localCapabilities,\\n                remoteCapabilities);\\n\\n            // Start the RTCRtpSender. The RTCRtpReceiver for this transceiver\\n            // has already been started in setRemoteDescription.\\n            self._transceive(transceiver,\\n                params.codecs.length > 0,\\n                false);\\n          }\\n        });\\n      }\\n\\n      this.localDescription = description;\\n      switch (description.type) {\\n        case 'offer':\\n          this._updateSignalingState('have-local-offer');\\n          break;\\n        case 'answer':\\n          this._updateSignalingState('stable');\\n          break;\\n        default:\\n          throw new TypeError('unsupported type \\\"' + description.type + '\\\"');\\n      }\\n\\n      // If a success callback was provided, emit ICE candidates after it has been\\n      // executed. Otherwise, emit callback after the Promise is resolved.\\n      var hasCallback = arguments.length > 1 &&\\n        typeof arguments[1] === 'function';\\n      if (hasCallback) {\\n        var cb = arguments[1];\\n        window.setTimeout(function() {\\n          cb();\\n          self._emitBufferedCandidates();\\n        }, 0);\\n      }\\n      var p = Promise.resolve();\\n      p.then(function() {\\n        if (!hasCallback) {\\n          window.setTimeout(self._emitBufferedCandidates.bind(self), 0);\\n        }\\n      });\\n      return p;\\n    };\\n\\n    window.RTCPeerConnection.prototype.setRemoteDescription =\\n        function(description) {\\n      var self = this;\\n      var stream = new MediaStream();\\n      var sections = SDPUtils.splitSections(description.sdp);\\n      var sessionpart = sections.shift();\\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\\n        var lines = SDPUtils.splitLines(mediaSection);\\n        var mline = lines[0].substr(2).split(' ');\\n        var kind = mline[0];\\n        var rejected = mline[1] === '0';\\n        var direction = SDPUtils.getDirection(mediaSection, sessionpart);\\n\\n        var transceiver;\\n        var iceGatherer;\\n        var iceTransport;\\n        var dtlsTransport;\\n        var rtpSender;\\n        var rtpReceiver;\\n        var sendSsrc;\\n        var recvSsrc;\\n        var localCapabilities;\\n\\n        // FIXME: ensure the mediaSection has rtcp-mux set.\\n        var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\\n        var remoteIceParameters;\\n        var remoteDtlsParameters;\\n        if (!rejected) {\\n          remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\\n              sessionpart);\\n          remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\\n              sessionpart);\\n        }\\n        var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0].substr(6);\\n\\n        var cname;\\n        // Gets the first SSRC. Note that with RTX there might be multiple SSRCs.\\n        var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\\n            .map(function(line) {\\n              return SDPUtils.parseSsrcMedia(line);\\n            })\\n            .filter(function(obj) {\\n              return obj.attribute === 'cname';\\n            })[0];\\n        if (remoteSsrc) {\\n          recvSsrc = parseInt(remoteSsrc.ssrc, 10);\\n          cname = remoteSsrc.value;\\n        }\\n\\n        if (description.type === 'offer') {\\n          var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);\\n\\n          localCapabilities = RTCRtpReceiver.getCapabilities(kind);\\n          sendSsrc = (2 * sdpMLineIndex + 2) * 1001;\\n\\n          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\\n\\n          // FIXME: not correct when there are multiple streams but that is\\n          // not currently supported in this shim.\\n          stream.addTrack(rtpReceiver.track);\\n\\n          // FIXME: look at direction.\\n          if (self.localStreams.length > 0 &&\\n              self.localStreams[0].getTracks().length >= sdpMLineIndex) {\\n            // FIXME: actually more complicated, needs to match types etc\\n            var localtrack = self.localStreams[0].getTracks()[sdpMLineIndex];\\n            rtpSender = new RTCRtpSender(localtrack, transports.dtlsTransport);\\n          }\\n\\n          self.transceivers[sdpMLineIndex] = {\\n            iceGatherer: transports.iceGatherer,\\n            iceTransport: transports.iceTransport,\\n            dtlsTransport: transports.dtlsTransport,\\n            localCapabilities: localCapabilities,\\n            remoteCapabilities: remoteCapabilities,\\n            rtpSender: rtpSender,\\n            rtpReceiver: rtpReceiver,\\n            kind: kind,\\n            mid: mid,\\n            cname: cname,\\n            sendSsrc: sendSsrc,\\n            recvSsrc: recvSsrc\\n          };\\n          // Start the RTCRtpReceiver now. The RTPSender is started in setLocalDescription.\\n          self._transceive(self.transceivers[sdpMLineIndex],\\n              false,\\n              direction === 'sendrecv' || direction === 'sendonly');\\n        } else if (description.type === 'answer' && !rejected) {\\n          transceiver = self.transceivers[sdpMLineIndex];\\n          iceGatherer = transceiver.iceGatherer;\\n          iceTransport = transceiver.iceTransport;\\n          dtlsTransport = transceiver.dtlsTransport;\\n          rtpSender = transceiver.rtpSender;\\n          rtpReceiver = transceiver.rtpReceiver;\\n          sendSsrc = transceiver.sendSsrc;\\n          //recvSsrc = transceiver.recvSsrc;\\n          localCapabilities = transceiver.localCapabilities;\\n\\n          self.transceivers[sdpMLineIndex].recvSsrc = recvSsrc;\\n          self.transceivers[sdpMLineIndex].remoteCapabilities =\\n              remoteCapabilities;\\n          self.transceivers[sdpMLineIndex].cname = cname;\\n\\n          iceTransport.start(iceGatherer, remoteIceParameters, 'controlling');\\n          dtlsTransport.start(remoteDtlsParameters);\\n\\n          self._transceive(transceiver,\\n              direction === 'sendrecv' || direction === 'recvonly',\\n              direction === 'sendrecv' || direction === 'sendonly');\\n\\n          if (rtpReceiver &&\\n              (direction === 'sendrecv' || direction === 'sendonly')) {\\n            stream.addTrack(rtpReceiver.track);\\n          } else {\\n            // FIXME: actually the receiver should be created later.\\n            delete transceiver.rtpReceiver;\\n          }\\n        }\\n      });\\n\\n      this.remoteDescription = description;\\n      switch (description.type) {\\n        case 'offer':\\n          this._updateSignalingState('have-remote-offer');\\n          break;\\n        case 'answer':\\n          this._updateSignalingState('stable');\\n          break;\\n        default:\\n          throw new TypeError('unsupported type \\\"' + description.type + '\\\"');\\n      }\\n      window.setTimeout(function() {\\n        if (self.onaddstream !== null && stream.getTracks().length) {\\n          self.remoteStreams.push(stream);\\n          window.setTimeout(function() {\\n            self.onaddstream({stream: stream});\\n          }, 0);\\n        }\\n      }, 0);\\n      if (arguments.length > 1 && typeof arguments[1] === 'function') {\\n        window.setTimeout(arguments[1], 0);\\n      }\\n      return Promise.resolve();\\n    };\\n\\n    window.RTCPeerConnection.prototype.close = function() {\\n      this.transceivers.forEach(function(transceiver) {\\n        /* not yet\\n        if (transceiver.iceGatherer) {\\n          transceiver.iceGatherer.close();\\n        }\\n        */\\n        if (transceiver.iceTransport) {\\n          transceiver.iceTransport.stop();\\n        }\\n        if (transceiver.dtlsTransport) {\\n          transceiver.dtlsTransport.stop();\\n        }\\n        if (transceiver.rtpSender) {\\n          transceiver.rtpSender.stop();\\n        }\\n        if (transceiver.rtpReceiver) {\\n          transceiver.rtpReceiver.stop();\\n        }\\n      });\\n      // FIXME: clean up tracks, local streams, remote streams, etc\\n      this._updateSignalingState('closed');\\n    };\\n\\n    // Update the signaling state.\\n    window.RTCPeerConnection.prototype._updateSignalingState =\\n        function(newState) {\\n      this.signalingState = newState;\\n      if (this.onsignalingstatechange !== null) {\\n        this.onsignalingstatechange();\\n      }\\n    };\\n\\n    // Determine whether to fire the negotiationneeded event.\\n    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =\\n        function() {\\n      // Fire away (for now).\\n      if (this.onnegotiationneeded !== null) {\\n        this.onnegotiationneeded();\\n      }\\n    };\\n\\n    // Update the connection state.\\n    window.RTCPeerConnection.prototype._updateConnectionState =\\n        function() {\\n      var self = this;\\n      var newState;\\n      var states = {\\n        'new': 0,\\n        closed: 0,\\n        connecting: 0,\\n        checking: 0,\\n        connected: 0,\\n        completed: 0,\\n        failed: 0\\n      };\\n      this.transceivers.forEach(function(transceiver) {\\n        states[transceiver.iceTransport.state]++;\\n        states[transceiver.dtlsTransport.state]++;\\n      });\\n      // ICETransport.completed and connected are the same for this purpose.\\n      states.connected += states.completed;\\n\\n      newState = 'new';\\n      if (states.failed > 0) {\\n        newState = 'failed';\\n      } else if (states.connecting > 0 || states.checking > 0) {\\n        newState = 'connecting';\\n      } else if (states.disconnected > 0) {\\n        newState = 'disconnected';\\n      } else if (states.new > 0) {\\n        newState = 'new';\\n      } else if (states.connecting > 0 || states.completed > 0) {\\n        newState = 'connected';\\n      }\\n\\n      if (newState !== self.iceConnectionState) {\\n        self.iceConnectionState = newState;\\n        if (this.oniceconnectionstatechange !== null) {\\n          this.oniceconnectionstatechange();\\n        }\\n      }\\n    };\\n\\n    window.RTCPeerConnection.prototype.createOffer = function() {\\n      var self = this;\\n      if (this._pendingOffer) {\\n        throw new Error('createOffer called while there is a pending offer.');\\n      }\\n      var offerOptions;\\n      if (arguments.length === 1 && typeof arguments[0] !== 'function') {\\n        offerOptions = arguments[0];\\n      } else if (arguments.length === 3) {\\n        offerOptions = arguments[2];\\n      }\\n\\n      var tracks = [];\\n      var numAudioTracks = 0;\\n      var numVideoTracks = 0;\\n      // Default to sendrecv.\\n      if (this.localStreams.length) {\\n        numAudioTracks = this.localStreams[0].getAudioTracks().length;\\n        numVideoTracks = this.localStreams[0].getVideoTracks().length;\\n      }\\n      // Determine number of audio and video tracks we need to send/recv.\\n      if (offerOptions) {\\n        // Reject Chrome legacy constraints.\\n        if (offerOptions.mandatory || offerOptions.optional) {\\n          throw new TypeError(\\n              'Legacy mandatory/optional constraints not supported.');\\n        }\\n        if (offerOptions.offerToReceiveAudio !== undefined) {\\n          numAudioTracks = offerOptions.offerToReceiveAudio;\\n        }\\n        if (offerOptions.offerToReceiveVideo !== undefined) {\\n          numVideoTracks = offerOptions.offerToReceiveVideo;\\n        }\\n      }\\n      if (this.localStreams.length) {\\n        // Push local streams.\\n        this.localStreams[0].getTracks().forEach(function(track) {\\n          tracks.push({\\n            kind: track.kind,\\n            track: track,\\n            wantReceive: track.kind === 'audio' ?\\n                numAudioTracks > 0 : numVideoTracks > 0\\n          });\\n          if (track.kind === 'audio') {\\n            numAudioTracks--;\\n          } else if (track.kind === 'video') {\\n            numVideoTracks--;\\n          }\\n        });\\n      }\\n      // Create M-lines for recvonly streams.\\n      while (numAudioTracks > 0 || numVideoTracks > 0) {\\n        if (numAudioTracks > 0) {\\n          tracks.push({\\n            kind: 'audio',\\n            wantReceive: true\\n          });\\n          numAudioTracks--;\\n        }\\n        if (numVideoTracks > 0) {\\n          tracks.push({\\n            kind: 'video',\\n            wantReceive: true\\n          });\\n          numVideoTracks--;\\n        }\\n      }\\n\\n      var sdp = SDPUtils.writeSessionBoilerplate();\\n      var transceivers = [];\\n      tracks.forEach(function(mline, sdpMLineIndex) {\\n        // For each track, create an ice gatherer, ice transport, dtls transport,\\n        // potentially rtpsender and rtpreceiver.\\n        var track = mline.track;\\n        var kind = mline.kind;\\n        var mid = generateIdentifier();\\n\\n        var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);\\n\\n        var localCapabilities = RTCRtpSender.getCapabilities(kind);\\n        var rtpSender;\\n        var rtpReceiver;\\n\\n        // generate an ssrc now, to be used later in rtpSender.send\\n        var sendSsrc = (2 * sdpMLineIndex + 1) * 1001;\\n        if (track) {\\n          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);\\n        }\\n\\n        if (mline.wantReceive) {\\n          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\\n        }\\n\\n        transceivers[sdpMLineIndex] = {\\n          iceGatherer: transports.iceGatherer,\\n          iceTransport: transports.iceTransport,\\n          dtlsTransport: transports.dtlsTransport,\\n          localCapabilities: localCapabilities,\\n          remoteCapabilities: null,\\n          rtpSender: rtpSender,\\n          rtpReceiver: rtpReceiver,\\n          kind: kind,\\n          mid: mid,\\n          sendSsrc: sendSsrc,\\n          recvSsrc: null\\n        };\\n        var transceiver = transceivers[sdpMLineIndex];\\n        sdp += SDPUtils.writeMediaSection(transceiver,\\n            transceiver.localCapabilities, 'offer', self.localStreams[0]);\\n      });\\n\\n      this._pendingOffer = transceivers;\\n      var desc = new RTCSessionDescription({\\n        type: 'offer',\\n        sdp: sdp\\n      });\\n      if (arguments.length && typeof arguments[0] === 'function') {\\n        window.setTimeout(arguments[0], 0, desc);\\n      }\\n      return Promise.resolve(desc);\\n    };\\n\\n    window.RTCPeerConnection.prototype.createAnswer = function() {\\n      var self = this;\\n      var answerOptions;\\n      if (arguments.length === 1 && typeof arguments[0] !== 'function') {\\n        answerOptions = arguments[0];\\n      } else if (arguments.length === 3) {\\n        answerOptions = arguments[2];\\n      }\\n\\n      var sdp = SDPUtils.writeSessionBoilerplate();\\n      this.transceivers.forEach(function(transceiver) {\\n        // Calculate intersection of capabilities.\\n        var commonCapabilities = self._getCommonCapabilities(\\n            transceiver.localCapabilities,\\n            transceiver.remoteCapabilities);\\n\\n        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,\\n            'answer', self.localStreams[0]);\\n      });\\n\\n      var desc = new RTCSessionDescription({\\n        type: 'answer',\\n        sdp: sdp\\n      });\\n      if (arguments.length && typeof arguments[0] === 'function') {\\n        window.setTimeout(arguments[0], 0, desc);\\n      }\\n      return Promise.resolve(desc);\\n    };\\n\\n    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\\n      var mLineIndex = candidate.sdpMLineIndex;\\n      if (candidate.sdpMid) {\\n        for (var i = 0; i < this.transceivers.length; i++) {\\n          if (this.transceivers[i].mid === candidate.sdpMid) {\\n            mLineIndex = i;\\n            break;\\n          }\\n        }\\n      }\\n      var transceiver = this.transceivers[mLineIndex];\\n      if (transceiver) {\\n        var cand = Object.keys(candidate.candidate).length > 0 ?\\n            SDPUtils.parseCandidate(candidate.candidate) : {};\\n        // Ignore Chrome's invalid candidates since Edge does not like them.\\n        if (cand.protocol === 'tcp' && cand.port === 0) {\\n          return;\\n        }\\n        // Ignore RTCP candidates, we assume RTCP-MUX.\\n        if (cand.component !== '1') {\\n          return;\\n        }\\n        // A dirty hack to make samples work.\\n        if (cand.type === 'endOfCandidates') {\\n          cand = {};\\n        }\\n        transceiver.iceTransport.addRemoteCandidate(cand);\\n      }\\n      if (arguments.length > 1 && typeof arguments[1] === 'function') {\\n        window.setTimeout(arguments[1], 0);\\n      }\\n      return Promise.resolve();\\n    };\\n\\n    window.RTCPeerConnection.prototype.getStats = function() {\\n      var promises = [];\\n      this.transceivers.forEach(function(transceiver) {\\n        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\\n            'dtlsTransport'].forEach(function(method) {\\n          if (transceiver[method]) {\\n            promises.push(transceiver[method].getStats());\\n          }\\n        });\\n      });\\n      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&\\n          arguments[1];\\n      return new Promise(function(resolve) {\\n        var results = {};\\n        Promise.all(promises).then(function(res) {\\n          res.forEach(function(result) {\\n            Object.keys(result).forEach(function(id) {\\n              results[id] = result[id];\\n            });\\n          });\\n          if (cb) {\\n            window.setTimeout(cb, 0, results);\\n          }\\n          resolve(results);\\n        });\\n      });\\n    };\\n  }\\n} else {\\n  webrtcUtils.log('Browser does not appear to be WebRTC-capable');\\n}\\n\\n// Polyfill ontrack on browsers that don't yet have it\\nif (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\\n    window.RTCPeerConnection.prototype)) {\\n  Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\\n    get: function() { return this._ontrack; },\\n    set: function(f) {\\n      var self = this;\\n      if (this._ontrack) {\\n        this.removeEventListener('track', this._ontrack);\\n        this.removeEventListener('addstream', this._ontrackpoly);\\n      }\\n      this.addEventListener('track', this._ontrack = f);\\n      this.addEventListener('addstream', this._ontrackpoly = function(e) {\\n        if (webrtcDetectedBrowser === 'chrome') {\\n          // onaddstream does not fire when a track is added to an existing stream.\\n          // but stream.onaddtrack is implemented so we use thたt\\n          e.stream.addEventListener('addtrack', function(te) {\\n            var event = new Event('track');\\n            event.track = te.track;\\n            event.receiver = {track: te.track};\\n            event.streams = [e.stream];\\n            self.dispatchEvent(event);\\n          });\\n        }\\n        e.stream.getTracks().forEach(function(track) {\\n          var event = new Event('track');\\n          event.track = track;\\n          event.receiver = {track: track};\\n          event.streams = [e.stream];\\n          this.dispatchEvent(event);\\n        }.bind(this));\\n      }.bind(this));\\n    }\\n  });\\n}\\n\\n// Returns the result of getUserMedia as a Promise.\\nfunction requestUserMedia(constraints) {\\n  return new Promise(function(resolve, reject) {\\n    getUserMedia(constraints, resolve, reject);\\n  });\\n}\\n\\nvar webrtcTesting = {};\\ntry {\\n  Object.defineProperty(webrtcTesting, 'version', {\\n    set: function(version) {\\n      webrtcDetectedVersion = version;\\n    }\\n  });\\n} catch (e) {}\\n\\nif (true) {\\n  var RTCPeerConnection;\\n  var RTCIceCandidate;\\n  var RTCSessionDescription;\\n  if (typeof window !== 'undefined') {\\n    RTCPeerConnection = window.RTCPeerConnection;\\n    RTCIceCandidate = window.RTCIceCandidate;\\n    RTCSessionDescription = window.RTCSessionDescription;\\n  }\\n  module.exports = {\\n    RTCPeerConnection: RTCPeerConnection,\\n    RTCIceCandidate: RTCIceCandidate,\\n    RTCSessionDescription: RTCSessionDescription,\\n    getUserMedia: getUserMedia,\\n    attachMediaStream: attachMediaStream,\\n    reattachMediaStream: reattachMediaStream,\\n    webrtcDetectedBrowser: webrtcDetectedBrowser,\\n    webrtcDetectedVersion: webrtcDetectedVersion,\\n    webrtcMinimumVersion: webrtcMinimumVersion,\\n    webrtcTesting: webrtcTesting,\\n    webrtcUtils: webrtcUtils\\n    //requestUserMedia: not exposed on purpose.\\n    //trace: not exposed on purpose.\\n  };\\n} else if ((typeof require === 'function') && (typeof define === 'function')) {\\n  // Expose objects and functions when RequireJS is doing the loading.\\n  define([], function() {\\n    return {\\n      RTCPeerConnection: window.RTCPeerConnection,\\n      RTCIceCandidate: window.RTCIceCandidate,\\n      RTCSessionDescription: window.RTCSessionDescription,\\n      getUserMedia: getUserMedia,\\n      attachMediaStream: attachMediaStream,\\n      reattachMediaStream: reattachMediaStream,\\n      webrtcDetectedBrowser: webrtcDetectedBrowser,\\n      webrtcDetectedVersion: webrtcDetectedVersion,\\n      webrtcMinimumVersion: webrtcMinimumVersion,\\n      webrtcTesting: webrtcTesting,\\n      webrtcUtils: webrtcUtils\\n      //requestUserMedia: not exposed on purpose.\\n      //trace: not exposed on purpose.\\n    };\\n  });\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///3\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});