(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? \"undefined\" : _typeof(exports)) === 'object' && ( false ? \"undefined\" : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') exports[\"activate\"] = factory();else root[\"activate\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HypertyDescriptor__ = __webpack_require__(1);\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n//import IdentityManager from 'service-framework/dist/IdentityManager';\\n//import {Syncher} from 'service-framework/dist/Syncher';\\n//import {Discovery} from 'service-framework/dist/Discovery';\\n//import {ContextObserver} from 'service-framework/dist/ContextManager';\\n//import {divideURL} from '../utils/utils';\\n//import Search from '../utils/Search';\\n//import EventEmitter from '../utils/EventEmitter';\\n\\n\\nvar UserKwhObserver =\\n/*#__PURE__*/\\nfunction () {\\n  function UserKwhObserver() {\\n    _classCallCheck(this, UserKwhObserver);\\n  }\\n\\n  _createClass(UserKwhObserver, [{\\n    key: \\\"_start\\\",\\n    value: function _start(hypertyURL, bus, configuration, factory) {\\n      this.hypertyURL = hypertyURL;\\n      this._context = factory.createContextObserver(hypertyURL, bus, configuration, ['availability_context']);\\n    }\\n  }, {\\n    key: \\\"start\\\",\\n    value: function start() {\\n      var resumedCallback = function resumedCallback(availability) {\\n        console.log('[UserKwhObserver.onDisconnected]: ', availability);\\n        availability.data.values[0].value = 'unavailable'; // to avoid false disconnects\\n\\n        availability.sync();\\n      };\\n\\n      var resumedInit = [{\\n        value: 'unavailable'\\n      }];\\n      return this._context.start(resumedInit, resumedCallback);\\n    }\\n  }, {\\n    key: \\\"resumeDiscoveries\\\",\\n    value: function resumeDiscoveries() {\\n      return this._context.resumeDiscoveries();\\n    }\\n  }, {\\n    key: \\\"onResumeObserver\\\",\\n    value: function onResumeObserver(callback) {\\n      return this._context.onResumeObserver(callback);\\n    }\\n  }, {\\n    key: \\\"discoverUsers\\\",\\n    value: function discoverUsers(email, domain) {\\n      return this._context.discoverUsers(email, domain);\\n    }\\n    /**\\r\\n     * This function is used to start the user availability observation for a certain user availability reporter\\r\\n     * @param  {DiscoveredObject} hyperty       Hyperty to be observed.\\r\\n     * @return {<Promise> DataObjectObserver}      It returns as a Promise the UserAvailability Data Object Observer.\\r\\n     */\\n\\n  }, {\\n    key: \\\"observe\\\",\\n    value: function observe(hyperty) {\\n      return this._context.observe(hyperty);\\n    }\\n    /**\\r\\n     * This function is used to stop the user availability observation for a certain user\\r\\n     * @param  {string} availability       the UserAvailability Data Object Observer URL to be unobserved.\\r\\n     */\\n\\n  }, {\\n    key: \\\"unobserve\\\",\\n    value: function unobserve(availability) {\\n      return this._context.unobserve(availability);\\n    }\\n  }, {\\n    key: \\\"name\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */].name;\\n    }\\n  }, {\\n    key: \\\"descriptor\\\",\\n    get: function get() {\\n      return __WEBPACK_IMPORTED_MODULE_0__HypertyDescriptor__[\\\"a\\\" /* hypertyDescriptor */];\\n    }\\n  }, {\\n    key: \\\"runtimeHypertyURL\\\",\\n    get: function get() {\\n      return this.hypertyURL;\\n    }\\n  }]);\\n\\n  return UserKwhObserver;\\n}();\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (UserKwhObserver);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL29ic2VydmVyLWt3aC9Vc2VyS3doT2JzZXJ2ZXIuaHkuanM/N2ZiOSJdLCJuYW1lcyI6WyJVc2VyS3doT2JzZXJ2ZXIiLCJoeXBlcnR5VVJMIiwiYnVzIiwiY29uZmlndXJhdGlvbiIsImZhY3RvcnkiLCJfY29udGV4dCIsImNyZWF0ZUNvbnRleHRPYnNlcnZlciIsInJlc3VtZWRDYWxsYmFjayIsImF2YWlsYWJpbGl0eSIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwidmFsdWVzIiwidmFsdWUiLCJzeW5jIiwicmVzdW1lZEluaXQiLCJzdGFydCIsInJlc3VtZURpc2NvdmVyaWVzIiwiY2FsbGJhY2siLCJvblJlc3VtZU9ic2VydmVyIiwiZW1haWwiLCJkb21haW4iLCJkaXNjb3ZlclVzZXJzIiwiaHlwZXJ0eSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJoeXBlcnR5RGVzY3JpcHRvciIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFFTUEsZTs7O0FBRUosNkJBQWM7QUFBQTtBQUFFOzs7OzJCQWNUQyxVLEVBQVlDLEcsRUFBS0MsYSxFQUFlQyxPLEVBQVM7QUFDOUMsV0FBS0gsVUFBTCxHQUFrQkEsVUFBbEI7QUFFQSxXQUFLSSxRQUFMLEdBQWdCRCxPQUFPLENBQUNFLHFCQUFSLENBQThCTCxVQUE5QixFQUEwQ0MsR0FBMUMsRUFBK0NDLGFBQS9DLEVBQTZELENBQUMsc0JBQUQsQ0FBN0QsQ0FBaEI7QUFFRDs7OzRCQUdPO0FBQ04sVUFBSUksZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxZQUFELEVBQWtCO0FBQ3RDQyxlQUFPLENBQUNDLEdBQVIsQ0FBWSxvQ0FBWixFQUFrREYsWUFBbEQ7QUFFQUEsb0JBQVksQ0FBQ0csSUFBYixDQUFrQkMsTUFBbEIsQ0FBeUIsQ0FBekIsRUFBNEJDLEtBQTVCLEdBQW9DLGFBQXBDLENBSHNDLENBSXRDOztBQUNBTCxvQkFBWSxDQUFDTSxJQUFiO0FBQ0QsT0FORDs7QUFRQSxVQUFJQyxXQUFXLEdBQUcsQ0FBQztBQUFDRixhQUFLLEVBQUU7QUFBUixPQUFELENBQWxCO0FBRUEsYUFBTyxLQUFLUixRQUFMLENBQWNXLEtBQWQsQ0FBb0JELFdBQXBCLEVBQWlDUixlQUFqQyxDQUFQO0FBQ0Q7Ozt3Q0FFaUI7QUFDbEIsYUFBTyxLQUFLRixRQUFMLENBQWNZLGlCQUFkLEVBQVA7QUFFRDs7O3FDQUVrQkMsUSxFQUFVO0FBQ3pCLGFBQU8sS0FBS2IsUUFBTCxDQUFjYyxnQkFBZCxDQUErQkQsUUFBL0IsQ0FBUDtBQUNBOzs7a0NBR1lFLEssRUFBTUMsTSxFQUNwQjtBQUNFLGFBQU8sS0FBS2hCLFFBQUwsQ0FBY2lCLGFBQWQsQ0FBNEJGLEtBQTVCLEVBQWtDQyxNQUFsQyxDQUFQO0FBRUQ7QUFFRDs7Ozs7Ozs7NEJBTVFFLE8sRUFDTjtBQUNFLGFBQU8sS0FBS2xCLFFBQUwsQ0FBY21CLE9BQWQsQ0FBc0JELE9BQXRCLENBQVA7QUFFSDtBQUdIOzs7Ozs7OzhCQUtZZixZLEVBQ1I7QUFDRSxhQUFPLEtBQUtILFFBQUwsQ0FBY29CLFNBQWQsQ0FBd0JqQixZQUF4QixDQUFQO0FBRUg7Ozt3QkF4RVM7QUFDUixhQUFPa0IsNkVBQWlCLENBQUNDLElBQXpCO0FBQ0Q7Ozt3QkFFZ0I7QUFDZixhQUFPRCw2RUFBUDtBQUNEOzs7d0JBRXNCO0FBQ3JCLGFBQU8sS0FBS3pCLFVBQVo7QUFDRDs7Ozs7O0FBa0VZRCw4RUFBZiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvSWRlbnRpdHlNYW5hZ2VyJztcclxuLy9pbXBvcnQge1N5bmNoZXJ9IGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvU3luY2hlcic7XHJcbi8vaW1wb3J0IHtEaXNjb3Zlcnl9IGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvRGlzY292ZXJ5JztcclxuLy9pbXBvcnQge0NvbnRleHRPYnNlcnZlcn0gZnJvbSAnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9Db250ZXh0TWFuYWdlcic7XHJcbi8vaW1wb3J0IHtkaXZpZGVVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuLy9pbXBvcnQgU2VhcmNoIGZyb20gJy4uL3V0aWxzL1NlYXJjaCc7XHJcbi8vaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi91dGlscy9FdmVudEVtaXR0ZXInO1xyXG5pbXBvcnQgeyBoeXBlcnR5RGVzY3JpcHRvciB9IGZyb20gJy4vSHlwZXJ0eURlc2NyaXB0b3InO1xyXG5cclxuY2xhc3MgVXNlckt3aE9ic2VydmVyICB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgZ2V0IG5hbWUoKXtcclxuICAgIHJldHVybiBoeXBlcnR5RGVzY3JpcHRvci5uYW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlc2NyaXB0b3IoKSB7XHJcbiAgICByZXR1cm4gaHlwZXJ0eURlc2NyaXB0b3I7XHJcbiAgfVxyXG5cclxuICBnZXQgcnVudGltZUh5cGVydHlVUkwoKXtcclxuICAgIHJldHVybiB0aGlzLmh5cGVydHlVUkw7XHJcbiAgfVxyXG5cclxuICBfc3RhcnQoaHlwZXJ0eVVSTCwgYnVzLCBjb25maWd1cmF0aW9uLCBmYWN0b3J5KSB7XHJcbiAgICB0aGlzLmh5cGVydHlVUkwgPSBoeXBlcnR5VVJMO1xyXG5cclxuICAgIHRoaXMuX2NvbnRleHQgPSBmYWN0b3J5LmNyZWF0ZUNvbnRleHRPYnNlcnZlcihoeXBlcnR5VVJMLCBidXMsIGNvbmZpZ3VyYXRpb24sWydhdmFpbGFiaWxpdHlfY29udGV4dCddKTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICBsZXQgcmVzdW1lZENhbGxiYWNrID0gKGF2YWlsYWJpbGl0eSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnW1VzZXJLd2hPYnNlcnZlci5vbkRpc2Nvbm5lY3RlZF06ICcsIGF2YWlsYWJpbGl0eSk7XHJcblxyXG4gICAgICBhdmFpbGFiaWxpdHkuZGF0YS52YWx1ZXNbMF0udmFsdWUgPSAndW5hdmFpbGFibGUnO1xyXG4gICAgICAvLyB0byBhdm9pZCBmYWxzZSBkaXNjb25uZWN0c1xyXG4gICAgICBhdmFpbGFiaWxpdHkuc3luYygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgcmVzdW1lZEluaXQgPSBbe3ZhbHVlOiAndW5hdmFpbGFibGUnfV07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuc3RhcnQocmVzdW1lZEluaXQsIHJlc3VtZWRDYWxsYmFjayk7XHJcbiAgfVxyXG5cclxucmVzdW1lRGlzY292ZXJpZXMoKSB7XHJcbiAgcmV0dXJuIHRoaXMuX2NvbnRleHQucmVzdW1lRGlzY292ZXJpZXMoKTtcclxuXHJcbn1cclxuXHJcbiAgb25SZXN1bWVPYnNlcnZlcihjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQub25SZXN1bWVPYnNlcnZlcihjYWxsYmFjayk7XHJcbiAgIH1cclxuXHJcblxyXG4gIGRpc2NvdmVyVXNlcnMoZW1haWwsZG9tYWluKVxyXG4gIHtcclxuICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmRpc2NvdmVyVXNlcnMoZW1haWwsZG9tYWluKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3RhcnQgdGhlIHVzZXIgYXZhaWxhYmlsaXR5IG9ic2VydmF0aW9uIGZvciBhIGNlcnRhaW4gdXNlciBhdmFpbGFiaWxpdHkgcmVwb3J0ZXJcclxuICAgKiBAcGFyYW0gIHtEaXNjb3ZlcmVkT2JqZWN0fSBoeXBlcnR5ICAgICAgIEh5cGVydHkgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAgICogQHJldHVybiB7PFByb21pc2U+IERhdGFPYmplY3RPYnNlcnZlcn0gICAgICBJdCByZXR1cm5zIGFzIGEgUHJvbWlzZSB0aGUgVXNlckF2YWlsYWJpbGl0eSBEYXRhIE9iamVjdCBPYnNlcnZlci5cclxuICAgKi9cclxuXHJcbiAgb2JzZXJ2ZShoeXBlcnR5KVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gdGhpcy5fY29udGV4dC5vYnNlcnZlKGh5cGVydHkpO1xyXG5cclxuICB9XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBzdG9wIHRoZSB1c2VyIGF2YWlsYWJpbGl0eSBvYnNlcnZhdGlvbiBmb3IgYSBjZXJ0YWluIHVzZXJcclxuICogQHBhcmFtICB7c3RyaW5nfSBhdmFpbGFiaWxpdHkgICAgICAgdGhlIFVzZXJBdmFpbGFiaWxpdHkgRGF0YSBPYmplY3QgT2JzZXJ2ZXIgVVJMIHRvIGJlIHVub2JzZXJ2ZWQuXHJcbiAqL1xyXG5cclxuICB1bm9ic2VydmUoYXZhaWxhYmlsaXR5KVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gdGhpcy5fY29udGV4dC51bm9ic2VydmUoYXZhaWxhYmlsaXR5KTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVXNlckt3aE9ic2VydmVyO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LWh5cGVydHkvc3JjL29ic2VydmVyLWt3aC9Vc2VyS3doT2JzZXJ2ZXIuaHkuanMiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\");\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, __webpack_exports__, __webpack_require__) {\n      \"use strict\";\n\n      eval(\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return hypertyDescriptor; });\\nvar hypertyDescriptor = {\\n  \\\"name\\\": \\\"UserKwhObserver\\\",\\n  \\\"configuration\\\": {},\\n  \\\"hypertyType\\\": [\\\"availability_context\\\"],\\n  \\\"constraints\\\": {\\n    \\\"browser\\\": true\\n  },\\n  \\\"language\\\": \\\"javascript\\\",\\n  \\\"signature\\\": \\\"\\\",\\n  \\\"dataObjects\\\": [\\\"https://catalogue.%domain%/.well-known/dataschema/ContextObserver\\\"]\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LWh5cGVydHkvc3JjL29ic2VydmVyLWt3aC9IeXBlcnR5RGVzY3JpcHRvci5qcz8wMzA5Il0sIm5hbWVzIjpbImh5cGVydHlEZXNjcmlwdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFPLElBQUlBLGlCQUFpQixHQUFHO0FBQzdCLFVBQVEsaUJBRHFCO0FBRTlCLG1CQUFpQixFQUZhO0FBRzdCLGlCQUFlLENBQ2Isc0JBRGEsQ0FIYztBQU03QixpQkFBZTtBQUNiLGVBQVc7QUFERSxHQU5jO0FBUzdCLGNBQVksWUFUaUI7QUFVN0IsZUFBYSxFQVZnQjtBQVc3QixpQkFBZSxDQUNiLG1FQURhO0FBWGMsQ0FBeEIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgaHlwZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgXCJuYW1lXCI6IFwiVXNlckt3aE9ic2VydmVyXCIsXHJcbiBcImNvbmZpZ3VyYXRpb25cIjoge30sXHJcbiAgXCJoeXBlcnR5VHlwZVwiOiBbXHJcbiAgICBcImF2YWlsYWJpbGl0eV9jb250ZXh0XCJcclxuICBdLFxyXG4gIFwiY29uc3RyYWludHNcIjoge1xyXG4gICAgXCJicm93c2VyXCI6IHRydWVcclxuICB9LFxyXG4gIFwibGFuZ3VhZ2VcIjogXCJqYXZhc2NyaXB0XCIsXHJcbiAgXCJzaWduYXR1cmVcIjogXCJcIixcclxuICBcImRhdGFPYmplY3RzXCI6IFtcclxuICAgIFwiaHR0cHM6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vZGF0YXNjaGVtYS9Db250ZXh0T2JzZXJ2ZXJcIlxyXG4gIF1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LWh5cGVydHkvc3JjL29ic2VydmVyLWt3aC9IeXBlcnR5RGVzY3JpcHRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///1\\n\");\n      /***/\n    }])[\"default\"]\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ])["default"];
});